00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/27/2017 6:08:10 AM

00000000                             1  *-----------------------------------------------------------------------------
00000000                             2  * Title      : Disassembler Project 
00000000                             3  * Written by : Team JKR: Joon Jung, Kevin Tan, Ryu Muthui 
00000000                             4  * Date       : Start Date 02/13/2016 - End Data 03/13/2016
00000000                             5  * Description: CSS422: Computer Hardware and Organization - Final Project
00000000                             6  *-----------------------------------------------------------------------------
00000000                             7  * Main entry into the program.
00000000                             8  * Below are the list of instructions and addressing modes assigned for this project. 
00000000                             9  * 
00000000                            10  * Effective Addressing Modes:
00000000                            11  * Data Register Direct
00000000                            12  * Address Register Direct
00000000                            13  * Address Register Indirect
00000000                            14  * Immediate Data
00000000                            15  * Address Register Indirect with Post incrementing
00000000                            16  * Address Register Indirect with Pre decrementing
00000000                            17  * Absolute Long Address
00000000                            18  * Absolute Word Address
00000000                            19  *
00000000                            20  * Instructions:
00000000                            21  * NOP
00000000                            22  * MOVE
00000000                            23  * MOVEQ
00000000                            24  * MOVEM
00000000                            25  * ADD
00000000                            26  * ADDA
00000000                            27  * ADDI
00000000                            28  * SUB
00000000                            29  * MULS
00000000                            30  * DIVU
00000000                            31  * LEA
00000000                            32  * CLR
00000000                            33  * AND
00000000                            34  * LSL
00000000                            35  * ASR
00000000                            36  * ROL
00000000                            37  * CMP
00000000                            38  * Bcc (BCC, BGT, BLE)
00000000                            39  * JSR
00000000                            40  * RTS
00000000                            41  * Additonal added by us:
00000000                            42  * STOP
00000000                            43  * SUBI
00000000                            44  * ASL
00000000                            45  * LSR
00000000                            46  * ROR
00000000                            47  *----------------------------------------------------------------------------- 
00001000                            48  START:  ORG $1000   First line of source code
00001000                            49      INCLUDE 'JKR_STARTING_LOGIC_W16.X68'
00001000                            50  INTRO
00001000  4EB9 000015F4             51      JSR     CLEAR_NEXT_LINE
00001006  4EB9 00003C24             52      JSR     CLR_ALL                     Clear All data/addr reg for new session
0000100C  4EB9 00003B22             53      JSR     INITIALIZE_VARIABLES        Initialize all variables.
00001012  13FC 0000 00006020        54      MOVE.B  #0, PRINT_COUNTER           Set print counter var to 0.
0000101A  43F9 00003DCC             55      LEA     MSG_WELCOME, A1             Load and display welcome message
00001020  103C 000E                 56      MOVE.B  #14,D0                      |
00001024  4E4F                      57      TRAP    #15                         V
00001026                            58  
00001026                            59  START_ADDR_PROMPT
00001026  43F9 00003D92             60      LEA     STARTADDRESS_PROMPT, A1     Prompt for Start Address
0000102C  103C 000E                 61      MOVE.B  #14, D0                     |
00001030  4E4F                      62      TRAP    #15                         V
00001032  43F9 00006000             63      LEA     START_ADDRESS, A1           Store input value at start addr of program
00001038  103C 0002                 64      MOVE.B  #2, D0                      Read string from keyboard and store at (A1)
0000103C  4E4F                      65      TRAP    #15                         Length of string is stored into D1.L
0000103E  4EB9 000011DE             66      JSR     CHECK_LEN_S                 Check input length of addr (MAX 8 chars) 
00001044  7600                      67      MOVE.L  #0, D3                      D3 is the counter variable, D1 is terminal
00001046                            68  FOR_LOOP_START
00001046  B203                      69      CMP.B   D3, D1                      CMP.B with counter and terminal values
00001048  6700 0044                 70      BEQ     STORE_STR_ADDRESS           IF all chars verified, then store start addr
0000104C  4EB9 000010D0             71      JSR     ASCII_TO_HEX_S              ELSE continue to check chars
00001052  5283                      72      ADDQ.L  #1,D3                       Counter++; D3 is the counter variable
00001054  60F0                      73      BRA     FOR_LOOP_START              Loop back to start of loop
00001056                            74  END_ADDR_PROMPT
00001056  4EB9 000011FA             75      JSR     CLR_DATAREG                 Clear data registers
0000105C  43F9 00003DB0             76      LEA     ENDADDRESS_PROMPT, A1       Prompt for End Address
00001062  103C 000E                 77      MOVE.B  #14, D0                     |
00001066  4E4F                      78      TRAP    #15                         V
00001068  43F9 00006010             79      LEA     END_ADDRESS, A1             Store input value at end addr of program
0000106E  103C 0002                 80      MOVE.B  #2, D0                      Read string from keyboard and store at (A1)
00001072  4E4F                      81      TRAP    #15                         Length of string is stored into D1.L
00001074  1411                      82      MOVE.B  (A1),D2                     We Move input byte value from A1 to D2
00001076  4EB9 000011EC             83      JSR     CHECK_LEN_E                 Check input length of addr (MAX 8 chars) 
0000107C  7600                      84      MOVE.L  #0, D3                      D3 is the counter variable, D1 is terminal
0000107E                            85  FOR_LOOP_END
0000107E  B203                      86      CMP.B   D3, D1                      CMP.B with counter and terminal values
00001080  6700 0018                 87      BEQ     STORE_END_ADDRESS           IF all chars verified, then store end addr
00001084  4EB9 000010DE             88      JSR     ASCII_TO_HEX_E              ELSE continue to check chars
0000108A  5283                      89      ADDQ.L  #1, D3                      Counter++; D3 is the counter variable
0000108C  60F0                      90      BRA     FOR_LOOP_END                Loop back to start of loop
0000108E                            91  STORE_STR_ADDRESS
0000108E  4EB9 00001206             92      JSR     CHECK_ODD_ADDR              Check if addr is ODD to prevent crash  
00001094  2A44                      93      MOVEA.L D4, A5                      A5 holds STARTING ADDRESS
00001096  4EF8 1056                 94      JMP     END_ADDR_PROMPT         
0000109A                            95  STORE_END_ADDRESS              
0000109A  2C44                      96      MOVEA.L D4, A6                      A6 holds ENDING ADDRESS
0000109C  4EF9 000010A2             97      JMP     CHECK_ADDRESS_VALUE
000010A2                            98  CHECK_ADDRESS_VALUE
000010A2  BDCD                      99      CMPA.L  A5, A6                      IF ENDING addr is GT STARTING addr
000010A4  6F00 0008                100      BLE     DISPLAY_INVALID_ADDRESS     Goto invalid addr logic
000010A8  4EF9 00001210            101      JMP     DECIPHER                    ELSE begin decoding
000010AE                           102  DISPLAY_INVALID_ADDRESS
000010AE  43F9 00003E5B            103      LEA     MSG_INVALID_ADDRESS, A1     Load and display invalid message
000010B4  103C 000E                104      MOVE.B  #14, D0                     |
000010B8  4E4F                     105      TRAP    #15                         |
000010BA  4EB9 000011FA            106      JSR     CLR_DATAREG                 Clear data/addr registers
000010C0  2A7C 00000000            107      MOVEA.L #0, A5                      |
000010C6  2C7C 00000000            108      MOVEA.L #0, A6                      V
000010CC  4EF8 1026                109      JMP     START_ADDR_PROMPT           Branch to start of program
000010D0                           110  ASCII_TO_HEX_S
000010D0  1419                     111      MOVE.B  (A1)+,D2                    MOVE byte value from A1 to D2
000010D2  4EB9 000010EC            112      JSR     CHECK_NUM_S                 Run through conversion logic
000010D8  E98C                     113      LSL.L   #4,D4                       Left shift 4 bits, D4 holds converted value
000010DA  B504                     114      EOR.B   D2,D4                       Exclusive OR D2, into D4
000010DC  4E75                     115      RTS 
000010DE                           116  ASCII_TO_HEX_E
000010DE  1419                     117      MOVE.B  (A1)+,D2                    MOVE byte value from A1 to D2
000010E0  4EB9 0000112E            118      JSR     CHECK_NUM_E                 Run through conversion logic
000010E6  E98C                     119      LSL.L   #4,D4                       Left shift 4 bits, D4 holds converted value
000010E8  B504                     120      EOR.B   D2,D4                       Exclusive OR D2, into D4
000010EA  4E75                     121      RTS
000010EC                           122  CHECK_NUM_S
000010EC  0C02 0030                123      CMPI.B  #$30, D2                    IF LT $30 (ASCII value '0')
000010F0  6D00 00AA                124      BLT     INVALID_S                   Goto INVALID
000010F4  0C02 0039                125      CMPI.B  #$39, D2                    ELSE CMPI to $39
000010F8  6E00 0008                126      BGT     CHECK_UCHAR_S               IF GT $39, goto CHECK_UCHAR_START
000010FC  0402 0030                127      SUB.B   #$30, D2                    ELSE SUB $30 convert to Hex and store at D2
00001100  4E75                     128      RTS
00001102                           129  
00001102                           130  CHECK_UCHAR_S
00001102  0C02 0041                131      CMPI.B  #$41, D2                    IF LT $41 (ASCII value 'A'),
00001106  6D00 0094                132      BLT     INVALID_S                   Goto INVALID_START
0000110A  0C02 0046                133      CMPI.B  #$46, D2                    ELSE CMPI to $46
0000110E  6E00 0008                134      BGT     CHECK_LCHAR_S               IF GT $46 (ASCII value 'F'),goto
00001112                           135  
00001112                           136  CHECK_LCHAR_START
00001112  0402 0037                137      SUB.B   #$37, D2                    ELSE SUB $37 to convert to upper case at D2
00001116  4E75                     138      RTS
00001118                           139                               
00001118                           140  CHECK_LCHAR_S
00001118  0C02 0061                141      CMPI.B  #$61, D2                    IF LT $61 (ASCII value 'a')
0000111C  6D00 007E                142      BLT     INVALID_S                   Goto INVALID_START
00001120  0C02 0066                143      CMPI.B  #$66, D2                    ELSE CMPI to $66, goto CHECK_UCHAR_START
00001124  6E00 0076                144      BGT     INVALID_S                   IF GT $66 (ASCII value 'f') go to INVALID
00001128  0402 0057                145      SUB.B   #$57, D2                    ELSE SUB $57 to convert to lower case at D2
0000112C  4E75                     146      RTS
0000112E                           147      
0000112E                           148  CHECK_NUM_E
0000112E  0C02 0030                149      CMPI.B  #$30, D2                    IF LT $30 (ASCII value '0')
00001132  6D00 0094                150      BLT     INVALID_E                   Goto INVALID
00001136  0C02 0039                151      CMPI.B  #$39, D2                    ELSE CMPI to $39
0000113A  6E00 0008                152      BGT     CHECK_UCHAR_E               IF GT $39, goto CHECK_UCHAR_END
0000113E  0402 0030                153      SUB.B   #$30, D2                    ELSE SUB $30 convert to Hex and store at D2
00001142  4E75                     154      RTS
00001144                           155  
00001144                           156  CHECK_UCHAR_E
00001144  0C02 0041                157      CMPI.B  #$41, D2                    IF LT $41 (ASCII value 'A'),
00001148  6D00 007E                158      BLT     INVALID_E                   Goto INVALID_END
0000114C  0C02 0046                159      CMPI.B  #$46, D2                    ELSE CMPI to $46
00001150  6E00 0008                160      BGT     CHECK_LCHAR_E               IF GT $46 (ASCII value 'F'), goto CHECK_LCHAR_END
00001154  0402 0037                161      SUB.B   #$37, D2                    ELSE SUB $37 to convert to upper case at D2
00001158  4E75                     162      RTS  
0000115A                           163      
0000115A                           164  CHECK_LCHAR_E
0000115A  0C02 0061                165      CMPI.B  #$61, D2                    IF LT $61 (ASCII value 'a')
0000115E  6D00 0068                166      BLT     INVALID_E                   Goto INVALID_START
00001162  0C02 0066                167      CMPI.B  #$66, D2                    ELSE CMPI to $66, goto CHECK_UCHAR_END
00001166  6E00 0060                168      BGT     INVALID_E                   IF GT $66 (ASCII value 'f') go to INVALID
0000116A  0402 0057                169      SUB.B   #$57, D2                    ELSE SUB $57 to convert to lower case at D2
0000116E  4E75                     170      RTS
00001170                           171  
00001170                           172  INVALID_ODD_ADDR
00001170  43F9 00003EA0            173      LEA     MSG_INVALID_ODDADDR, A1     Load and display invalid odd addr message
00001176  103C 000E                174      MOVE.B  #14, D0                     |
0000117A  4E4F                     175      TRAP    #15                         |
0000117C  4EB9 000011FA            176      JSR     CLR_DATAREG                 V
00001182  4EF8 1026                177      JMP     START_ADDR_PROMPT           Return to START_ADDR_PROMPT
00001186                           178      
00001186                           179  INVALID_LEN_S
00001186  43F9 00003E18            180      LEA     MSG_INVALID_LENGTH, A1      Load and display invalid length message
0000118C  103C 000D                181      MOVE.B  #13, D0                     |
00001190  4E4F                     182      TRAP    #15                         |
00001192  4EB9 000011FA            183      JSR     CLR_DATAREG                 V
00001198  4EF8 1026                184      JMP     START_ADDR_PROMPT           Return to START_ADDR_PROMPT
0000119C                           185  
0000119C                           186  INVALID_S
0000119C  43F9 00003DEC            187      LEA     MSG_INVALID_ENTRY, A1       Load and display invalid length message
000011A2  103C 000D                188      MOVE.B  #13, D0                     |
000011A6  4E4F                     189      TRAP    #15                         |
000011A8  4EB9 000011FA            190      JSR     CLR_DATAREG                 V
000011AE  4EF8 1026                191      JMP     START_ADDR_PROMPT           Return to START_ADDR_PROMPT    
000011B2                           192      
000011B2                           193  INVALID_LEN_E
000011B2  43F9 00003E18            194      LEA     MSG_INVALID_LENGTH, A1      Load and display invalid length message
000011B8  103C 000D                195      MOVE.B  #13, D0                     |
000011BC  4E4F                     196      TRAP    #15                         |
000011BE  4EB9 000011FA            197      JSR     CLR_DATAREG                 V
000011C4  6000 FE90                198      BRA     END_ADDR_PROMPT             Return to END_ADDR_PROMPT
000011C8                           199  
000011C8                           200  INVALID_E
000011C8  43F9 00003DEC            201      LEA     MSG_INVALID_ENTRY, A1       Load and display invalid length message
000011CE  103C 000D                202      MOVE.B  #13, D0                     |
000011D2  4E4F                     203      TRAP    #15                         |
000011D4  4EB9 000011FA            204      JSR     CLR_DATAREG                 V
000011DA  4EF8 1056                205      JMP     END_ADDR_PROMPT             Return to END_ADDR_PROMPT  
000011DE                           206  
000011DE                           207  CHECK_LEN_S 
000011DE  B23C 0008                208      CMP.B   #$8, D1                     IF string length is GT 8
000011E2  6EA2                     209      BGT     INVALID_LEN_S               Goto INVALID_LEN_START
000011E4  B23C 0000                210      CMP.B   #$0, D1                     ELSE CMP length of string with 0
000011E8  6F9C                     211      BLE     INVALID_LEN_S               IF string length is LT 0, Goto INVALID_LEN_S
000011EA  4E75                     212      RTS
000011EC                           213  
000011EC                           214  CHECK_LEN_E 
000011EC  B23C 0008                215      CMP.B   #$8, D1                     IF string length is GT 8
000011F0  6EC0                     216      BGT     INVALID_LEN_E               Goto INVALID_LEN_END
000011F2  B23C 0000                217      CMP.B   #$0, D1                     ELSE CMP length of string with 0
000011F6  6FBA                     218      BLE     INVALID_LEN_E               IF string length is LT 0, Goto INVALID_LEN_E
000011F8  4E75                     219      RTS
000011FA                           220  
000011FA                           221  CLR_DATAREG                             *Subroutine to clear data registers
000011FA  4280                     222      CLR.L   D0                          |
000011FC  4281                     223      CLR.L   D1                          |
000011FE  4282                     224      CLR.L   D2                          |
00001200  4283                     225      CLR.L   D3                          |
00001202  4284                     226      CLR.L   D4                          V
00001204  4E75                     227      RTS                                 RTS
00001206                           228  CHECK_ODD_ADDR
00001206  1604                     229      MOVE.B  D4, D3                      Get a byte value from the addr
00001208  E20B                     230      LSR.B   #1, D3                      Right shift 1 bit to force carry bit flag
0000120A  6500 FF64                231      BCS     INVALID_ODD_ADDR            IF carry bit is 1, it is odd
0000120E  4E75                     232      RTS
00001210                           233  
00001210                           234  
00001210                           235  -------------------- end include --------------------
00001210                           236      INCLUDE 'JKR_DECIPHER_LOGIC_W16.X68'
00001210                           237  DECIPHER
00001210  43F9 00003ED2            238      LEA     MSG_DECODE, A1
00001216  103C 000E                239      MOVE.B  #14, D0
0000121A  4E4F                     240      TRAP    #15
0000121C  41F9 00001296            241      LEA     JMP_TABLE, A0               Load jump table addr into A0
00001222                           242      
00001222                           243  PRINT_LOGIC
00001222  4EB9 00003B22            244      JSR     INITIALIZE_VARIABLES        Reset all variables
00001228  4EB9 00003C14            245      JSR     CLR_DATAREG_D6              Clear all Data Reg up to D6
0000122E  5239 00006020            246      ADDI.B  #1, (PRINT_COUNTER)         Increment print counter by one
00001234  0C39 001E 00006020       247      CMP.B   #30,(PRINT_COUNTER)         Is printcount less than 30
0000123C  6E00 000E                248      BGT     PRESS_ENTER                 IF GT 30, go to prompt to press enter
00001240  0C39 001E 00006020       249      CMP.B   #30, (PRINT_COUNTER)        Is printcount less than 30
00001248  6600 001E                250      BNE     JMP_LOOP                    IF NE, go to JUMP table loop
0000124C                           251      
0000124C                           252  PRESS_ENTER                             *Print pause after printing 30 lines
0000124C  13FC 0000 00006020       253      MOVE.B  #0, (PRINT_COUNTER)         Set print count to 0
00001254  43F9 00003F6E            254      LEA     PRESS_ENTER_PROMPT, A1      Display press enter prompt
0000125A  103C 000E                255      MOVE.B  #14, D0             
0000125E  4E4F                     256      TRAP    #15
00001260  103C 0004                257      MOVE.B  #4, D0                      Take the 'Enter' keyboard input
00001264  4E4F                     258      TRAP    #15
00001266  4241                     259      CLR     D1                          Discard user input
00001268                           260  
00001268                           261  JMP_LOOP
00001268  41F9 00001296            262      LEA     JMP_TABLE, A0               Load jump table addr into A0
0000126E  4280                     263      CLR.L   D0                          Clear D0 of size long   
00001270  BBCE                     264      CMPA.L  A6, A5                      Compare Start and End addr
00001272  6C00 2AB8                265      BGE     FINAL                       IF current addr is or greater than ending, end decoding
00001276  3E15                     266      MOVE.W  (A5), D7                    Store full opword into D7
00001278  4EB9 00001602            267      JSR     DISPLAY_ADDRESS             Display addr in memory
0000127E  301D                     268      MOVE.W  (A5)+, D0                   Store another opword into D0 for manipulation
00001280  123C 000C                269      MOVE.B  #SHIFT_12_BITS, D1          Shift 12 bits to right to isolate first 4 bits
00001284  E268                     270      LSR.W   D1, D0                      Move the bits
00001286  6000 29D8                271      BRA     CHECK_MODE
0000128A                           272      
0000128A                           273  SAFE
0000128A  C0FC 0006                274      MULU    #6, D0                      Multiply D0 by 6 to properly identify 4 most sig bits
0000128E  4EB0 0000                275      JSR     0(A0,D0)                    Indirect jump to proper index in jump table
00001292  BBCE                     276      CMPA.L  A6, A5                      Compare current address and End adress
00001294  6FD2                     277      BLE     JMP_LOOP                    IF Start addr less than End addr, reloop
00001296                           278  
00001296                           279  JMP_TABLE
00001296  4EF9 000012F6            280      JMP     MSB_0000                    *ADDI, ANDI, CMPI 
0000129C  4EF9 000012FC            281      JMP     MSB_0001                    *MOVE.B
000012A2  4EF9 00001302            282      JMP     MSB_0010                    *MOVE.L
000012A8  4EF9 00001308            283      JMP     MSB_0011                    *MOVE.W
000012AE  4EF9 0000130E            284      JMP     MSB_0100                    *CLR, MULS.L, DIVU.L, MOVEM, LEA, RTS, JSR, NOP, STOP
000012B4  4EF9 00001314            285      JMP     MSB_0101                    *NOT USED  
000012BA  4EF9 00001318            286      JMP     MSB_0110                    *BCC, BGT, BLE
000012C0  4EF9 0000131E            287      JMP     MSB_0111                    *MOVEQ.L
000012C6  4EF9 00001324            288      JMP     MSB_1000                    *DIVU.W
000012CC  4EF9 0000132A            289      JMP     MSB_1001                    *SUB, SUBA
000012D2  4EF9 00001330            290      JMP     MSB_1010                    *Unassigned  NOT USED    
000012D8  4EF9 00001336            291      JMP     MSB_1011                    *CMP
000012DE  4EF9 0000133C            292      JMP     MSB_1100                    *AND, MULS.W
000012E4  4EF9 00001342            293      JMP     MSB_1101                    *ADD, ADDA
000012EA  4EF9 00001348            294      JMP     MSB_1110                    *ROL, ROR, LSL, LSR, ASL, ASR
000012F0  4EF9 0000134E            295      JMP     MSB_1111                    *Special/Reserved  NOT USED
000012F6                           296      
000012F6                           297  MSB_0000
000012F6  4EF9 00001352            298      JMP     MSB_SUBR_0000
000012FC                           299  MSB_0001
000012FC  4EF9 0000138E            300      JMP     MSB_SUBR_0001
00001302                           301  MSB_0010
00001302  4EF9 0000139A            302      JMP     MSB_SUBR_0010
00001308                           303  MSB_0011
00001308  4EF9 000013A6            304      JMP     MSB_SUBR_0011
0000130E                           305  MSB_0100    
0000130E  4EF9 000013B2            306      JMP     MSB_SUBR_0100
00001314                           307  MSB_0101
00001314  6000 0110                308      BRA     MSB_SUBR_0101               NOT USED   
00001318                           309  MSB_0110
00001318  4EF9 0000142C            310      JMP     MSB_SUBR_0110
0000131E                           311  MSB_0111
0000131E  4EF9 00001450            312      JMP     MSB_SUBR_0111
00001324                           313  MSB_1000
00001324  4EF9 00001464            314      JMP     MSB_SUBR_1000
0000132A                           315  MSB_1001
0000132A  4EF9 00001478            316      JMP     MSB_SUBR_1001
00001330                           317  MSB_1010
00001330  4EF9 000014D8            318      JMP     MSB_SUBR_1010               NOT USED
00001336                           319  MSB_1011
00001336  4EF9 000014B4            320      JMP     MSB_SUBR_1011
0000133C                           321  MSB_1100    
0000133C  4EF9 000014DE            322      JMP     MSB_SUBR_1100
00001342                           323  MSB_1101    
00001342  4EF9 00001528            324      JMP     MSB_SUBR_1101  
00001348                           325  MSB_1110    
00001348  4EF9 00001574            326      JMP     MSB_SUBR_1110
0000134E                           327  MSB_1111    
0000134E  6000 025A                328      BRA     MSB_SUBR_1111               NOT USED
00001352                           329  
00001352                           330  MSB_SUBR_0000
00001352  4EB9 00002204            331      JSR     GET_ADDI_BITS 
00001358  B47C 0600                332      CMP.W   #$0600, D2
0000135C  6700 1864                333      BEQ     DECODE_ADDIB                If $0600, THEN ADDI.B
00001360  B47C 0640                334      CMP.W   #$0640, D2
00001364  6700 1874                335      BEQ     DECODE_ADDIW                If $0640, THEN ADDI.W
00001368  B47C 0680                336      CMP.W   #$0680, D2
0000136C  6700 1884                337      BEQ     DECODE_ADDIL                If $0680, THEN ADDI.L
00001370                           338      
00001370  B47C 0400                339      CMP.W   #$0400, D2
00001374  6700 1A08                340      BEQ     DECODE_SUBIB                If $0600, THEN SUBI.B
00001378  B47C 0440                341      CMP.W   #$0440, D2
0000137C  6700 1A18                342      BEQ     DECODE_SUBIW                If $0640, THEN SUBI.W
00001380  B47C 0480                343      CMP.W   #$0480, D2
00001384  6700 1A28                344      BEQ     DECODE_SUBIL                If $0680, THEN SUBI.L
00001388  4EF9 000015AA            345      JMP     INVALID_OP
0000138E                           346  
0000138E                           347  MSB_SUBR_0001
0000138E  4EF9 0000276E            348      JMP     DECODE_MOVEB
00001394  4EF9 000015AA            349      JMP     INVALID_OP
0000139A                           350  
0000139A                           351  MSB_SUBR_0010
0000139A  4EF9 0000278E            352      JMP     DECODE_MOVEL
000013A0  4EF9 000015AA            353      JMP     INVALID_OP
000013A6                           354  
000013A6                           355  MSB_SUBR_0011
000013A6  4EF9 0000277E            356      JMP     DECODE_MOVEW  
000013AC  4EF9 000015AA            357      JMP     INVALID_OP
000013B2                           358  
000013B2                           359  MSB_SUBR_0100
000013B2  BE7C 4E71                360      CMP.W   #$4E71, D7                  Compares hex value for NOP
000013B6  6700 0F10                361      BEQ     DECODE_NOP                  IF equal, decode NOP Opcode
000013BA                           362  
000013BA  BE7C 4E72                363      CMP.W   #$4E72, D7                  Compares hex value for STOP
000013BE  6700 0F18                364      BEQ     DECODE_STOP                 IF equal, decode STOP Opcode
000013C2                           365      
000013C2  BE7C 4E75                366      CMP.W   #$4E75, D7                  Compares hex value for RTS
000013C6  6700 0F7E                367      BEQ     DECODE_RTS                  IF equal, decode RTS Opcode
000013CA                           368  
000013CA  4EB9 000021E0            369      JSR     GET_CLR_BITS                Get CLR Bits
000013D0  B47C 0008                370      CMP.W   #VAR_CLRB, D2               IF match with CLR.B bits
000013D4  6700 0F80                371      BEQ     DECODE_CLRB                 Decode CLR.B
000013D8  B47C 0009                372      CMP.W   #VAR_CLRW, D2               IF match with CLR.B bits
000013DC  6700 0F82                373      BEQ     DECODE_CLRW                 Decode CLR.W
000013E0  B47C 000A                374      CMP.W   #VAR_CLRL, D2               IF match with CLR.B bits
000013E4  6700 0F84                375      BEQ     DECODE_CLRL                 Decode CLR.L
000013E8                           376  
000013E8  4EB9 000021EC            377      JSR     GET_JSR_BITS                Get JSR Bits
000013EE  B47C 003A                378      CMP.W   #VAR_JSR, D2                IF match with JSR bits
000013F2  6700 0F02                379      BEQ     DECODE_JSR                  Decode JSR
000013F6                           380  
000013F6  4EB9 000021F8            381      JSR     GET_LEA_BITS                Get LEA Bits
000013FC  B47C 0007                382      CMP.W   #VAR_LEA, D2                IF match with LSR bits    
00001400  6700 0F18                383      BEQ     DECODE_LEA                  Decode JSR
00001404                           384  
00001404  4EB9 00002220            385      JSR     GET_MOVEM_BITS              Get MOVEM Bits
0000140A  B47C 0002                386      CMP.W   #VAR_MOVEMW, D2             IF match with MOVEM.W bits 
0000140E  6700 1038                387      BEQ     DECODE_MOVEMW               Decode MOVEMW
00001412                           388  
00001412  4EB9 00002220            389      JSR     GET_MOVEM_BITS              Get MOVEM Bits
00001418  B47C 0003                390      CMP.W   #VAR_MOVEML, D2             IF match with MOVEM.L bits 
0000141C  6700 103C                391      BEQ     DECODE_MOVEML               Decode MOVEML
00001420  4EF9 000015AA            392      JMP     INVALID_OP
00001426                           393  
00001426                           394  MSB_SUBR_0101  
00001426  4EF9 000015AA            395      JMP     INVALID_OP
0000142C                           396  
0000142C                           397  MSB_SUBR_0110 
0000142C  4EB9 000021D4            398      JSR     GET_BCC_BITS 
00001432  B47C 0004                399      CMP.W   #VAR_BCC, D2
00001436  6700 15FA                400      BEQ     DECODE_BCC
0000143A                           401      
0000143A  B47C 000E                402      CMP.W   #VAR_BGT, D2
0000143E  6700 1602                403      BEQ     DECODE_BGT
00001442                           404       
00001442  B47C 000F                405      CMP.W   #VAR_BLE, D2
00001446  6700 160A                406      BEQ     DECODE_BLE 
0000144A  4EF9 000015AA            407      JMP     INVALID_OP
00001450                           408   
00001450                           409  MSB_SUBR_0111 
00001450  4EB9 00002210            410      JSR     GET_MOVEQ_BITS
00001456  B47C 0000                411      CMP.W   #VAR_MOVEQ, D2
0000145A  6700 1386                412      BEQ     DECODE_MOVEQ
0000145E  4EF9 000015AA            413      JMP     INVALID_OP
00001464                           414  
00001464                           415  MSB_SUBR_1000 
00001464  4EB9 00002250            416      JSR     GET_MULS_DIVU_BITS      
0000146A  B47C 0003                417      CMP.W   #VAR_DIVU, D2
0000146E  6700 157E                418      BEQ     DECODE_DIVU   
00001472  4EF9 000015AA            419      JMP     INVALID_OP
00001478                           420       
00001478                           421  MSB_SUBR_1001                   
00001478  4EB9 000021A8            422      JSR     GET_OPMODE_BITS             
0000147E  B47C 0000                423      CMP.W   #0, D2
00001482  6700 19C6                424      BEQ     DECODE_SUBB_EATODN
00001486  B47C 0001                425      CMP.W   #1, D2
0000148A  6700 19E6                426      BEQ     DECODE_SUBW_EATODN
0000148E  B47C 0002                427      CMP.W   #2, D2
00001492  6700 19FE                428      BEQ     DECODE_SUBL_EATODN
00001496  B47C 0004                429      CMP.W   #4, D2
0000149A  6700 1938                430      BEQ     DECODE_SUBB_DNTOEA
0000149E  B47C 0005                431      CMP.W   #5, D2
000014A2  6700 1958                432      BEQ     DECODE_SUBW_DNTOEA
000014A6  B47C 0006                433      CMP.W   #6, D2
000014AA  6700 1970                434      BEQ     DECODE_SUBL_DNTOEA 
000014AE  4EF9 000015AA            435      JMP     INVALID_OP
000014B4                           436  
000014B4                           437  MSB_SUBR_1011              
000014B4  4EB9 000021A8            438      JSR     GET_OPMODE_BITS
000014BA  B47C 0000                439      CMP.W   #VAR_CMPB, D2
000014BE  6700 0EE6                440      BEQ     DECODE_CMPB
000014C2  B47C 0001                441      CMP.W   #VAR_CMPW, D2
000014C6  6700 0F22                442      BEQ     DECODE_CMPW
000014CA  B47C 0002                443      CMP.W   #VAR_CMPL, D2
000014CE  6700 0F24                444      BEQ     DECODE_CMPL
000014D2  4EF9 000015AA            445      JMP     INVALID_OP
000014D8                           446  
000014D8                           447  MSB_SUBR_1010       
000014D8  4EF9 000015AA            448      JMP     INVALID_OP
000014DE                           449  
000014DE                           450  MSB_SUBR_1100       
000014DE  4EB9 00002250            451      JSR     GET_MULS_DIVU_BITS          Decode Muls/Divu
000014E4  B47C 0007                452      CMP.W   #VAR_MULS, D2
000014E8  6700 14F2                453      BEQ     DECODE_MULS
000014EC  4EB9 000021A8            454      JSR     GET_OPMODE_BITS                 
000014F2  B47C 0000                455      CMP.W   #0, D2
000014F6  6700 1784                456      BEQ     DECODE_ANDB_EATODN          Decode AND EA to Dn
000014FA  B47C 0001                457      CMP.W   #1, D2
000014FE  6700 179C                458      BEQ     DECODE_ANDW_EATODN
00001502  B47C 0002                459      CMP.W   #2, D2
00001506  6700 17B4                460      BEQ     DECODE_ANDL_EATODN
0000150A  B47C 0004                461      CMP.W   #4, D2
0000150E  6700 1800                462      BEQ     DECODE_ANDB_DNTOEA          Decode AND Dn to EA
00001512  B47C 0005                463      CMP.W   #5, D2
00001516  6700 1818                464      BEQ     DECODE_ANDW_DNTOEA
0000151A  B47C 0006                465      CMP.W   #6, D2
0000151E  6700 1830                466      BEQ     DECODE_ANDL_DNTOEA
00001522  4EF9 000015AA            467      JMP     INVALID_OP
00001528                           468    
00001528                           469  MSB_SUBR_1101 
00001528  4EB9 000021A8            470      JSR     GET_OPMODE_BITS
0000152E  B47C 0000                471      CMP.W   #0, D2
00001532  6700 1568                472      BEQ     DECODE_ADDB_EATODN
00001536  B47C 0001                473      CMP.W   #1, D2
0000153A  6700 15AC                474      BEQ     DECODE_ADDW_EATODN
0000153E  B47C 0002                475      CMP.W   #2, D2
00001542  6700 15C4                476      BEQ     DECODE_ADDL_EATODN
00001546  B47C 0003                477      CMP.W   #3, D2
0000154A  6700 16CC                478      BEQ     DECODE_ADDAW
0000154E  B47C 0004                479      CMP.W   #4, D2
00001552  6700 1610                480      BEQ     DECODE_ADDB_DNTOEA
00001556  B47C 0005                481      CMP.W   #5, D2
0000155A  6700 1620                482      BEQ     DECODE_ADDW_DNTOEA
0000155E  B47C 0006                483      CMP.W   #6, D2
00001562  6700 1630                484      BEQ     DECODE_ADDL_DNTOEA
00001566  B47C 0007                485      CMP.W   #7, D2
0000156A  6700 16BC                486      BEQ     DECODE_ADDAL
0000156E  4EF9 000015AA            487      JMP     INVALID_OP
00001574                           488  
00001574                           489  MSB_SUBR_1110
00001574                           490      *<REG SHIFT>    
00001574  4EB9 00002260            491      JSR     GET_SHIFT_SIZE_BITS         Check 6th and 7th bit, %11 != RS mode
0000157A  B43C 0000                492      CMP.B   #0, D2
0000157E  6700 1322                493      BEQ     DECODE_ROTATIONS_BYTE_RS    %00 == BYTE
00001582  B43C 0001                494      CMP.B   #1, D2
00001586  6700 1326                495      BEQ     DECODE_ROTATIONS_WORD_RS    %01 == WORD
0000158A  B43C 0002                496      CMP.B   #2, D2
0000158E  6700 132A                497      BEQ     DECODE_ROTATIONS_LONG_RS    %11 == LONG
00001592                           498      *<MEM SHIFT>    
00001592  6000 2780                499      BRA     CHECK_ROTATIONS_OPMODE_LHS
00001596                           500  
00001596                           501  VALID_ROTATIONS_MS
00001596  4EB9 00002260            502      JSR     GET_SHIFT_SIZE_BITS
0000159C  B43C 0003                503      CMP.B   #3, D2  
000015A0  6700 1262                504      BEQ     DECODE_ROTATIONS_MS         Check 6th and 7th bit, %11 == MS mode 
000015A4                           505  
000015A4                           506  INVALID_ROTATIONS_MS    
000015A4  4EF9 000015AA            507      JMP     INVALID_OP
000015AA                           508  
000015AA                           509  MSB_SUBR_1111
000015AA                           510  
000015AA                           511  INVALID_OP
000015AA  4EF9 000016EC            512      JMP INVALID_OPWORD                  When current opword can't be decoded (ERROR)
000015B0                           513  
000015B0                           514  -------------------- end include --------------------
000015B0                           515      INCLUDE 'JKR_PRINT_LOGIC_W16.X68'
000015B0                           516  PRINT_SLASH
000015B0  43F9 00003F9E            517      LEA     DISPLAY_SLASH, A1
000015B6  103C 000E                518      MOVE.B  #14, D0
000015BA  4E4F                     519      TRAP    #15
000015BC  4E75                     520      RTS
000015BE                           521  PRINT_COMMA
000015BE  43F9 00003F9C            522      LEA     DISPLAY_COMMA, A1
000015C4  103C 000E                523      MOVE.B  #14, D0
000015C8  4E4F                     524      TRAP    #15
000015CA  4E75                     525      RTS
000015CC                           526  PRINT_DOLLAR
000015CC  43F9 00003F98            527      LEA     DISPLAY_DOLLAR, A1
000015D2  103C 000E                528      MOVE.B  #14, D0
000015D6  4E4F                     529      TRAP    #15
000015D8  4E75                     530      RTS
000015DA                           531  PRINT_IMDATA
000015DA  43F9 00003F9A            532      LEA     DISPLAY_HASH, A1
000015E0  103C 000E                533      MOVE.B  #14, D0
000015E4  4E4F                     534      TRAP    #15
000015E6  43F9 00003F98            535      LEA     DISPLAY_DOLLAR, A1
000015EC  103C 000E                536      MOVE.B  #14, D0
000015F0  4E4F                     537      TRAP    #15
000015F2  4E75                     538      RTS
000015F4                           539  CLEAR_NEXT_LINE
000015F4  43F9 00003F92            540      LEA     CLEAR_LINE,A1               Display a space and clear to new line
000015FA  103C 000E                541      MOVE.B  #14, D0                     |
000015FE  4E4F                     542      TRAP    #15                         V
00001600  4E75                     543      RTS                                 RTS
00001602                           544  DISPLAY_ADDRESS
00001602  43F9 00003F96            545      LEA     DISPLAY_SPACE, A1
00001608  103C 000E                546      MOVE.B  #14, D0
0000160C  4E4F                     547      TRAP    #15
0000160E  4EB8 15CC                548      JSR     PRINT_DOLLAR
00001612  4EF9 0000161A            549      JMP     HEX_TO_ACII_ADDR    
00001618  4E75                     550      RTS                         
0000161A                           551  HEX_TO_ACII_ADDR
0000161A  4EB9 00003C14            552      JSR     CLR_DATAREG_D6              Clear all registers before calculation
00001620  224D                     553      MOVEA.L A5, A1                      Take the addr at A5 and put it in A1
00001622  2C09                     554      MOVE.L  A1, D6                      Put addr1's addr into D6, to hold addr value
00001624  143C 0001                555      MOVE.B  #1, D2                      Counter Variable
00001628  163C 0004                556      MOVE.B  #4, D3                      D3 will hold starting shift value, as 4
0000162C  223C F0000000            557      MOVE.L  #$F0000000, D1              Move the masking value to D1
00001632                           558        
00001632                           559  CONVERSION_LOOP
00001632  2A06                     560      MOVE.L  D6, D5                      D5 will hold addr for manipulation
00001634  CA81                     561      AND.L   D1, D5                      Mask D5 with mask value
00001636  E889                     562      LSR.L   #4, D1                      Update the mask to next digit, by shifting 4
00001638  E7BD                     563      ROL.L   D3, D5                      ROL once to bring MSB to LSB
0000163A  1805                     564      MOVE.B  D5, D4                      Extract the digit
0000163C  4EB9 000016D8            565      JSR     CHECK_CONVERSION            Send the extracted digit for conversion
00001642  23FC 00000000 00006022   566      MOVE.L  #0,(PRINT_ADDR_CHAR)        Initialize addr with 0 for null termination
0000164C  13C4 00006022            567      MOVE.B  D4,(PRINT_ADDR_CHAR)        Print the converted digit
00001652  43F9 00006022            568      LEA     PRINT_ADDR_CHAR,A1          |
00001658  103C 000E                569      MOVE.B  #14, D0                     |
0000165C  4E4F                     570      TRAP    #15                         V
0000165E  0C02 0008                571      CMPI.B  #8, D2                      IF counter equals terminal value
00001662  6700 0008                572      BEQ     CONTINUE_DISPLAY            Exit the loop
00001666  5803                     573      ADDQ.B  #4, D3                      Else update shift value to next digit
00001668  5202                     574      ADDQ.B  #1, D2                      Counter++
0000166A  60C6                     575      BRA     CONVERSION_LOOP             Loop to start of loop
0000166C                           576  CONTINUE_DISPLAY
0000166C  4E75                     577      RTS
0000166E                           578  PRINT_DISP_ADDR
0000166E  43F9 00003F96            579      LEA     DISPLAY_SPACE, A1
00001674  103C 000E                580      MOVE.B  #14, D0
00001678  4E4F                     581      TRAP    #15
0000167A  4EB8 15CC                582      JSR     PRINT_DOLLAR
0000167E  4EF9 00001686            583      JMP     HEX_TO_ACII_DISPLACEMENT    
00001684  4E75                     584      RTS                         
00001686                           585  HEX_TO_ACII_DISPLACEMENT
00001686  4EB9 00003C14            586      JSR     CLR_DATAREG_D6              Clear all registers before calculation
0000168C  2C07                     587      MOVE.L  D7, D6                      Put addr1's addr into D6, to hold addr value
0000168E  143C 0001                588      MOVE.B  #1, D2                      Counter Variable
00001692  163C 0004                589      MOVE.B  #4, D3                      D3 will hold starting shift value, as 4
00001696  223C F0000000            590      MOVE.L  #$F0000000, D1              Move the masking value to D1
0000169C                           591        
0000169C                           592  DISPLACEMENT_LOOP
0000169C  2A06                     593      MOVE.L  D6, D5                      D5 will hold addr for manipulation
0000169E  CA81                     594      AND.L   D1, D5                      Mask D5 with mask value
000016A0  E889                     595      LSR.L   #4, D1                      Update the mask to next digit, by shifting 4
000016A2  E7BD                     596      ROL.L   D3, D5                      ROL once to bring MSB to LSB
000016A4  1805                     597      MOVE.B  D5, D4                      Extract the digit
000016A6  4EB9 000016D8            598      JSR     CHECK_CONVERSION            Send the extracted digit for conversion
000016AC  23FC 00000000 00006022   599      MOVE.L  #0,(PRINT_ADDR_CHAR)        Initialize addr with 0 for null termination
000016B6  13C4 00006022            600      MOVE.B  D4,(PRINT_ADDR_CHAR)        Print the converted digit
000016BC  43F9 00006022            601      LEA     PRINT_ADDR_CHAR,A1          |
000016C2  103C 000E                602      MOVE.B  #14, D0                     |
000016C6  4E4F                     603      TRAP    #15                         V
000016C8  0C02 0008                604      CMPI.B  #8, D2                      IF counter equals terminal value
000016CC  6700 0008                605      BEQ     EXIT_DISP_LOOP              Exit the loop
000016D0  5803                     606      ADDQ.B  #4, D3                      Else update shift value to next digit
000016D2  5202                     607      ADDQ.B  #1, D2                      Counter++
000016D4  60C6                     608      BRA     DISPLACEMENT_LOOP           Loop to start of loop
000016D6                           609  EXIT_DISP_LOOP
000016D6  4E75                     610      RTS
000016D8                           611  CHECK_CONVERSION 
000016D8  0C04 0009                612      CMPI.B  #$9, D4                     D4 stores the single hex value to print
000016DC  6E00 0008                613      BGT     CHECK_LETTER        
000016E0  0604 0030                614      ADD.B   #$30, D4                    Add $30 to make it ASCII value_digits
000016E4  4E75                     615      RTS
000016E6                           616      
000016E6                           617  CHECK_LETTER 
000016E6  0604 0037                618      ADD.B   #$37,D4                     Add $37 to make it ASCII value_upper(A-F)
000016EA  4E75                     619      RTS
000016EC                           620  INVALID_OPWORD
000016EC  43F9 00003FEE            621      LEA     DISPLAY_DATA, A1    
000016F2  103C 000E                622      MOVE.B  #14, D0             
000016F6  4E4F                     623      TRAP    #15
000016F8  4EB8 15CC                624      JSR     PRINT_DOLLAR
000016FC  4EB9 00003C14            625      JSR     CLR_DATAREG_D6              Clear all registers before calculation
00001702  3C07                     626      MOVE.W  D7, D6                      Put addr1's addr into D6, to hold addr value
00001704  143C 0001                627      MOVE.B  #1, D2                      Counter Variable
00001708  163C 0004                628      MOVE.B  #4, D3                      D3 will hold starting shift value, as 4
0000170C  323C F000                629      MOVE.W  #$F000, D1                  Move the masking value to D1
00001710                           630      
00001710                           631  INVALID_LOOP
00001710  3A06                     632      MOVE.W  D6, D5                      D5 will hold addr for manipulation
00001712  CA41                     633      AND.W   D1, D5                      Mask D5 with mask value
00001714  E849                     634      LSR.W   #4, D1                      Update the mask to next digit, by shifting 4
00001716  E77D                     635      ROL.W   D3, D5                      ROL once to bring MSB to LSB
00001718  1805                     636      MOVE.B  D5, D4                      Extract the digit
0000171A  4EB8 16D8                637      JSR     CHECK_CONVERSION            Send the extracted digit for conversion
0000171E  33FC 0000 00006022       638      MOVE.W  #0,(PRINT_ADDR_CHAR)        Initialize addr with a 0 for null termination
00001726  13C4 00006022            639      MOVE.B  D4,(PRINT_ADDR_CHAR)        Print the converted digit
0000172C  43F9 00006022            640      LEA     PRINT_ADDR_CHAR, A1         |
00001732  103C 000E                641      MOVE.B  #14, D0                     |
00001736  4E4F                     642      TRAP    #15                         V
00001738  0C02 0004                643      CMPI.B  #4, D2                      IF counter equals terminal value
0000173C  6700 0008                644      BEQ     EXIT_LOOP                   Exit the loop
00001740  5803                     645      ADDQ.B  #4, D3                      Else update shift value to next digit
00001742  5202                     646      ADDQ.B  #1, D2                      Counter++
00001744  60CA                     647      BRA     INVALID_LOOP                Loop to start of loop
00001746                           648  EXIT_LOOP
00001746  4EB8 15F4                649      JSR     CLEAR_NEXT_LINE
0000174A  4EF8 1222                650      JMP     PRINT_LOGIC
0000174E                           651  PRINT_D0_RHS
0000174E  43F9 000041FD            652      LEA     DISPLAY_D0, A1
00001754  103C 000E                653      MOVE.B  #14, D0
00001758  4E4F                     654      TRAP    #15
0000175A  4EB8 15F4                655      JSR     CLEAR_NEXT_LINE
0000175E  4EF8 1222                656      JMP     PRINT_LOGIC
00001762                           657  PRINT_D1_RHS
00001762  43F9 00004200            658      LEA     DISPLAY_D1, A1
00001768  103C 000E                659      MOVE.B  #14, D0
0000176C  4E4F                     660      TRAP    #15
0000176E  4EB8 15F4                661      JSR     CLEAR_NEXT_LINE
00001772  4EF8 1222                662      JMP     PRINT_LOGIC
00001776                           663  PRINT_D2_RHS
00001776  43F9 00004203            664      LEA     DISPLAY_D2, A1
0000177C  103C 000E                665      MOVE.B  #14, D0
00001780  4E4F                     666      TRAP    #15
00001782  4EB8 15F4                667      JSR     CLEAR_NEXT_LINE
00001786  4EF8 1222                668      JMP     PRINT_LOGIC
0000178A                           669  PRINT_D3_RHS
0000178A  43F9 00004206            670      LEA     DISPLAY_D3, A1
00001790  103C 000E                671      MOVE.B  #14, D0
00001794  4E4F                     672      TRAP    #15
00001796  4EB8 15F4                673      JSR     CLEAR_NEXT_LINE
0000179A  4EF8 1222                674      JMP     PRINT_LOGIC
0000179E                           675  PRINT_D4_RHS
0000179E  43F9 00004209            676      LEA     DISPLAY_D4, A1
000017A4  103C 000E                677      MOVE.B  #14, D0
000017A8  4E4F                     678      TRAP    #15
000017AA  4EB8 15F4                679      JSR     CLEAR_NEXT_LINE
000017AE  4EF8 1222                680      JMP     PRINT_LOGIC
000017B2                           681  PRINT_D5_RHS
000017B2  43F9 0000420C            682      LEA     DISPLAY_D5, A1
000017B8  103C 000E                683      MOVE.B  #14, D0
000017BC  4E4F                     684      TRAP    #15
000017BE  4EB8 15F4                685      JSR     CLEAR_NEXT_LINE
000017C2  4EF8 1222                686      JMP     PRINT_LOGIC
000017C6                           687  PRINT_D6_RHS
000017C6  43F9 0000420F            688      LEA     DISPLAY_D6, A1
000017CC  103C 000E                689      MOVE.B  #14, D0
000017D0  4E4F                     690      TRAP    #15
000017D2  4EB8 15F4                691      JSR     CLEAR_NEXT_LINE
000017D6  4EF8 1222                692      JMP     PRINT_LOGIC
000017DA                           693  PRINT_D7_RHS
000017DA  43F9 00004212            694      LEA     DISPLAY_D7, A1
000017E0  103C 000E                695      MOVE.B  #14, D0
000017E4  4E4F                     696      TRAP    #15
000017E6  4EB8 15F4                697      JSR     CLEAR_NEXT_LINE
000017EA  4EF8 1222                698      JMP     PRINT_LOGIC
000017EE                           699  PRINT_A0_RHS
000017EE  43F9 00004215            700      LEA     DISPLAY_A0, A1
000017F4  103C 000E                701      MOVE.B  #14, D0
000017F8  4E4F                     702      TRAP    #15
000017FA  4EB8 15F4                703      JSR     CLEAR_NEXT_LINE
000017FE  4EF8 1222                704      JMP     PRINT_LOGIC
00001802                           705  PRINT_A1_RHS
00001802  43F9 00004218            706      LEA     DISPLAY_A1, A1
00001808  103C 000E                707      MOVE.B  #14, D0
0000180C  4E4F                     708      TRAP    #15
0000180E  4EB8 15F4                709      JSR     CLEAR_NEXT_LINE
00001812  4EF8 1222                710      JMP     PRINT_LOGIC
00001816                           711  PRINT_A2_RHS
00001816  43F9 0000421B            712      LEA     DISPLAY_A2, A1
0000181C  103C 000E                713      MOVE.B  #14, D0
00001820  4E4F                     714      TRAP    #15
00001822  4EB8 15F4                715      JSR     CLEAR_NEXT_LINE
00001826  4EF8 1222                716      JMP     PRINT_LOGIC
0000182A                           717  PRINT_A3_RHS
0000182A  43F9 0000421E            718      LEA     DISPLAY_A3, A1
00001830  103C 000E                719      MOVE.B  #14, D0
00001834  4E4F                     720      TRAP    #15
00001836  4EB8 15F4                721      JSR     CLEAR_NEXT_LINE
0000183A  4EF8 1222                722      JMP     PRINT_LOGIC
0000183E                           723  PRINT_A4_RHS
0000183E  43F9 00004221            724      LEA     DISPLAY_A4, A1
00001844  103C 000E                725      MOVE.B  #14, D0
00001848  4E4F                     726      TRAP    #15
0000184A  4EB8 15F4                727      JSR     CLEAR_NEXT_LINE
0000184E  4EF8 1222                728      JMP     PRINT_LOGIC
00001852                           729  PRINT_A5_RHS
00001852  43F9 00004224            730      LEA     DISPLAY_A5, A1
00001858  103C 000E                731      MOVE.B  #14, D0
0000185C  4E4F                     732      TRAP    #15
0000185E  4EB8 15F4                733      JSR     CLEAR_NEXT_LINE
00001862  4EF8 1222                734      JMP     PRINT_LOGIC
00001866                           735  PRINT_A6_RHS
00001866  43F9 00004227            736      LEA     DISPLAY_A6, A1
0000186C  103C 000E                737      MOVE.B  #14, D0
00001870  4E4F                     738      TRAP    #15
00001872  4EB8 15F4                739      JSR     CLEAR_NEXT_LINE
00001876  4EF8 1222                740      JMP     PRINT_LOGIC
0000187A                           741  PRINT_A7_RHS
0000187A  43F9 0000422A            742      LEA     DISPLAY_A7, A1
00001880  103C 000E                743      MOVE.B  #14, D0
00001884  4E4F                     744      TRAP    #15
00001886  4EB8 15F4                745      JSR     CLEAR_NEXT_LINE
0000188A  4EF8 1222                746      JMP     PRINT_LOGIC
0000188E                           747  PRINT_A0_P_RHS
0000188E  43F9 0000422D            748      LEA     DISPLAY_A0_P, A1
00001894  103C 000E                749      MOVE.B  #14, D0
00001898  4E4F                     750      TRAP    #15
0000189A  4EB8 15F4                751      JSR     CLEAR_NEXT_LINE
0000189E  4EF8 1222                752      JMP     PRINT_LOGIC
000018A2                           753  PRINT_A1_P_RHS
000018A2  43F9 00004232            754      LEA     DISPLAY_A1_P, A1
000018A8  103C 000E                755      MOVE.B  #14, D0
000018AC  4E4F                     756      TRAP    #15
000018AE  4EB8 15F4                757      JSR     CLEAR_NEXT_LINE
000018B2  4EF8 1222                758      JMP     PRINT_LOGIC
000018B6                           759  PRINT_A2_P_RHS
000018B6  43F9 00004237            760      LEA     DISPLAY_A2_P, A1
000018BC  103C 000E                761      MOVE.B  #14, D0
000018C0  4E4F                     762      TRAP    #15
000018C2  4EB8 15F4                763      JSR     CLEAR_NEXT_LINE
000018C6  4EF8 1222                764      JMP     PRINT_LOGIC
000018CA                           765  PRINT_A3_P_RHS
000018CA  43F9 0000423C            766      LEA     DISPLAY_A3_P, A1
000018D0  103C 000E                767      MOVE.B  #14, D0
000018D4  4E4F                     768      TRAP    #15
000018D6  4EB8 15F4                769      JSR     CLEAR_NEXT_LINE
000018DA  4EF8 1222                770      JMP     PRINT_LOGIC
000018DE                           771  PRINT_A4_P_RHS
000018DE  43F9 00004241            772      LEA     DISPLAY_A4_P, A1
000018E4  103C 000E                773      MOVE.B  #14, D0
000018E8  4E4F                     774      TRAP    #15
000018EA  4EB8 15F4                775      JSR     CLEAR_NEXT_LINE
000018EE  4EF8 1222                776      JMP     PRINT_LOGIC
000018F2                           777  PRINT_A5_P_RHS
000018F2  43F9 00004246            778      LEA     DISPLAY_A5_P, A1
000018F8  103C 000E                779      MOVE.B  #14, D0
000018FC  4E4F                     780      TRAP    #15
000018FE  4EB8 15F4                781      JSR     CLEAR_NEXT_LINE
00001902  4EF8 1222                782      JMP     PRINT_LOGIC
00001906                           783  PRINT_A6_P_RHS
00001906  43F9 0000424B            784      LEA     DISPLAY_A6_P, A1
0000190C  103C 000E                785      MOVE.B  #14, D0
00001910  4E4F                     786      TRAP    #15
00001912  4EB8 15F4                787      JSR     CLEAR_NEXT_LINE
00001916  4EF8 1222                788      JMP     PRINT_LOGIC
0000191A                           789  PRINT_A7_P_RHS
0000191A  43F9 00004250            790      LEA     DISPLAY_A7_P, A1
00001920  103C 000E                791      MOVE.B  #14, D0
00001924  4E4F                     792      TRAP    #15
00001926  4EB8 15F4                793      JSR     CLEAR_NEXT_LINE
0000192A  4EF8 1222                794      JMP     PRINT_LOGIC
0000192E                           795  PRINT_A0_PP_RHS
0000192E  43F9 00004255            796      LEA     DISPLAY_A0_PP, A1
00001934  103C 000E                797      MOVE.B  #14, D0
00001938  4E4F                     798      TRAP    #15
0000193A  4EB8 15F4                799      JSR     CLEAR_NEXT_LINE
0000193E  4EF8 1222                800      JMP     PRINT_LOGIC
00001942                           801  PRINT_A1_PP_RHS
00001942  43F9 0000425B            802      LEA     DISPLAY_A1_PP, A1
00001948  103C 000E                803      MOVE.B  #14, D0
0000194C  4E4F                     804      TRAP    #15
0000194E  4EB8 15F4                805      JSR     CLEAR_NEXT_LINE
00001952  4EF8 1222                806      JMP     PRINT_LOGIC
00001956                           807  PRINT_A2_PP_RHS
00001956  43F9 00004261            808      LEA     DISPLAY_A2_PP, A1
0000195C  103C 000E                809      MOVE.B  #14, D0
00001960  4E4F                     810      TRAP    #15
00001962  4EB8 15F4                811      JSR     CLEAR_NEXT_LINE
00001966  4EF8 1222                812      JMP     PRINT_LOGIC
0000196A                           813  PRINT_A3_PP_RHS
0000196A  43F9 00004267            814      LEA     DISPLAY_A3_PP, A1
00001970  103C 000E                815      MOVE.B  #14, D0
00001974  4E4F                     816      TRAP    #15
00001976  4EB8 15F4                817      JSR     CLEAR_NEXT_LINE
0000197A  4EF8 1222                818      JMP     PRINT_LOGIC
0000197E                           819  PRINT_A4_PP_RHS
0000197E  43F9 0000426D            820      LEA     DISPLAY_A4_PP, A1
00001984  103C 000E                821      MOVE.B  #14, D0
00001988  4E4F                     822      TRAP    #15
0000198A  4EB8 15F4                823      JSR     CLEAR_NEXT_LINE
0000198E  4EF8 1222                824      JMP     PRINT_LOGIC
00001992                           825  PRINT_A5_PP_RHS
00001992  43F9 00004273            826      LEA     DISPLAY_A5_PP, A1
00001998  103C 000E                827      MOVE.B  #14, D0
0000199C  4E4F                     828      TRAP    #15
0000199E  4EB8 15F4                829      JSR     CLEAR_NEXT_LINE
000019A2  4EF8 1222                830      JMP     PRINT_LOGIC
000019A6                           831  PRINT_A6_PP_RHS
000019A6  43F9 00004279            832      LEA     DISPLAY_A6_PP, A1
000019AC  103C 000E                833      MOVE.B  #14, D0
000019B0  4E4F                     834      TRAP    #15
000019B2  4EB8 15F4                835      JSR     CLEAR_NEXT_LINE
000019B6  4EF8 1222                836      JMP     PRINT_LOGIC
000019BA                           837  PRINT_A7_PP_RHS
000019BA  43F9 0000427F            838      LEA     DISPLAY_A7_PP, A1
000019C0  103C 000E                839      MOVE.B  #14, D0
000019C4  4E4F                     840      TRAP    #15
000019C6  4EB8 15F4                841      JSR     CLEAR_NEXT_LINE
000019CA  4EF8 1222                842      JMP     PRINT_LOGIC
000019CE                           843  PRINT_A0_PM_RHS
000019CE  43F9 00004285            844      LEA     DISPLAY_A0_PM, A1
000019D4  103C 000E                845      MOVE.B  #14, D0
000019D8  4E4F                     846      TRAP    #15
000019DA  4EB8 15F4                847      JSR     CLEAR_NEXT_LINE
000019DE  4EF8 1222                848      JMP     PRINT_LOGIC
000019E2                           849  PRINT_A1_PM_RHS
000019E2  43F9 0000428B            850      LEA     DISPLAY_A1_PM, A1
000019E8  103C 000E                851      MOVE.B  #14, D0
000019EC  4E4F                     852      TRAP    #15
000019EE  4EB8 15F4                853      JSR     CLEAR_NEXT_LINE
000019F2  4EF8 1222                854      JMP     PRINT_LOGIC
000019F6                           855  PRINT_A2_PM_RHS
000019F6  43F9 00004291            856      LEA     DISPLAY_A2_PM, A1
000019FC  103C 000E                857      MOVE.B  #14, D0
00001A00  4E4F                     858      TRAP    #15
00001A02  4EB8 15F4                859      JSR     CLEAR_NEXT_LINE
00001A06  4EF8 1222                860      JMP     PRINT_LOGIC
00001A0A                           861  PRINT_A3_PM_RHS
00001A0A  43F9 00004297            862      LEA     DISPLAY_A3_PM, A1
00001A10  103C 000E                863      MOVE.B  #14, D0
00001A14  4E4F                     864      TRAP    #15
00001A16  4EB8 15F4                865      JSR     CLEAR_NEXT_LINE
00001A1A  4EF8 1222                866      JMP     PRINT_LOGIC
00001A1E                           867  PRINT_A4_PM_RHS
00001A1E  43F9 0000429D            868      LEA     DISPLAY_A4_PM, A1
00001A24  103C 000E                869      MOVE.B  #14, D0
00001A28  4E4F                     870      TRAP    #15
00001A2A  4EB8 15F4                871      JSR     CLEAR_NEXT_LINE
00001A2E  4EF8 1222                872      JMP     PRINT_LOGIC
00001A32                           873  PRINT_A5_PM_RHS
00001A32  43F9 000042A3            874      LEA     DISPLAY_A5_PM, A1
00001A38  103C 000E                875      MOVE.B  #14, D0
00001A3C  4E4F                     876      TRAP    #15
00001A3E  4EB8 15F4                877      JSR     CLEAR_NEXT_LINE
00001A42  4EF8 1222                878      JMP     PRINT_LOGIC
00001A46                           879  PRINT_A6_PM_RHS
00001A46  43F9 000042A9            880      LEA     DISPLAY_A6_PM, A1
00001A4C  103C 000E                881      MOVE.B  #14, D0
00001A50  4E4F                     882      TRAP    #15
00001A52  4EB8 15F4                883      JSR     CLEAR_NEXT_LINE
00001A56  4EF8 1222                884      JMP     PRINT_LOGIC
00001A5A                           885  PRINT_A7_PM_RHS
00001A5A  43F9 000042AF            886      LEA     DISPLAY_A7_PM, A1
00001A60  103C 000E                887      MOVE.B  #14, D0
00001A64  4E4F                     888      TRAP    #15
00001A66  4EB8 15F4                889      JSR     CLEAR_NEXT_LINE
00001A6A  4EF8 1222                890      JMP     PRINT_LOGIC
00001A6E                           891  PRINT_D0_LHS
00001A6E  43F9 000041FD            892      LEA     DISPLAY_D0, A1
00001A74  103C 000E                893      MOVE.B  #14, D0
00001A78  4E4F                     894      TRAP    #15
00001A7A  4EB8 15BE                895      JSR     PRINT_COMMA
00001A7E  4EF9 000037B6            896      JMP     CHECK_DECODE_RHS
00001A84  4EF8 1222                897      JMP     PRINT_LOGIC
00001A88                           898  PRINT_D1_LHS
00001A88  43F9 00004200            899      LEA     DISPLAY_D1, A1
00001A8E  103C 000E                900      MOVE.B  #14, D0
00001A92  4E4F                     901      TRAP    #15
00001A94  4EB8 15BE                902      JSR     PRINT_COMMA
00001A98  4EF9 000037B6            903      JMP     CHECK_DECODE_RHS
00001A9E  4EF8 1222                904      JMP     PRINT_LOGIC
00001AA2                           905  PRINT_D2_LHS
00001AA2  43F9 00004203            906      LEA     DISPLAY_D2, A1
00001AA8  103C 000E                907      MOVE.B  #14, D0
00001AAC  4E4F                     908      TRAP    #15
00001AAE  4EB8 15BE                909      JSR     PRINT_COMMA
00001AB2  4EF9 000037B6            910      JMP     CHECK_DECODE_RHS
00001AB8  4EF8 1222                911      JMP     PRINT_LOGIC
00001ABC                           912  PRINT_D3_LHS
00001ABC  43F9 00004206            913      LEA     DISPLAY_D3, A1
00001AC2  103C 000E                914      MOVE.B  #14, D0
00001AC6  4E4F                     915      TRAP    #15
00001AC8  4EB8 15BE                916      JSR     PRINT_COMMA
00001ACC  4EF9 000037B6            917      JMP     CHECK_DECODE_RHS
00001AD2  4EF8 1222                918      JMP     PRINT_LOGIC
00001AD6                           919  PRINT_D4_LHS
00001AD6  43F9 00004209            920      LEA     DISPLAY_D4, A1
00001ADC  103C 000E                921      MOVE.B  #14, D0
00001AE0  4E4F                     922      TRAP    #15
00001AE2  4EB8 15BE                923      JSR     PRINT_COMMA
00001AE6  4EF9 000037B6            924      JMP     CHECK_DECODE_RHS
00001AEC  4EF8 1222                925      JMP     PRINT_LOGIC
00001AF0                           926  PRINT_D5_LHS
00001AF0  43F9 0000420C            927      LEA     DISPLAY_D5, A1
00001AF6  103C 000E                928      MOVE.B  #14, D0
00001AFA  4E4F                     929      TRAP    #15
00001AFC  4EB8 15BE                930      JSR     PRINT_COMMA
00001B00  4EF9 000037B6            931      JMP     CHECK_DECODE_RHS
00001B06  4EF8 1222                932      JMP     PRINT_LOGIC
00001B0A                           933  PRINT_D6_LHS
00001B0A  43F9 0000420F            934      LEA     DISPLAY_D6, A1
00001B10  103C 000E                935      MOVE.B  #14, D0
00001B14  4E4F                     936      TRAP    #15
00001B16  4EB8 15BE                937      JSR     PRINT_COMMA
00001B1A  4EF9 000037B6            938      JMP     CHECK_DECODE_RHS
00001B20  4EF8 1222                939      JMP     PRINT_LOGIC
00001B24                           940  PRINT_D7_LHS
00001B24  43F9 00004212            941      LEA     DISPLAY_D7, A1
00001B2A  103C 000E                942      MOVE.B  #14, D0
00001B2E  4E4F                     943      TRAP    #15
00001B30  4EB8 15BE                944      JSR     PRINT_COMMA
00001B34  4EF9 000037B6            945      JMP     CHECK_DECODE_RHS
00001B3A  4EF8 1222                946      JMP     PRINT_LOGIC
00001B3E                           947  PRINT_A0_LHS
00001B3E  43F9 00004215            948      LEA     DISPLAY_A0, A1
00001B44  103C 000E                949      MOVE.B  #14, D0
00001B48  4E4F                     950      TRAP    #15
00001B4A  4EB8 15BE                951      JSR     PRINT_COMMA
00001B4E  4EF9 000037B6            952      JMP     CHECK_DECODE_RHS
00001B54  4EF8 1222                953      JMP     PRINT_LOGIC
00001B58                           954  PRINT_A1_LHS
00001B58  43F9 00004218            955      LEA     DISPLAY_A1, A1
00001B5E  103C 000E                956      MOVE.B  #14, D0
00001B62  4E4F                     957      TRAP    #15
00001B64  4EB8 15BE                958      JSR     PRINT_COMMA
00001B68  4EF9 000037B6            959      JMP     CHECK_DECODE_RHS
00001B6E  4EF8 1222                960      JMP     PRINT_LOGIC
00001B72                           961  PRINT_A2_LHS
00001B72  43F9 0000421B            962      LEA     DISPLAY_A2, A1
00001B78  103C 000E                963      MOVE.B  #14, D0
00001B7C  4E4F                     964      TRAP    #15
00001B7E  4EB8 15BE                965      JSR     PRINT_COMMA
00001B82  4EF9 000037B6            966      JMP     CHECK_DECODE_RHS
00001B88  4EF8 1222                967      JMP     PRINT_LOGIC
00001B8C                           968  PRINT_A3_LHS
00001B8C  43F9 0000421E            969      LEA     DISPLAY_A3, A1
00001B92  103C 000E                970      MOVE.B  #14, D0
00001B96  4E4F                     971      TRAP    #15
00001B98  4EB8 15BE                972      JSR     PRINT_COMMA
00001B9C  4EF9 000037B6            973      JMP     CHECK_DECODE_RHS
00001BA2  4EF8 1222                974      JMP     PRINT_LOGIC
00001BA6                           975  PRINT_A4_LHS
00001BA6  43F9 00004221            976      LEA     DISPLAY_A4, A1
00001BAC  103C 000E                977      MOVE.B  #14, D0
00001BB0  4E4F                     978      TRAP    #15
00001BB2  4EB8 15BE                979      JSR     PRINT_COMMA
00001BB6  4EF9 000037B6            980      JMP     CHECK_DECODE_RHS
00001BBC  4EF8 1222                981      JMP     PRINT_LOGIC
00001BC0                           982  PRINT_A5_LHS
00001BC0  43F9 00004224            983      LEA     DISPLAY_A5, A1
00001BC6  103C 000E                984      MOVE.B  #14, D0
00001BCA  4E4F                     985      TRAP    #15
00001BCC  4EB8 15BE                986      JSR     PRINT_COMMA
00001BD0  4EF9 000037B6            987      JMP     CHECK_DECODE_RHS
00001BD6  4EF8 1222                988      JMP     PRINT_LOGIC
00001BDA                           989  PRINT_A6_LHS
00001BDA  43F9 00004227            990      LEA     DISPLAY_A6, A1
00001BE0  103C 000E                991      MOVE.B  #14, D0
00001BE4  4E4F                     992      TRAP    #15
00001BE6  4EB8 15BE                993      JSR     PRINT_COMMA
00001BEA  4EF9 000037B6            994      JMP     CHECK_DECODE_RHS
00001BF0  4EF8 1222                995      JMP     PRINT_LOGIC
00001BF4                           996  PRINT_A7_LHS
00001BF4  43F9 0000422A            997      LEA     DISPLAY_A7, A1
00001BFA  103C 000E                998      MOVE.B  #14, D0
00001BFE  4E4F                     999      TRAP    #15
00001C00  4EB8 15BE               1000      JSR     PRINT_COMMA
00001C04  4EF9 000037B6           1001      JMP     CHECK_DECODE_RHS
00001C0A  4EF8 1222               1002      JMP     PRINT_LOGIC
00001C0E                          1003  PRINT_A0_P_LHS
00001C0E  43F9 0000422D           1004      LEA     DISPLAY_A0_P, A1
00001C14  103C 000E               1005      MOVE.B  #14, D0
00001C18  4E4F                    1006      TRAP    #15
00001C1A  4EB8 15BE               1007      JSR     PRINT_COMMA
00001C1E  4EF9 000037B6           1008      JMP     CHECK_DECODE_RHS
00001C24  4EF8 1222               1009      JMP     PRINT_LOGIC
00001C28                          1010  PRINT_A1_P_LHS
00001C28  43F9 00004232           1011      LEA     DISPLAY_A1_P, A1
00001C2E  103C 000E               1012      MOVE.B  #14, D0
00001C32  4E4F                    1013      TRAP    #15
00001C34  4EB8 15BE               1014      JSR     PRINT_COMMA
00001C38  4EF9 000037B6           1015      JMP     CHECK_DECODE_RHS
00001C3E  4EF8 1222               1016      JMP     PRINT_LOGIC
00001C42                          1017  PRINT_A2_P_LHS
00001C42  43F9 00004237           1018      LEA     DISPLAY_A2_P, A1
00001C48  103C 000E               1019      MOVE.B  #14, D0
00001C4C  4E4F                    1020      TRAP    #15
00001C4E  4EB8 15BE               1021      JSR     PRINT_COMMA
00001C52  4EF9 000037B6           1022      JMP     CHECK_DECODE_RHS
00001C58  4EF8 1222               1023      JMP     PRINT_LOGIC
00001C5C                          1024  PRINT_A3_P_LHS
00001C5C  43F9 0000423C           1025      LEA     DISPLAY_A3_P, A1
00001C62  103C 000E               1026      MOVE.B  #14, D0
00001C66  4E4F                    1027      TRAP    #15
00001C68  4EB8 15BE               1028      JSR     PRINT_COMMA
00001C6C  4EF9 000037B6           1029      JMP     CHECK_DECODE_RHS
00001C72  4EF8 1222               1030      JMP     PRINT_LOGIC
00001C76                          1031  PRINT_A4_P_LHS
00001C76  43F9 00004241           1032      LEA     DISPLAY_A4_P, A1
00001C7C  103C 000E               1033      MOVE.B  #14, D0
00001C80  4E4F                    1034      TRAP    #15
00001C82  4EB8 15BE               1035      JSR     PRINT_COMMA
00001C86  4EF9 000037B6           1036      JMP     CHECK_DECODE_RHS
00001C8C  4EF8 1222               1037      JMP     PRINT_LOGIC
00001C90                          1038  PRINT_A5_P_LHS
00001C90  43F9 00004246           1039      LEA     DISPLAY_A5_P, A1
00001C96  103C 000E               1040      MOVE.B  #14, D0
00001C9A  4E4F                    1041      TRAP    #15
00001C9C  4EB8 15BE               1042      JSR     PRINT_COMMA
00001CA0  4EF9 000037B6           1043      JMP     CHECK_DECODE_RHS
00001CA6  4EF8 1222               1044      JMP     PRINT_LOGIC
00001CAA                          1045  PRINT_A6_P_LHS
00001CAA  43F9 0000424B           1046      LEA     DISPLAY_A6_P, A1
00001CB0  103C 000E               1047      MOVE.B  #14, D0
00001CB4  4E4F                    1048      TRAP    #15
00001CB6  4EB8 15BE               1049      JSR     PRINT_COMMA
00001CBA  4EF9 000037B6           1050      JMP     CHECK_DECODE_RHS
00001CC0  4EF8 1222               1051      JMP     PRINT_LOGIC
00001CC4                          1052  PRINT_A7_P_LHS
00001CC4  43F9 00004250           1053      LEA     DISPLAY_A7_P, A1
00001CCA  103C 000E               1054      MOVE.B  #14, D0
00001CCE  4E4F                    1055      TRAP    #15
00001CD0  4EB8 15BE               1056      JSR     PRINT_COMMA
00001CD4  4EF9 000037B6           1057      JMP     CHECK_DECODE_RHS
00001CDA  4EF8 1222               1058      JMP     PRINT_LOGIC
00001CDE                          1059  PRINT_A0_PP_LHS
00001CDE  43F9 00004255           1060      LEA     DISPLAY_A0_PP, A1
00001CE4  103C 000E               1061      MOVE.B  #14, D0
00001CE8  4E4F                    1062      TRAP    #15
00001CEA  4EB8 15BE               1063      JSR     PRINT_COMMA
00001CEE  4EF9 000037B6           1064      JMP     CHECK_DECODE_RHS
00001CF4  4EF8 1222               1065      JMP     PRINT_LOGIC
00001CF8                          1066  PRINT_A1_PP_LHS
00001CF8  43F9 0000425B           1067      LEA     DISPLAY_A1_PP, A1
00001CFE  103C 000E               1068      MOVE.B  #14, D0
00001D02  4E4F                    1069      TRAP    #15
00001D04  4EB8 15BE               1070      JSR     PRINT_COMMA
00001D08  4EF9 000037B6           1071      JMP     CHECK_DECODE_RHS
00001D0E  4EF8 1222               1072      JMP     PRINT_LOGIC
00001D12                          1073  PRINT_A2_PP_LHS
00001D12  43F9 00004261           1074      LEA     DISPLAY_A2_PP, A1
00001D18  103C 000E               1075      MOVE.B  #14, D0
00001D1C  4E4F                    1076      TRAP    #15
00001D1E  4EB8 15BE               1077      JSR     PRINT_COMMA
00001D22  4EF9 000037B6           1078      JMP     CHECK_DECODE_RHS
00001D28  4EF8 1222               1079      JMP     PRINT_LOGIC
00001D2C                          1080  PRINT_A3_PP_LHS
00001D2C  43F9 00004267           1081      LEA     DISPLAY_A3_PP, A1
00001D32  103C 000E               1082      MOVE.B  #14, D0
00001D36  4E4F                    1083      TRAP    #15
00001D38  4EB8 15BE               1084      JSR     PRINT_COMMA
00001D3C  4EF9 000037B6           1085      JMP     CHECK_DECODE_RHS
00001D42  4EF8 1222               1086      JMP     PRINT_LOGIC
00001D46                          1087  PRINT_A4_PP_LHS
00001D46  43F9 0000426D           1088      LEA     DISPLAY_A4_PP, A1
00001D4C  103C 000E               1089      MOVE.B  #14, D0
00001D50  4E4F                    1090      TRAP    #15
00001D52  4EB8 15BE               1091      JSR     PRINT_COMMA
00001D56  4EF9 000037B6           1092      JMP     CHECK_DECODE_RHS
00001D5C  4EF8 1222               1093      JMP     PRINT_LOGIC
00001D60                          1094  PRINT_A5_PP_LHS
00001D60  43F9 00004273           1095      LEA     DISPLAY_A5_PP, A1
00001D66  103C 000E               1096      MOVE.B  #14, D0
00001D6A  4E4F                    1097      TRAP    #15
00001D6C  4EB8 15BE               1098      JSR     PRINT_COMMA
00001D70  4EF9 000037B6           1099      JMP     CHECK_DECODE_RHS
00001D76  4EF8 1222               1100      JMP     PRINT_LOGIC
00001D7A                          1101  PRINT_A6_PP_LHS
00001D7A  43F9 00004279           1102      LEA     DISPLAY_A6_PP, A1
00001D80  103C 000E               1103      MOVE.B  #14, D0
00001D84  4E4F                    1104      TRAP    #15
00001D86  4EB8 15BE               1105      JSR     PRINT_COMMA
00001D8A  4EF9 000037B6           1106      JMP     CHECK_DECODE_RHS
00001D90  4EF8 1222               1107      JMP     PRINT_LOGIC
00001D94                          1108  PRINT_A7_PP_LHS
00001D94  43F9 0000427F           1109      LEA     DISPLAY_A7_PP, A1
00001D9A  103C 000E               1110      MOVE.B  #14, D0
00001D9E  4E4F                    1111      TRAP    #15
00001DA0  4EB8 15BE               1112      JSR     PRINT_COMMA
00001DA4  4EF9 000037B6           1113      JMP     CHECK_DECODE_RHS
00001DAA  4EF8 1222               1114      JMP     PRINT_LOGIC
00001DAE                          1115  PRINT_A0_PM_LHS
00001DAE  43F9 00004285           1116      LEA     DISPLAY_A0_PM, A1
00001DB4  103C 000E               1117      MOVE.B  #14, D0
00001DB8  4E4F                    1118      TRAP    #15
00001DBA  4EB8 15BE               1119      JSR     PRINT_COMMA
00001DBE  4EF9 000037B6           1120      JMP     CHECK_DECODE_RHS
00001DC4  4EF8 1222               1121      JMP     PRINT_LOGIC
00001DC8                          1122  PRINT_A1_PM_LHS
00001DC8  43F9 0000428B           1123      LEA     DISPLAY_A1_PM, A1
00001DCE  103C 000E               1124      MOVE.B  #14, D0
00001DD2  4E4F                    1125      TRAP    #15
00001DD4  4EB8 15BE               1126      JSR     PRINT_COMMA
00001DD8  4EF9 000037B6           1127      JMP     CHECK_DECODE_RHS
00001DDE  4EF8 1222               1128      JMP     PRINT_LOGIC
00001DE2                          1129  PRINT_A2_PM_LHS
00001DE2  43F9 00004291           1130      LEA     DISPLAY_A2_PM, A1
00001DE8  103C 000E               1131      MOVE.B  #14, D0
00001DEC  4E4F                    1132      TRAP    #15
00001DEE  4EB8 15BE               1133      JSR     PRINT_COMMA
00001DF2  4EF9 000037B6           1134      JMP     CHECK_DECODE_RHS
00001DF8  4EF8 1222               1135      JMP     PRINT_LOGIC
00001DFC                          1136  PRINT_A3_PM_LHS
00001DFC  43F9 00004297           1137      LEA     DISPLAY_A3_PM, A1
00001E02  103C 000E               1138      MOVE.B  #14, D0
00001E06  4E4F                    1139      TRAP    #15
00001E08  4EB8 15BE               1140      JSR     PRINT_COMMA
00001E0C  4EF9 000037B6           1141      JMP     CHECK_DECODE_RHS
00001E12  4EF8 1222               1142      JMP     PRINT_LOGIC
00001E16                          1143  PRINT_A4_PM_LHS
00001E16  43F9 0000429D           1144      LEA     DISPLAY_A4_PM, A1
00001E1C  103C 000E               1145      MOVE.B  #14, D0
00001E20  4E4F                    1146      TRAP    #15
00001E22  4EB8 15BE               1147      JSR     PRINT_COMMA
00001E26  4EF9 000037B6           1148      JMP     CHECK_DECODE_RHS
00001E2C  4EF8 1222               1149      JMP     PRINT_LOGIC
00001E30                          1150  PRINT_A5_PM_LHS
00001E30  43F9 000042A3           1151      LEA     DISPLAY_A5_PM, A1
00001E36  103C 000E               1152      MOVE.B  #14, D0
00001E3A  4E4F                    1153      TRAP    #15
00001E3C  4EB8 15BE               1154      JSR     PRINT_COMMA
00001E40  4EF9 000037B6           1155      JMP     CHECK_DECODE_RHS
00001E46  4EF8 1222               1156      JMP     PRINT_LOGIC
00001E4A                          1157  PRINT_A6_PM_LHS
00001E4A  43F9 000042A9           1158      LEA     DISPLAY_A6_PM, A1
00001E50  103C 000E               1159      MOVE.B  #14, D0
00001E54  4E4F                    1160      TRAP    #15
00001E56  4EB8 15BE               1161      JSR     PRINT_COMMA
00001E5A  4EF9 000037B6           1162      JMP     CHECK_DECODE_RHS
00001E60  4EF8 1222               1163      JMP     PRINT_LOGIC
00001E64                          1164  PRINT_A7_PM_LHS
00001E64  43F9 000042AF           1165      LEA     DISPLAY_A7_PM, A1
00001E6A  103C 000E               1166      MOVE.B  #14, D0
00001E6E  4E4F                    1167      TRAP    #15
00001E70  4EB8 15BE               1168      JSR     PRINT_COMMA
00001E74  4EF9 000037B6           1169      JMP     CHECK_DECODE_RHS
00001E7A  4EF8 1222               1170      JMP     PRINT_LOGIC
00001E7E                          1171  PRINT_0_LHS
00001E7E  43F9 000042B5           1172      LEA     DISPLAY_0, A1
00001E84  103C 000E               1173      MOVE.B  #14, D0
00001E88  4E4F                    1174      TRAP    #15
00001E8A  4EB8 15BE               1175      JSR     PRINT_COMMA
00001E8E  4EF9 00002F42           1176      JMP     DECODE_DATA_REG_RHS_BITS_0TO2
00001E94  4EF8 1222               1177      JMP     PRINT_LOGIC
00001E98                          1178  PRINT_1_LHS
00001E98  43F9 000042B7           1179      LEA     DISPLAY_1, A1
00001E9E  103C 000E               1180      MOVE.B  #14, D0
00001EA2  4E4F                    1181      TRAP    #15
00001EA4  4EB8 15BE               1182      JSR     PRINT_COMMA
00001EA8  4EF9 00002F42           1183      JMP     DECODE_DATA_REG_RHS_BITS_0TO2
00001EAE  4EF8 1222               1184      JMP     PRINT_LOGIC
00001EB2                          1185  PRINT_2_LHS
00001EB2  43F9 000042B9           1186      LEA     DISPLAY_2, A1
00001EB8  103C 000E               1187      MOVE.B  #14, D0
00001EBC  4E4F                    1188      TRAP    #15
00001EBE  4EB8 15BE               1189      JSR     PRINT_COMMA
00001EC2  4EF9 00002F42           1190      JMP     DECODE_DATA_REG_RHS_BITS_0TO2
00001EC8  4EF8 1222               1191      JMP     PRINT_LOGIC
00001ECC                          1192  PRINT_3_LHS
00001ECC  43F9 000042BB           1193      LEA     DISPLAY_3, A1
00001ED2  103C 000E               1194      MOVE.B  #14, D0
00001ED6  4E4F                    1195      TRAP    #15
00001ED8  4EB8 15BE               1196      JSR     PRINT_COMMA
00001EDC  4EF9 00002F42           1197      JMP     DECODE_DATA_REG_RHS_BITS_0TO2
00001EE2  4EF8 1222               1198      JMP     PRINT_LOGIC
00001EE6                          1199  PRINT_4_LHS
00001EE6  43F9 000042BD           1200      LEA     DISPLAY_4, A1
00001EEC  103C 000E               1201      MOVE.B  #14, D0
00001EF0  4E4F                    1202      TRAP    #15
00001EF2  4EB8 15BE               1203      JSR     PRINT_COMMA
00001EF6  4EF9 00002F42           1204      JMP     DECODE_DATA_REG_RHS_BITS_0TO2
00001EFC  4EF8 1222               1205      JMP     PRINT_LOGIC
00001F00                          1206  PRINT_5_LHS
00001F00  43F9 000042BF           1207      LEA     DISPLAY_5, A1
00001F06  103C 000E               1208      MOVE.B  #14, D0
00001F0A  4E4F                    1209      TRAP    #15
00001F0C  4EB8 15BE               1210      JSR     PRINT_COMMA
00001F10  4EF9 00002F42           1211      JMP     DECODE_DATA_REG_RHS_BITS_0TO2
00001F16  4EF8 1222               1212      JMP     PRINT_LOGIC
00001F1A                          1213  PRINT_6_LHS
00001F1A  43F9 000042C1           1214      LEA     DISPLAY_6, A1
00001F20  103C 000E               1215      MOVE.B  #14, D0
00001F24  4E4F                    1216      TRAP    #15
00001F26  4EB8 15BE               1217      JSR     PRINT_COMMA
00001F2A  4EF9 00002F42           1218      JMP     DECODE_DATA_REG_RHS_BITS_0TO2
00001F30  4EF8 1222               1219      JMP     PRINT_LOGIC
00001F34                          1220  PRINT_7_LHS
00001F34  43F9 000042C3           1221      LEA     DISPLAY_7, A1
00001F3A  103C 000E               1222      MOVE.B  #14, D0
00001F3E  4E4F                    1223      TRAP    #15
00001F40  4EB8 15BE               1224      JSR     PRINT_COMMA
00001F44  4EF9 00002F42           1225      JMP     DECODE_DATA_REG_RHS_BITS_0TO2
00001F4A  4EF8 1222               1226      JMP     PRINT_LOGIC
00001F4E                          1227  PRINT_8_LHS
00001F4E  43F9 000042C5           1228      LEA     DISPLAY_8, A1
00001F54  103C 000E               1229      MOVE.B  #14, D0
00001F58  4E4F                    1230      TRAP    #15
00001F5A  4EB8 15BE               1231      JSR     PRINT_COMMA
00001F5E  4EF9 00002F42           1232      JMP     DECODE_DATA_REG_RHS_BITS_0TO2
00001F64  4EF8 1222               1233      JMP     PRINT_LOGIC
00001F68                          1234  PRINT_MOVEM_RHS_D0
00001F68  43F9 000041FD           1235      LEA     DISPLAY_D0, A1
00001F6E  103C 000E               1236      MOVE.B  #14, D0
00001F72  4E4F                    1237      TRAP    #15
00001F74  0C39 0001 00006076      1238      CMP.B   #1, IS_MEM_TO_REG
00001F7C  6700 05FE               1239      BEQ     MOVEM_REGISTER_RHS_LOOP     An/Dn is on RHS (Mem to Reg)
00001F80  4EF9 00002522           1240      JMP     MOVEM_REGISTER_LHS_LOOP     An/Dn is on LHS (Reg to Mem)
00001F86  4EF8 1222               1241      JMP     PRINT_LOGIC
00001F8A                          1242  PRINT_MOVEM_RHS_D1
00001F8A  43F9 00004200           1243      LEA     DISPLAY_D1, A1
00001F90  103C 000E               1244      MOVE.B  #14, D0
00001F94  4E4F                    1245      TRAP    #15
00001F96  0C39 0001 00006076      1246      CMP.B   #1, IS_MEM_TO_REG
00001F9E  6700 05DC               1247      BEQ     MOVEM_REGISTER_RHS_LOOP
00001FA2  4EF9 00002522           1248      JMP     MOVEM_REGISTER_LHS_LOOP 
00001FA8  4EF8 1222               1249      JMP     PRINT_LOGIC
00001FAC                          1250  PRINT_MOVEM_RHS_D2
00001FAC  43F9 00004203           1251      LEA     DISPLAY_D2, A1
00001FB2  103C 000E               1252      MOVE.B  #14, D0
00001FB6  4E4F                    1253      TRAP    #15
00001FB8  0C39 0001 00006076      1254      CMP.B   #1, IS_MEM_TO_REG
00001FC0  6700 05BA               1255      BEQ     MOVEM_REGISTER_RHS_LOOP
00001FC4  4EF9 00002522           1256      JMP     MOVEM_REGISTER_LHS_LOOP
00001FCA  4EF8 1222               1257      JMP     PRINT_LOGIC
00001FCE                          1258  PRINT_MOVEM_RHS_D3
00001FCE  43F9 00004206           1259      LEA     DISPLAY_D3, A1
00001FD4  103C 000E               1260      MOVE.B  #14, D0
00001FD8  4E4F                    1261      TRAP    #15
00001FDA  0C39 0001 00006076      1262      CMP.B   #1, IS_MEM_TO_REG
00001FE2  6700 0598               1263      BEQ     MOVEM_REGISTER_RHS_LOOP
00001FE6  4EF9 00002522           1264      JMP     MOVEM_REGISTER_LHS_LOOP
00001FEC  4EF8 1222               1265      JMP     PRINT_LOGIC
00001FF0                          1266  PRINT_MOVEM_RHS_D4
00001FF0  43F9 00004209           1267      LEA     DISPLAY_D4, A1
00001FF6  103C 000E               1268      MOVE.B  #14, D0
00001FFA  4E4F                    1269      TRAP    #15
00001FFC  0C39 0001 00006076      1270      CMP.B   #1, IS_MEM_TO_REG
00002004  6700 0576               1271      BEQ     MOVEM_REGISTER_RHS_LOOP
00002008  4EF9 00002522           1272      JMP     MOVEM_REGISTER_LHS_LOOP
0000200E  4EF8 1222               1273      JMP     PRINT_LOGIC    
00002012                          1274  PRINT_MOVEM_RHS_D5
00002012  43F9 0000420C           1275      LEA     DISPLAY_D5, A1
00002018  103C 000E               1276      MOVE.B  #14, D0
0000201C  4E4F                    1277      TRAP    #15
0000201E  0C39 0001 00006076      1278      CMP.B   #1, IS_MEM_TO_REG
00002026  6700 0554               1279      BEQ     MOVEM_REGISTER_RHS_LOOP
0000202A  4EF9 00002522           1280      JMP     MOVEM_REGISTER_LHS_LOOP
00002030  4EF8 1222               1281      JMP     PRINT_LOGIC  
00002034                          1282  PRINT_MOVEM_RHS_D6
00002034  43F9 0000420F           1283      LEA     DISPLAY_D6, A1
0000203A  103C 000E               1284      MOVE.B  #14, D0
0000203E  4E4F                    1285      TRAP    #15
00002040  0C39 0001 00006076      1286      CMP.B   #1, IS_MEM_TO_REG
00002048  6700 0532               1287      BEQ     MOVEM_REGISTER_RHS_LOOP
0000204C  4EF9 00002522           1288      JMP     MOVEM_REGISTER_LHS_LOOP
00002052  4EF8 1222               1289      JMP     PRINT_LOGIC
00002056                          1290  PRINT_MOVEM_RHS_D7
00002056  43F9 00004212           1291      LEA     DISPLAY_D7, A1
0000205C  103C 000E               1292      MOVE.B  #14, D0
00002060  4E4F                    1293      TRAP    #15
00002062  0C39 0001 00006076      1294      CMP.B   #1, IS_MEM_TO_REG
0000206A  6700 0510               1295      BEQ     MOVEM_REGISTER_RHS_LOOP
0000206E  4EF9 00002522           1296      JMP     MOVEM_REGISTER_LHS_LOOP
00002074  4EF8 1222               1297      JMP     PRINT_LOGIC       
00002078                          1298  PRINT_MOVEM_RHS_A0
00002078  43F9 00004215           1299      LEA     DISPLAY_A0, A1
0000207E  103C 000E               1300      MOVE.B  #14, D0
00002082  4E4F                    1301      TRAP    #15
00002084  0C39 0001 00006076      1302      CMP.B   #1, IS_MEM_TO_REG
0000208C  6700 04EE               1303      BEQ     MOVEM_REGISTER_RHS_LOOP     An/Dn is on RHS (Mem to Reg)
00002090  4EF9 00002522           1304      JMP     MOVEM_REGISTER_LHS_LOOP     An/Dn is on LHS (Reg to Mem)
00002096  4EF8 1222               1305      JMP     PRINT_LOGIC
0000209A                          1306  PRINT_MOVEM_RHS_A1
0000209A  43F9 00004218           1307      LEA     DISPLAY_A1, A1
000020A0  103C 000E               1308      MOVE.B  #14, D0
000020A4  4E4F                    1309      TRAP    #15
000020A6  0C39 0001 00006076      1310      CMP.B   #1, IS_MEM_TO_REG
000020AE  6700 04CC               1311      BEQ     MOVEM_REGISTER_RHS_LOOP
000020B2  4EF9 00002522           1312      JMP     MOVEM_REGISTER_LHS_LOOP
000020B8  4EF8 1222               1313      JMP     PRINT_LOGIC
000020BC                          1314  PRINT_MOVEM_RHS_A2
000020BC  43F9 0000421B           1315      LEA     DISPLAY_A2, A1
000020C2  103C 000E               1316      MOVE.B  #14, D0
000020C6  4E4F                    1317      TRAP    #15
000020C8  0C39 0001 00006076      1318      CMP.B   #1, IS_MEM_TO_REG
000020D0  6700 04AA               1319      BEQ     MOVEM_REGISTER_RHS_LOOP
000020D4  4EF9 00002522           1320      JMP     MOVEM_REGISTER_LHS_LOOP
000020DA  4EF8 1222               1321      JMP     PRINT_LOGIC
000020DE                          1322  PRINT_MOVEM_RHS_A3
000020DE  43F9 0000421E           1323      LEA     DISPLAY_A3, A1
000020E4  103C 000E               1324      MOVE.B  #14, D0
000020E8  4E4F                    1325      TRAP    #15
000020EA  0C39 0001 00006076      1326      CMP.B   #1, IS_MEM_TO_REG
000020F2  6700 0488               1327      BEQ     MOVEM_REGISTER_RHS_LOOP
000020F6  4EF9 00002522           1328      JMP     MOVEM_REGISTER_LHS_LOOP
000020FC  4EF8 1222               1329      JMP     PRINT_LOGIC
00002100                          1330  PRINT_MOVEM_RHS_A4
00002100  43F9 00004221           1331      LEA     DISPLAY_A4, A1
00002106  103C 000E               1332      MOVE.B  #14, D0
0000210A  4E4F                    1333      TRAP    #15
0000210C  0C39 0001 00006076      1334      CMP.B   #1, IS_MEM_TO_REG
00002114  6700 0466               1335      BEQ     MOVEM_REGISTER_RHS_LOOP
00002118  4EF9 00002522           1336      JMP     MOVEM_REGISTER_LHS_LOOP
0000211E  4EF8 1222               1337      JMP     PRINT_LOGIC    
00002122                          1338  PRINT_MOVEM_RHS_A5
00002122  43F9 00004224           1339      LEA     DISPLAY_A5, A1
00002128  103C 000E               1340      MOVE.B  #14, D0
0000212C  4E4F                    1341      TRAP    #15
0000212E  0C39 0001 00006076      1342      CMP.B   #1, IS_MEM_TO_REG
00002136  6700 0444               1343      BEQ     MOVEM_REGISTER_RHS_LOOP
0000213A  4EF9 00002522           1344      JMP     MOVEM_REGISTER_LHS_LOOP
00002140  4EF8 1222               1345      JMP     PRINT_LOGIC  
00002144                          1346  PRINT_MOVEM_RHS_A6
00002144  43F9 00004227           1347      LEA     DISPLAY_A6, A1
0000214A  103C 000E               1348      MOVE.B  #14, D0
0000214E  4E4F                    1349      TRAP    #15
00002150  0C39 0001 00006076      1350      CMP.B   #1, IS_MEM_TO_REG
00002158  6700 0422               1351      BEQ     MOVEM_REGISTER_RHS_LOOP
0000215C  4EF9 00002522           1352      JMP     MOVEM_REGISTER_LHS_LOOP
00002162  4EF8 1222               1353      JMP     PRINT_LOGIC
00002166                          1354  PRINT_MOVEM_RHS_A7
00002166  43F9 0000422A           1355      LEA     DISPLAY_A7, A1
0000216C  103C 000E               1356      MOVE.B  #14, D0
00002170  4E4F                    1357      TRAP    #15
00002172  0C39 0001 00006076      1358      CMP.B   #1, IS_MEM_TO_REG
0000217A  6700 0400               1359      BEQ     MOVEM_REGISTER_RHS_LOOP
0000217E  4EF9 00002522           1360      JMP     MOVEM_REGISTER_LHS_LOOP
00002184  4EF8 1222               1361      JMP     PRINT_LOGIC
00002184  4EF8 1222               1362  -------------------- end include --------------------
00002188                          1363      INCLUDE 'JKR_GET_LOGIC_W16.X68'
00002188                          1364  GET_REGISTER_BITS
00002188  3407                    1365      MOVE.W  D7, D2
0000218A  1A3C 0004               1366      MOVE.B  #SHIFT_4_BITS,  D5      
0000218E  EB6A                    1367      LSL.W   D5, D2                  
00002190  1A3C 000D               1368      MOVE.B  #SHIFT_13_BITS, D5
00002194  EA6A                    1369      LSR.W   D5, D2                      Isolate bit 9 to 11 for Register
00002196  4E75                    1370      RTS                                 Note: For MOVE, this is DST_REG
00002198                          1371  GET_REGISTER_BITS_0TO2
00002198  3407                    1372      MOVE.W  D7, D2
0000219A  1A3C 000D               1373      MOVE.B  #SHIFT_13_BITS, D5
0000219E  EB6A                    1374      LSL.W   D5, D2                      Left shift 13 bits
000021A0  1A3C 000D               1375      MOVE.B  #SHIFT_13_BITS, D5
000021A4  EA6A                    1376      LSR.W   D5, D2                      Isolate bit 0 to 2 (3 bits) for Register
000021A6  4E75                    1377      RTS
000021A8                          1378  GET_OPMODE_BITS
000021A8  3407                    1379      MOVE.W  D7, D2
000021AA  1A3C 0007               1380      MOVE.B  #SHIFT_7_BITS,  D5      
000021AE  EB6A                    1381      LSL.W   D5, D2                  
000021B0  1A3C 000D               1382      MOVE.B  #SHIFT_13_BITS, D5
000021B4  EA6A                    1383      LSR.W   D5, D2                      Isolate bit 6 to 8 for Opmode
000021B6  4E75                    1384      RTS                                 Note: For MOVE, this is DST_MODE
000021B8                          1385  GET_EAMODE_BITS
000021B8  3407                    1386      MOVE.W  D7, D2
000021BA  1A3C 000A               1387      MOVE.B  #SHIFT_10_BITS, D5
000021BE  EB6A                    1388      LSL.W   D5, D2
000021C0  1A3C 000D               1389      MOVE.B  #SHIFT_13_BITS, D5
000021C4  EA6A                    1390      LSR.W   D5, D2                      Isolate bit 3 to 5 for EA_Mode
000021C6  4E75                    1391      RTS                                 Note: For MOVE, this is SRC_MODE
000021C8                          1392  GET_EAREG_BITS
000021C8  3407                    1393      MOVE.W  D7, D2
000021CA  1A3C 000D               1394      MOVE.B  #SHIFT_13_BITS, D5
000021CE  EB6A                    1395      LSL.W   D5, D2
000021D0  EA6A                    1396      LSR.W   D5, D2                      Isolate bit 0 to 2 for EA_Register
000021D2  4E75                    1397      RTS                                 Note: For MOVE, this is SRC_REG
000021D4                          1398  GET_BCC_BITS
000021D4  3407                    1399      MOVE.W  D7, D2
000021D6  E94A                    1400      LSL.W   #4, D2
000021D8  1A3C 000C               1401      MOVE.B  #SHIFT_12_BITS, D5
000021DC  EA6A                    1402      LSR.W   D5, D2
000021DE  4E75                    1403      RTS
000021E0                          1404  GET_CLR_BITS
000021E0  3407                    1405      MOVE.W  D7, D2
000021E2  E94A                    1406      LSL.W   #4, D2
000021E4  1A3C 000A               1407      MOVE.B  #SHIFT_10_BITS, D5
000021E8  EA6A                    1408      LSR.W   D5, D2
000021EA  4E75                    1409      RTS
000021EC                          1410  GET_JSR_BITS
000021EC  3407                    1411      MOVE.W  D7, D2
000021EE  E94A                    1412      LSL.W   #4, D2
000021F0  1A3C 000A               1413      MOVE.B  #SHIFT_10_BITS, D5
000021F4  EA6A                    1414      LSR.W   D5, D2
000021F6  4E75                    1415      RTS
000021F8                          1416  GET_LEA_BITS
000021F8  3407                    1417      MOVE.W  D7, D2
000021FA  EF4A                    1418      LSL.W   #SHIFT_7_BITS,  D2
000021FC  1A3C 000D               1419      MOVE.B  #SHIFT_13_BITS, D5
00002200  EA6A                    1420      LSR.W   D5, D2
00002202  4E75                    1421      RTS
00002204                          1422  GET_ADDI_BITS
00002204  3407                    1423      MOVE.W  D7, D2
00002206  EC4A                    1424      LSR.W   #SHIFT_6_BITS, D2           Isolates size bits of ADDI (7-6)
00002208  1A3C 0006               1425      MOVE.B  #SHIFT_6_BITS, D5      
0000220C  EB6A                    1426      LSL.W   D5, D2                  
0000220E  4E75                    1427      RTS
00002210                          1428  GET_MOVEQ_BITS
00002210  3407                    1429      MOVE.W  D7, D2
00002212  1A3C 0007               1430      MOVE.B  #SHIFT_7_BITS,  D5
00002216  EB6A                    1431      LSL.W   D5, D2
00002218  1A3C 000F               1432      MOVE.B  #SHIFT_15_BITS, D5
0000221C  EA6A                    1433      LSR.W   D5, D2
0000221E  4E75                    1434      RTS
00002220                          1435  GET_MOVEM_BITS
00002220  3407                    1436      MOVE.W  D7, D2
00002222  1A3C 0006               1437      MOVE.B  #SHIFT_6_BITS,  D5
00002226  EB6A                    1438      LSL.W   D5, D2
00002228  1A3C 000C               1439      MOVE.B  #SHIFT_12_BITS, D5
0000222C  EA6A                    1440      LSR.W   D5, D2
0000222E  4E75                    1441      RTS
00002230                          1442  GET_MOVEM_DR_BITS
00002230  3407                    1443      MOVE.W  D7, D2
00002232  1A3C 0004               1444      MOVE.B  #SHIFT_4_BITS,  D5
00002236  EB6A                    1445      LSL.W   D5, D2
00002238  1A3C 000E               1446      MOVE.B  #SHIFT_14_BITS, D5
0000223C  EA6A                    1447      LSR.W   D5, D2
0000223E  4E75                    1448      RTS
00002240                          1449  GET_DATA_8BITS
00002240  3407                    1450      MOVE.W  D7, D2
00002242  1A3C 0008               1451      MOVE.B  #SHIFT_8_BITS, D5
00002246  EB6A                    1452      LSL.W   D5, D2
00002248  1A3C 0008               1453      MOVE.B  #SHIFT_8_BITS, D5
0000224C  EA6A                    1454      LSR.W   D5, D2
0000224E  4E75                    1455      RTS
00002250                          1456  GET_MULS_DIVU_BITS
00002250  3407                    1457      MOVE.W  D7, D2
00002252  1A3C 0007               1458      MOVE.B  #SHIFT_7_BITS,  D5
00002256  EB6A                    1459      LSL.W   D5, D2
00002258  1A3C 000D               1460      MOVE.B  #SHIFT_13_BITS, D5
0000225C  EA6A                    1461      LSR.W   D5, D2
0000225E  4E75                    1462      RTS
00002260                          1463  GET_SHIFT_SIZE_BITS
00002260  3407                    1464      MOVE.W  D7, D2
00002262  1A3C 0008               1465      MOVE.B  #SHIFT_8_BITS,  D5
00002266  EB6A                    1466      LSL.W   D5, D2
00002268  1A3C 000E               1467      MOVE.B  #SHIFT_14_BITS, D5
0000226C  EA6A                    1468      LSR.W   D5, D2
0000226E  4E75                    1469      RTS
00002270                          1470  GET_SHIFT_RS_BITS
00002270  3407                    1471      MOVE.W  D7, D2
00002272  1A3C 000B               1472      MOVE.B  #SHIFT_11_BITS, D5
00002276  EB6A                    1473      LSL.W   D5, D2
00002278  1A3C 000E               1474      MOVE.B  #SHIFT_14_BITS, D5
0000227C  EA6A                    1475      LSR.W   D5, D2
0000227E  4E75                    1476      RTS
00002280                          1477  GET_SHIFT_DIRECTION_BITS
00002280  3407                    1478      MOVE.W  D7, D2
00002282  1A3C 0007               1479      MOVE.B  #SHIFT_7_BITS,  D5
00002286  EB6A                    1480      LSL.W   D5, D2
00002288  1A3C 000F               1481      MOVE.B  #SHIFT_15_BITS, D5
0000228C  EA6A                    1482      LSR.W   D5, D2
0000228E  4E75                    1483      RTS
00002290                          1484  GET_SHIFT_IR_BITS
00002290  3407                    1485      MOVE.W  D7, D2
00002292  1A3C 000A               1486      MOVE.B  #SHIFT_10_BITS, D5
00002296  EB6A                    1487      LSL.W   D5, D2
00002298  1A3C 000F               1488      MOVE.B  #SHIFT_15_BITS, D5
0000229C  EA6A                    1489      LSR.W   D5, D2
0000229E  4E75                    1490      RTS
000022A0                          1491  GET_SHIFT_CR_NUM_BITS
000022A0  3407                    1492      MOVE.W  D7, D2
000022A2  1A3C 0004               1493      MOVE.B  #SHIFT_4_BITS,  D5
000022A6  EB6A                    1494      LSL.W   D5, D2
000022A8  1A3C 000D               1495      MOVE.B  #SHIFT_13_BITS, D5
000022AC  EA6A                    1496      LSR.W   D5, D2
000022AE  4E75                    1497      RTS
000022B0                          1498  GET_IR_BITS
000022B0  4EB8 2290               1499      JSR     GET_SHIFT_IR_BITS
000022B4  B43C 0000               1500      CMP.B   #0, D2
000022B8  6700 06A2               1501      BEQ     DECODE_IMMEDIATE_NUM
000022BC  B43C 0001               1502      CMP.B   #1, D2
000022C0  6700 06AC               1503      BEQ     DECODE_REGISTER_NUM
000022C4  4EF8 1222               1504      JMP     PRINT_LOGIC
000022C8                          1505  
000022C8                          1506  -------------------- end include --------------------
000022C8                          1507      INCLUDE 'JKR_DECODE_LOGIC_W16.X68'
000022C8                          1508  DECODE_NOP
000022C8  43F9 00003FD7           1509      LEA     DISPLAY_NOP, A1
000022CE  103C 000D               1510      MOVE.B  #13, D0
000022D2  4E4F                    1511      TRAP    #15
000022D4  4EF8 1222               1512      JMP     PRINT_LOGIC
000022D8                          1513  DECODE_STOP
000022D8  43F9 00003FE2           1514      LEA     DISPLAY_STOP, A1
000022DE  103C 000E               1515      MOVE.B  #14, D0
000022E2  4E4F                    1516      TRAP    #15
000022E4  13FC 0001 00006050      1517      MOVE.B  #1, IS_STOP
000022EC  4EF9 000037B6           1518      JMP     CHECK_DECODE_RHS
000022F2  4EF8 1222               1519      JMP     PRINT_LOGIC
000022F6                          1520  DECODE_JSR
000022F6  43F9 00003FCC           1521      LEA     DISPLAY_JSR, A1
000022FC  103C 000E               1522      MOVE.B  #14, D0
00002300  4E4F                    1523      TRAP    #15
00002302  4EB8 21B8               1524      JSR     GET_EAMODE_BITS
00002306  B43C 0002               1525      CMP.B   #2, D2
0000230A  6700 1308               1526      BEQ     DECODE_ADDRP_REG_ONE_OPERAND
0000230E  B43C 0007               1527      CMP.B   #7, D2
00002312  6700 13D8               1528      BEQ     DECODE_EA_REG_ONE_OPERAND
00002316  4EF8 1222               1529      JMP     PRINT_LOGIC
0000231A                          1530  DECODE_LEA
0000231A  43F9 00003FB6           1531      LEA     DISPLAY_LEA, A1
00002320  103C 000E               1532      MOVE.B  #14, D0
00002324  4E4F                    1533      TRAP    #15
00002326  13FC 0001 00006038      1534      MOVE.B  #1, IS_LEA
0000232E  4EB8 21B8               1535      JSR     GET_EAMODE_BITS
00002332  B43C 0002               1536      CMP.B   #2, D2
00002336  6700 1098               1537      BEQ     DECODE_ADDRP_REG_LHS
0000233A  B43C 0007               1538      CMP.B   #7, D2
0000233E  6700 1168               1539      BEQ     DECODE_EA_REG_LHS
00002342  4EF8 1222               1540      JMP     PRINT_LOGIC
00002346                          1541  DECODE_RTS
00002346  43F9 00003FC1           1542      LEA     DISPLAY_RTS, A1
0000234C  103C 000D               1543      MOVE.B  #13, D0
00002350  4E4F                    1544      TRAP    #15
00002352  4EF8 1222               1545      JMP     PRINT_LOGIC
00002356                          1546  DECODE_CLRB
00002356  43F9 00003FFA           1547      LEA     DISPLAY_CLRB, A1
0000235C  6000 0012               1548      BRA     DECODE_CLR_DISPLAY
00002360                          1549      
00002360                          1550  DECODE_CLRW
00002360  43F9 00004007           1551      LEA     DISPLAY_CLRW, A1
00002366  6000 0008               1552      BRA     DECODE_CLR_DISPLAY
0000236A                          1553      
0000236A                          1554  DECODE_CLRL
0000236A  43F9 00004014           1555      LEA     DISPLAY_CLRL, A1
00002370                          1556  
00002370                          1557  DECODE_CLR_DISPLAY
00002370  103C 000E               1558      MOVE.B  #14, D0
00002374  4E4F                    1559      TRAP    #15
00002376  4EB8 21B8               1560      JSR     GET_EAMODE_BITS
0000237A  B43C 0000               1561      CMP.B   #0, D2
0000237E  6700 1204               1562      BEQ     DECODE_DATA_REG_ONE_OPERAND
00002382  B43C 0002               1563      CMP.B   #2, D2
00002386  6700 128C               1564      BEQ     DECODE_ADDRP_REG_ONE_OPERAND
0000238A  B43C 0003               1565      CMP.B   #3, D2
0000238E  6700 12CC               1566      BEQ     DECODE_ADDRPLUS_REG_ONE_OPERAND
00002392  B43C 0004               1567      CMP.B   #4, D2
00002396  6700 130C               1568      BEQ     DECODE_MINUSADDR_REG_ONE_OPERAND
0000239A  B43C 0007               1569      CMP.B   #7, D2
0000239E  6700 134C               1570      BEQ     DECODE_EA_REG_ONE_OPERAND
000023A2  4EF8 1222               1571      JMP     PRINT_LOGIC
000023A6                          1572  DECODE_CMPB
000023A6  43F9 00004172           1573      LEA     DISPLAY_CMPB, A1
000023AC  103C 000E               1574      MOVE.B  #14, D0
000023B0  4E4F                    1575      TRAP    #15
000023B2  13FC 0001 00006030      1576      MOVE.B  #1, IS_CMP                  Flag set to true for when decoding RHS
000023BA                          1577      
000023BA  4EB8 21B8               1578      JSR     GET_EAMODE_BITS
000023BE  B43C 0000               1579      CMP.B   #0, D2
000023C2  6700 0F7C               1580      BEQ     DECODE_DATA_REG_LHS
000023C6  B43C 0002               1581      CMP.B   #2, D2
000023CA  6700 1004               1582      BEQ     DECODE_ADDRP_REG_LHS
000023CE  B43C 0003               1583      CMP.B   #3, D2
000023D2  6700 1044               1584      BEQ     DECODE_ADDRPLUS_REG_LHS
000023D6  B43C 0004               1585      CMP.B   #4, D2
000023DA  6700 1084               1586      BEQ     DECODE_MINUSADDR_REG_LHS
000023DE  B43C 0007               1587      CMP.B   #7, D2
000023E2  6700 10C4               1588      BEQ     DECODE_EA_REG_LHS
000023E6  4EF8 1222               1589      JMP     PRINT_LOGIC
000023EA                          1590  DECODE_CMPW
000023EA  43F9 0000417F           1591      LEA     DISPLAY_CMPW, A1
000023F0  6000 0010               1592      BRA     DECODE_CMP_W_L_DISPLAY
000023F4                          1593      
000023F4                          1594  DECODE_CMPL
000023F4  43F9 0000418C           1595      LEA     DISPLAY_CMPL, A1
000023FA  13FC 0001 00006036      1596      MOVE.B  #1, IS_LONG                 Flag set to true for when decoding IMDATA_L
00002402                          1597      
00002402                          1598  DECODE_CMP_W_L_DISPLAY
00002402  103C 000E               1599      MOVE.B  #14, D0
00002406  4E4F                    1600      TRAP    #15
00002408  13FC 0001 00006030      1601      MOVE.B  #1, IS_CMP                  Flag set to true for when decoding RHS
00002410  4EB8 21B8               1602      JSR     GET_EAMODE_BITS
00002414  B43C 0000               1603      CMP.B   #0, D2
00002418  6700 0F26               1604      BEQ     DECODE_DATA_REG_LHS
0000241C  B43C 0001               1605      CMP.B   #1, D2
00002420  6700 0F66               1606      BEQ     DECODE_ADDR_REG_LHS
00002424  B43C 0002               1607      CMP.B   #2, D2
00002428  6700 0FA6               1608      BEQ     DECODE_ADDRP_REG_LHS
0000242C  B43C 0003               1609      CMP.B   #3, D2
00002430  6700 0FE6               1610      BEQ     DECODE_ADDRPLUS_REG_LHS
00002434  B43C 0004               1611      CMP.B   #4, D2
00002438  6700 1026               1612      BEQ     DECODE_MINUSADDR_REG_LHS
0000243C  B43C 0007               1613      CMP.B   #7, D2
00002440  6700 1066               1614      BEQ     DECODE_EA_REG_LHS
00002444  4EF8 1222               1615      JMP     PRINT_LOGIC
00002448                          1616  DECODE_MOVEMW
00002448  13FC 0001 00006048      1617      MOVE.B  #1, IS_MOVEM   
00002450  43F9 0000405A           1618      LEA     DISPLAY_MOVEMW, A1
00002456  6000 0010               1619      BRA     MOVEM_DIRECTION
0000245A                          1620  
0000245A                          1621  DECODE_MOVEML
0000245A  13FC 0001 00006048      1622      MOVE.B  #1, IS_MOVEM   
00002462  43F9 00004069           1623      LEA     DISPLAY_MOVEML, A1
00002468                          1624  
00002468                          1625  MOVEM_DIRECTION
00002468  103C 000E               1626      MOVE.B  #14, D0
0000246C  4E4F                    1627      TRAP    #15
0000246E  4EB8 2230               1628      JSR     GET_MOVEM_DR_BITS           Get MOVEM direction Bits
00002472  B47C 0003               1629      CMP.W   #3, D2                      IF match with 0011 bits, then Memory to Register 
00002476  6700 004A               1630      BEQ     DECODE_MOVEM_MEM_TO_REG     Decode MOVEM.M/L with Mem to Reg
0000247A                          1631  
0000247A                          1632  DECODE_MOVEM_REG_TO_MEM
0000247A  13FC 0000 00006076      1633      MOVE.B  #0, IS_MEM_TO_REG           DIRECTION FLAG = 0, Register to Memory
00002482  4EB8 21B8               1634      JSR     GET_EAMODE_BITS             *Special <EA> check for -(An) before printing <LIST>
00002486  B43C 0004               1635      CMP.B   #4, D2
0000248A  6600 000C               1636      BNE     JUMP_FLAG_MINUSADDR
0000248E  13FC 0001 00006080      1637      MOVE.B  #1, IS_MINUSADDR            *FLAG to indicate -(An) when bit 3 to 5 for EA_Mode is %0100(#4)
00002496  4242                    1638      CLR     D2
00002498                          1639      
00002498                          1640  JUMP_FLAG_MINUSADDR 
00002498  4EF9 00002506           1641      JMP     DECODE_MOVEM_REGISTERS_LHS
0000249E                          1642  
0000249E                          1643  DECODE_MOVEM_EA_REG_RHS                 *MOVEM  <LIST>,<EA> *<EA> part  
0000249E  4EB8 15BE               1644      JSR     PRINT_COMMA
000024A2  4EB8 21B8               1645      JSR     GET_EAMODE_BITS
000024A6  B43C 0002               1646      CMP.B   #2, D2
000024AA  6700 1168               1647      BEQ     DECODE_ADDRP_REG_ONE_OPERAND    
000024AE  B43C 0004               1648      CMP.B   #4, D2
000024B2  6700 11F0               1649      BEQ     DECODE_MINUSADDR_REG_ONE_OPERAND
000024B6  B43C 0007               1650      CMP.B   #7, D2
000024BA  6700 002E               1651      BEQ     DECODE_MOVEM_EA_REG         
000024BE  4EF8 1222               1652      JMP     PRINT_LOGIC
000024C2                          1653      
000024C2                          1654  DECODE_MOVEM_MEM_TO_REG                 *MOVEM  <EA>,<LIST> *<EA> part
000024C2  13FC 0001 00006076      1655      MOVE.B  #1, IS_MEM_TO_REG           DIRECTION FLAG = 1, Memory to Register                                  
000024CA  4EB8 21B8               1656      JSR     GET_EAMODE_BITS
000024CE  B43C 0002               1657      CMP.B   #2, D2
000024D2  6700 0EFC               1658      BEQ     DECODE_ADDRP_REG_LHS    
000024D6  B43C 0003               1659      CMP.B   #3, D2
000024DA  6700 0F3C               1660      BEQ     DECODE_ADDRPLUS_REG_LHS 
000024DE  B43C 0007               1661      CMP.B   #7, D2
000024E2  6700 0006               1662      BEQ     DECODE_MOVEM_EA_REG
000024E6  4EF8 1222               1663      JMP     PRINT_LOGIC     
000024EA                          1664  
000024EA                          1665  DECODE_MOVEM_EA_REG                     *Both MOVEM *<EA> part
000024EA  13FC 0001 00006078      1666      MOVE.B  #1, IS_MOVEM_EA_REG
000024F2  4EB8 21C8               1667      JSR     GET_EAREG_BITS
000024F6  B43C 0000               1668      CMP.B   #0, D2                      (xxxx).W
000024FA  6700 0158               1669      BEQ     DECODE_MOVEM_EA_WORD_LHS
000024FE  B43C 0001               1670      CMP.B   #1, D2                      (xxxx).L
00002502  6700 01D2               1671      BEQ     DECODE_MOVEM_EA_LONG_LHS
00002506                          1672  
00002506                          1673  DECODE_MOVEM_REGISTERS_LHS              *MOVEM  <LIST>,<EA> *<LIST> part    
00002506                          1674  DECODE_MOVEM_REGISTERS_RHS              *MOVEM  <EA>,<LIST> *<LIST> part
00002506  4283                    1675      CLR.L   D3
00002508  4284                    1676      CLR.L   D4
0000250A  4285                    1677      CLR.L   D5
0000250C  361D                    1678      MOVE.W  (A5)+, D3                   VALUE
0000250E  183C 0000               1679      MOVE.B  #0, D4                      COUNTER 0 to 15
00002512  1A3C 0000               1680      MOVE.B  #0, D5                      Indicate first hit of 1 bit
00002516  0C39 0001 00006076      1681      CMP.B   #1, IS_MEM_TO_REG
0000251E  6700 005C               1682      BEQ     MOVEM_REGISTER_RHS_LOOP
00002522                          1683      
00002522                          1684  MOVEM_REGISTER_LHS_LOOP                 *MOVEM  <LIST>,<EA> *<LIST> part    
00002522  B67C 0000               1685      CMP.W   #0, D3                      EXIT CONDITION
00002526  6700 FF76               1686      BEQ     DECODE_MOVEM_EA_REG_RHS     Move to <EA>
0000252A  0803 0000               1687      BTST    #0,D3
0000252E  6600 0014               1688      BNE     CHECK_SLASH_CONDITION_REG_TO_MEM    IF there is something in D3, print slash
00002532  0C39 0001 00006080      1689      CMP.B   #1,IS_MINUSADDR
0000253A  6700 002E               1690      BEQ     JUMP_SLASH_SPECIAL_CASE
0000253E  4EF9 0000255E           1691      JMP     JUMP_SLASH_REG_TO_MEM
00002544                          1692      
00002544                          1693  CHECK_SLASH_CONDITION_REG_TO_MEM
00002544  5205                    1694      ADD.B   #1, D5                      Add count to indicate if it hits any Dn or An
00002546  BA3C 0001               1695      CMP.B   #1, D5
0000254A  6F00 0012               1696      BLE     JUMP_SLASH_REG_TO_MEM       If there is only one Dn or An, then skip "/"
0000254E  4EB8 15B0               1697      JSR     PRINT_SLASH
00002552  0C39 0001 00006080      1698      CMP.B   #1, IS_MINUSADDR
0000255A  6700 0016               1699      BEQ     AFTER_SLASH_SPECIAL_CASE
0000255E                          1700      
0000255E                          1701  JUMP_SLASH_REG_TO_MEM
0000255E  5204                    1702      ADDI.B  #1, D4                      Add count to hit until 16
00002560  E24B                    1703      LSR.W   #1, D3
00002562  6500 0048               1704      BCS     DISPLAY_MOVEM_REGISTER
00002566  4EF8 2522               1705      JMP     MOVEM_REGISTER_LHS_LOOP
0000256A                          1706      
0000256A                          1707  JUMP_SLASH_SPECIAL_CASE                 *ONLY Case to print out Dn/An mask reversed order                       
0000256A  E34B                    1708      LSL.W   #1, D3
0000256C  5204                    1709      ADDI.B  #1, D4
0000256E  E35B                    1710      ROL.W   #1, D3
00002570  65D2                    1711      BCS     CHECK_SLASH_CONDITION_REG_TO_MEM
00002572                          1712  AFTER_SLASH_SPECIAL_CASE
00002572  E24B                    1713      LSR.W   #1, D3  
00002574  6500 0036               1714      BCS     DISPLAY_MOVEM_REGISTER
00002578  4EF8 2522               1715      JMP     MOVEM_REGISTER_LHS_LOOP
0000257C                          1716      
0000257C                          1717  MOVEM_REGISTER_RHS_LOOP                 *MOVEM  <EA>,<LIST> *<LIST> part
0000257C  B67C 0000               1718      CMP.W   #0, D3                      EXIT CONDITION
00002580  6700 00AE               1719      BEQ     ONE_STEP_BEFORE_PRINT_LOGIC
00002584  0803 0000               1720      BTST    #0, D3
00002588  6600 0008               1721      BNE     CHECK_SLASH_CONDITION       IF there is something in D3, print slash
0000258C  4EF9 000025A0           1722      JMP     JUMP_SLASH
00002592                          1723      
00002592                          1724  CHECK_SLASH_CONDITION
00002592  5205                    1725      ADD.B   #1, D5                      Add count to indicate if it hits any Dn or An
00002594  BA3C 0001               1726      CMP.B   #1, D5
00002598  6F00 0006               1727      BLE     JUMP_SLASH                  If there is only one Dn or An, then skip "/"
0000259C  4EB8 15B0               1728      JSR     PRINT_SLASH
000025A0                          1729      
000025A0                          1730  JUMP_SLASH
000025A0  5204                    1731      ADDI.B  #1, D4                      Add count to hit until 16
000025A2  E24B                    1732      LSR.W   #1, D3
000025A4  6500 0006               1733      BCS     DISPLAY_MOVEM_REGISTER
000025A8  4EF8 257C               1734      JMP     MOVEM_REGISTER_RHS_LOOP
000025AC                          1735  
000025AC                          1736  DISPLAY_MOVEM_REGISTER                  *<EA> on both case
000025AC  B87C 0001               1737      CMP.W   #1, D4
000025B0  6700 F9B6               1738      BEQ     PRINT_MOVEM_RHS_D0
000025B4  B87C 0002               1739      CMP.W   #2, D4
000025B8  6700 F9D0               1740      BEQ     PRINT_MOVEM_RHS_D1
000025BC  B87C 0003               1741      CMP.W   #3, D4
000025C0  6700 F9EA               1742      BEQ     PRINT_MOVEM_RHS_D2
000025C4  B87C 0004               1743      CMP.W   #4, D4
000025C8  6700 FA04               1744      BEQ     PRINT_MOVEM_RHS_D3
000025CC  B87C 0005               1745      CMP.W   #5, D4
000025D0  6700 FA1E               1746      BEQ     PRINT_MOVEM_RHS_D4
000025D4  B87C 0006               1747      CMP.W   #6, D4
000025D8  6700 FA38               1748      BEQ     PRINT_MOVEM_RHS_D5
000025DC  B87C 0007               1749      CMP.W   #7, D4
000025E0  6700 FA52               1750      BEQ     PRINT_MOVEM_RHS_D6
000025E4  B87C 0008               1751      CMP.W   #8, D4
000025E8  6700 FA6C               1752      BEQ     PRINT_MOVEM_RHS_D7
000025EC  B87C 0009               1753      CMP.W   #9, D4
000025F0  6700 FA86               1754      BEQ     PRINT_MOVEM_RHS_A0
000025F4  B87C 000A               1755      CMP.W   #10, D4
000025F8  6700 FAA0               1756      BEQ     PRINT_MOVEM_RHS_A1
000025FC  B87C 000B               1757      CMP.W   #11, D4
00002600  6700 FABA               1758      BEQ     PRINT_MOVEM_RHS_A2
00002604  B87C 000C               1759      CMP.W   #12, D4
00002608  6700 FAD4               1760      BEQ     PRINT_MOVEM_RHS_A3
0000260C  B87C 000D               1761      CMP.W   #13, D4
00002610  6700 FAEE               1762      BEQ     PRINT_MOVEM_RHS_A4  
00002614  B87C 000E               1763      CMP.W   #14, D4
00002618  6700 FB08               1764      BEQ     PRINT_MOVEM_RHS_A5
0000261C  B87C 000F               1765      CMP.W   #15, D4
00002620  6700 FB22               1766      BEQ     PRINT_MOVEM_RHS_A6
00002624  B87C 0010               1767      CMP.W   #16, D4
00002628  6700 FB3C               1768      BEQ     PRINT_MOVEM_RHS_A7
0000262C  4EF8 1222               1769      JMP     PRINT_LOGIC
00002630                          1770      
00002630                          1771  ONE_STEP_BEFORE_PRINT_LOGIC             *ONLY used in MOVEM <EA>,<LIST>
00002630  0C39 0001 00006078      1772      CMP.B   #1,  IS_MOVEM_EA_REG
00002638  6600 0012               1773      BNE     SKIP_TO_PRINT_LOGIC         If MOVEM EA REGISTER MODE,
0000263C  3C1D                    1774      MOVE.W  (A5)+, D6                   ADD 1 address forward in oderd to place correct address.
0000263E  0C39 0001 00006036      1775      CMP.B   #1, IS_LONG                 Word/long address?
00002646  6600 0004               1776      BNE     SKIP_TO_PRINT_LOGIC         If long address, then add one more move.w
0000264A  3C1D                    1777      MOVE.W  (A5)+, D6
0000264C                          1778  SKIP_TO_PRINT_LOGIC
0000264C  4EB8 15F4               1779      JSR     CLEAR_NEXT_LINE
00002650  4EF8 1222               1780      JMP     PRINT_LOGIC 
00002654                          1781  DECODE_MOVEM_EA_WORD_LHS
00002654  4EB8 15CC               1782      JSR     PRINT_DOLLAR
00002658  4EB9 00003C14           1783      JSR     CLR_DATAREG_D6              Clear all registers before calculation
0000265E  3C1D                    1784      MOVE.W  (A5)+, D6                   Put current addr into D6, to hold addr value
00002660  0C39 0001 00006076      1785      CMP.B   #1, IS_MEM_TO_REG           If MOVEM <EA>,<LIST>
00002668  6600 0004               1786      BNE     DONT_ADD_ADDRESS_W          Add one address forward
0000266C  3C1D                    1787      MOVE.W  (A5)+, D6                   MOVEM structure need one more adding of address
0000266E                          1788      
0000266E                          1789  DONT_ADD_ADDRESS_W
0000266E  143C 0001               1790      MOVE.B  #1, D2                      Counter Variable
00002672  163C 0004               1791      MOVE.B  #4, D3                      D3 will hold starting shift value, as 4
00002676  323C F000               1792      MOVE.W  #$F000, D1                  Move the masking value to D1
0000267A                          1793      
0000267A                          1794  EA_MOVEM_WORD_LOOP_LHS
0000267A  3A06                    1795      MOVE.W  D6, D5                      D5 will hold addr for manipulation
0000267C  CA41                    1796      AND.W   D1, D5                      Mask D5 with mask value
0000267E  E849                    1797      LSR.W   #4, D1                      Update the mask to next digit, by shifting 4
00002680  E77D                    1798      ROL.W   D3, D5                      ROL once to bring MSB to LSB
00002682  1805                    1799      MOVE.B  D5, D4                      Extract the digit
00002684  4EB8 16D8               1800      JSR     CHECK_CONVERSION            Send the extracted digit for conversion
00002688  33FC 0000 00006022      1801      MOVE.W  #0,(PRINT_ADDR_CHAR)        Initialize addr with a 0 for null termination
00002690  13C4 00006022           1802      MOVE.B  D4,(PRINT_ADDR_CHAR)        Print the converted digit
00002696  43F9 00006022           1803      LEA     PRINT_ADDR_CHAR,A1          |
0000269C  103C 000E               1804      MOVE.B  #14, D0                     |
000026A0  4E4F                    1805      TRAP    #15                         V
000026A2  0C02 0004               1806      CMPI.B  #4, D2                      IF counter equals terminal value
000026A6  6700 0008               1807      BEQ     EXIT_EA_MOVEM_WORD_LOOP_LHS Exit the loop
000026AA  5803                    1808      ADDQ.B  #4, D3                      Else update shift value to next digit
000026AC  5202                    1809      ADDQ.B  #1, D2                      Counter++
000026AE  60CA                    1810      BRA     EA_MOVEM_WORD_LOOP_LHS      Loop to start of loop
000026B0                          1811      
000026B0                          1812  EXIT_EA_MOVEM_WORD_LOOP_LHS
000026B0  0C39 0001 00006076      1813      CMP.B   #1, IS_MEM_TO_REG
000026B8  6600 0006               1814      BNE     DONT_MINUS_ADDRESS_W        If MOVEM <EA>,<LIST>
000026BC  3C25                    1815      MOVE.W  -(A5),D6                    Subtract 2 addresses backword,
000026BE  3C25                    1816      MOVE.W  -(A5),D6                    in oderd to place correct address.
000026C0                          1817      
000026C0                          1818  DONT_MINUS_ADDRESS_W
000026C0  0C39 0000 00006076      1819      CMP.B   #0, IS_MEM_TO_REG           Case of MOVEM.W <LIST>,<EA> need to exit
000026C8  6782                    1820      BEQ     SKIP_TO_PRINT_LOGIC
000026CA  4EB8 15BE               1821      JSR     PRINT_COMMA
000026CE  4EF8 2506               1822      JMP     DECODE_MOVEM_REGISTERS_RHS
000026D2  4EF8 1222               1823      JMP     PRINT_LOGIC
000026D6                          1824  DECODE_MOVEM_EA_LONG_LHS
000026D6  13FC 0001 00006036      1825      MOVE.B  #1, IS_LONG                 Flag long address   
000026DE  4EB8 15CC               1826      JSR     PRINT_DOLLAR
000026E2  4EB9 00003C14           1827      JSR     CLR_DATAREG_D6              Clear all registers before calculation
000026E8  0C39 0001 00006076      1828      CMP.B   #1, IS_MEM_TO_REG           If MOVEM <EA>,<LIST>
000026F0  6700 000A               1829      BEQ     STEP_FOR_MEM_TO_REG
000026F4  2C1D                    1830      MOVE.L  (A5)+, D6
000026F6  4EF9 00002700           1831      JMP     DONT_ADD_ADDRESS_L
000026FC                          1832      
000026FC                          1833  STEP_FOR_MEM_TO_REG
000026FC  3C1D                    1834      MOVE.W  (A5)+,D6                    Move up word value in memory
000026FE  2C1D                    1835      MOVE.L  (A5)+,D6                    Grab EA long value
00002700                          1836      
00002700                          1837  DONT_ADD_ADDRESS_L
00002700  143C 0001               1838      MOVE.B  #1, D2                      Counter Variable
00002704  163C 0004               1839      MOVE.B  #4, D3                      D3 will hold starting shift value, as 4
00002708  223C F0000000           1840      MOVE.L  #$F0000000, D1              Move the masking value to D1
0000270E                          1841      
0000270E                          1842  EA_MOVEM_LONG_LOOP_LHS
0000270E  2A06                    1843      MOVE.L  D6, D5                      D5 will hold addr for manipulation
00002710  CA81                    1844      AND.L   D1, D5                      Mask D5 with mask value
00002712  E889                    1845      LSR.L   #4, D1                      Update the mask to next digit, by shifting 4
00002714  E7BD                    1846      ROL.L   D3, D5                      ROL once to bring MSB to LSB
00002716  1805                    1847      MOVE.B  D5, D4                      Extract the digit
00002718  4EB8 16D8               1848      JSR     CHECK_CONVERSION            Send the extracted digit for conversion
0000271C  23FC 00000000 00006022  1849      MOVE.L  #0,(PRINT_ADDR_CHAR)        Initialize addr with a 0 for null termination
00002726  13C4 00006022           1850      MOVE.B  D4,(PRINT_ADDR_CHAR)        Print the converted digit
0000272C  43F9 00006022           1851      LEA     PRINT_ADDR_CHAR,A1          |
00002732  103C 000E               1852      MOVE.B  #14, D0                     |
00002736  4E4F                    1853      TRAP    #15                         V
00002738  0C02 0008               1854      CMPI.B  #8, D2                      IF counter equals terminal value
0000273C  6700 0008               1855      BEQ     EXIT_EA_MOVEM_LONG_LOOP_LHS Exit the loop
00002740  5803                    1856      ADDQ.B  #4, D3                      Else update shift value to next digit
00002742  5202                    1857      ADDQ.B  #1, D2                      Counter++
00002744  60C8                    1858      BRA     EA_MOVEM_LONG_LOOP_LHS      Loop to start of loop
00002746                          1859      
00002746                          1860  EXIT_EA_MOVEM_LONG_LOOP_LHS
00002746  0C39 0001 00006076      1861      CMP.B   #1,  IS_MEM_TO_REG
0000274E  6600 0006               1862      BNE     DONT_MINUS_ADDRESS_L        If MOVEM EA REGISTER MODE,
00002752  2C25                    1863      MOVE.L  -(A5),D6                    ADD 2 addresses backword,
00002754  3C25                    1864      MOVE.W  -(A5),D6                    in oderd to place correct address.   
00002756                          1865      
00002756                          1866  DONT_MINUS_ADDRESS_L
00002756  0C39 0000 00006076      1867      CMP.B   #0, IS_MEM_TO_REG           Case of MOVEM.W <LIST>,<EA> need to exit
0000275E  6700 FEEC               1868      BEQ     SKIP_TO_PRINT_LOGIC         Exit for MOVEM.W <LIST>,<EA>
00002762  4EB8 15BE               1869      JSR     PRINT_COMMA
00002766  4EF8 2506               1870      JMP     DECODE_MOVEM_REGISTERS_RHS
0000276A  4EF8 1222               1871      JMP     PRINT_LOGIC
0000276E                          1872  DECODE_MOVEB
0000276E  43F9 00004021           1873      LEA     DISPLAY_MOVEB, A1
00002774  103C 000E               1874      MOVE.B  #14, D0
00002778  4E4F                    1875      TRAP    #15
0000277A  6000 0026               1876      BRA     DECODE_MOVE_DISPLAY
0000277E                          1877  
0000277E                          1878  DECODE_MOVEW
0000277E  43F9 0000402F           1879      LEA     DISPLAY_MOVEW, A1
00002784  103C 000E               1880      MOVE.B  #14, D0
00002788  4E4F                    1881      TRAP    #15
0000278A  6000 0016               1882      BRA     DECODE_MOVE_DISPLAY
0000278E                          1883      
0000278E                          1884  DECODE_MOVEL
0000278E  43F9 0000403D           1885      LEA     DISPLAY_MOVEL, A1
00002794  103C 000E               1886      MOVE.B  #14, D0
00002798  4E4F                    1887      TRAP    #15
0000279A  13FC 0001 00006036      1888      MOVE.B  #1, IS_LONG                 Flag set to true for when decoding IMDATA_L
000027A2                          1889  
000027A2                          1890  DECODE_MOVE_DISPLAY
000027A2  13FC 0001 00006040      1891      MOVE.B  #1, IS_MOVE                 Flag set to true for when decoding RHS
000027AA  4EB8 21B8               1892      JSR     GET_EAMODE_BITS     
000027AE  B43C 0000               1893      CMP.B   #0, D2
000027B2  6700 0B8C               1894      BEQ     DECODE_DATA_REG_LHS
000027B6  B43C 0001               1895      CMP.B   #1, D2
000027BA  6700 0BCC               1896      BEQ     DECODE_ADDR_REG_LHS
000027BE  B43C 0002               1897      CMP.B   #2, D2
000027C2  6700 0C0C               1898      BEQ     DECODE_ADDRP_REG_LHS
000027C6  B43C 0003               1899      CMP.B   #3, D2
000027CA  6700 0C4C               1900      BEQ     DECODE_ADDRPLUS_REG_LHS
000027CE  B43C 0004               1901      CMP.B   #4, D2
000027D2  6700 0C8C               1902      BEQ     DECODE_MINUSADDR_REG_LHS
000027D6  B43C 0007               1903      CMP.B   #7, D2
000027DA  6700 0CCC               1904      BEQ     DECODE_EA_REG_LHS
000027DE  4EF8 1222               1905      JMP     PRINT_LOGIC
000027E2                          1906  DECODE_MOVEQ
000027E2  13FC 0001 00006046      1907      MOVE.B  #1, IS_MOVEQ    
000027EA  43F9 0000404B           1908      LEA     DISPLAY_MOVEQL, A1
000027F0  103C 000E               1909      MOVE.B  #14, D0
000027F4  4E4F                    1910      TRAP    #15
000027F6  4EB8 15DA               1911      JSR     PRINT_IMDATA
000027FA  4EB8 2240               1912      JSR     GET_DATA_8BITS
000027FE  4EF9 00003250           1913      JMP     SET_MOVEQ_IMDATA
00002804                          1914  DECODE_ROTATIONS_MS
00002804  4EB8 2188               1915      JSR     GET_REGISTER_BITS           Get 9th - 11th bit, find out AS(L/R), LS(L/R), or RO(L/R)
00002808  B43C 0000               1916      CMP.B   #0,D2
0000280C  6700 001E               1917      BEQ     DECODE_AS_MS
00002810  4EB8 2188               1918      JSR     GET_REGISTER_BITS
00002814  B43C 0001               1919      CMP.B   #1, D2
00002818  6700 001C               1920      BEQ     DECODE_LS_MS
0000281C  4EB8 2188               1921      JSR     GET_REGISTER_BITS
00002820  B43C 0003               1922      CMP.B   #3, D2
00002824  6700 001A               1923      BEQ     DECODE_RO_MS
00002828  6000 ED7A               1924      BRA     INVALID_ROTATIONS_MS
0000282C                          1925  
0000282C                          1926  DECODE_AS_MS
0000282C  43F9 00004136           1927      LEA     DISPLAY_AS, A1
00002832  6000 0012               1928      BRA     SHIFT_DIRECTION_MS
00002836                          1929      
00002836                          1930  DECODE_LS_MS
00002836  43F9 0000414A           1931      LEA     DISPLAY_LS, A1
0000283C  6000 0008               1932      BRA     SHIFT_DIRECTION_MS
00002840                          1933      
00002840                          1934  DECODE_RO_MS
00002840  43F9 0000415E           1935      LEA     DISPLAY_RO, A1
00002846                          1936  
00002846                          1937  SHIFT_DIRECTION_MS
00002846  103C 000E               1938      MOVE.B  #14, D0
0000284A  4E4F                    1939      TRAP    #15
0000284C                          1940  
0000284C  4EB8 2280               1941      JSR     GET_SHIFT_DIRECTION_BITS
00002850  B43C 0000               1942      CMP.B   #0, D2
00002854  6700 000C               1943      BEQ     PRINT_SHIFT_EA
00002858  43F9 00003FA8           1944      LEA     DISPLAY_L, A1
0000285E  6000 0008               1945      BRA     GO_TO_EA
00002862                          1946      
00002862                          1947  PRINT_SHIFT_EA
00002862  43F9 00003FA2           1948      LEA     DISPLAY_R, A1
00002868                          1949  
00002868                          1950  GO_TO_EA
00002868  103C 000E               1951      MOVE.B  #14, D0
0000286C  4E4F                    1952      TRAP    #15 
0000286E  43F9 00003F96           1953      LEA     DISPLAY_SPACE, A1
00002874  103C 000E               1954      MOVE.B  #14, D0
00002878  4E4F                    1955      TRAP    #15
0000287A                          1956       
0000287A  4EB8 21B8               1957      JSR     GET_EAMODE_BITS
0000287E  B43C 0002               1958      CMP.B   #2, D2
00002882  6700 0D90               1959      BEQ     DECODE_ADDRP_REG_ONE_OPERAND
00002886  B43C 0003               1960      CMP.B   #3, D2
0000288A  6700 0DD0               1961      BEQ     DECODE_ADDRPLUS_REG_ONE_OPERAND
0000288E  B43C 0004               1962      CMP.B   #4, D2
00002892  6700 0E10               1963      BEQ     DECODE_MINUSADDR_REG_ONE_OPERAND
00002896  B43C 0007               1964      CMP.B   #7, D2
0000289A  6700 0E50               1965      BEQ     DECODE_EA_REG_ONE_OPERAND
0000289E  4EF8 1222               1966      JMP     PRINT_LOGIC 
000028A2                          1967  DECODE_ROTATIONS_BYTE_RS
000028A2  13FC 0001 00006032      1968      MOVE.B  #1, IS_BYTE
000028AA  6000 0016               1969      BRA     DECODE_SHIFT_RS_BITS
000028AE                          1970      
000028AE                          1971  DECODE_ROTATIONS_WORD_RS
000028AE  13FC 0001 00006034      1972      MOVE.B  #1, IS_WORD
000028B6  6000 000A               1973      BRA     DECODE_SHIFT_RS_BITS    
000028BA                          1974  
000028BA                          1975  DECODE_ROTATIONS_LONG_RS
000028BA  13FC 0001 00006036      1976      MOVE.B  #1, IS_LONG 
000028C2                          1977  
000028C2                          1978  DECODE_SHIFT_RS_BITS
000028C2  4EB8 2270               1979      JSR     GET_SHIFT_RS_BITS
000028C6  B43C 0000               1980      CMP.B   #0, D2                      ASL/R
000028CA  6700 0016               1981      BEQ     DECODE_AS
000028CE  B43C 0001               1982      CMP.B   #1, D2                      LSL/R
000028D2  6700 0018               1983      BEQ     DECODE_LS
000028D6  B43C 0003               1984      CMP.B   #3, D2                      ROL/R
000028DA  6700 001A               1985      BEQ     DECODE_RO
000028DE  6000 ECCA               1986      BRA     INVALID_OP
000028E2                          1987  
000028E2                          1988  DECODE_AS
000028E2  43F9 00004136           1989      LEA     DISPLAY_AS, A1
000028E8  6000 0012               1990      BRA     SHIFT_DIRECTION_BYTE
000028EC                          1991      
000028EC                          1992  DECODE_LS
000028EC  43F9 0000414A           1993      LEA     DISPLAY_LS, A1
000028F2  6000 0008               1994      BRA     SHIFT_DIRECTION_BYTE
000028F6                          1995      
000028F6                          1996  DECODE_RO
000028F6  43F9 0000415E           1997      LEA     DISPLAY_RO, A1
000028FC                          1998      
000028FC                          1999  SHIFT_DIRECTION_BYTE
000028FC  103C 000E               2000      MOVE.B  #14, D0
00002900  4E4F                    2001      TRAP    #15
00002902                          2002  
00002902  4EB8 2280               2003      JSR     GET_SHIFT_DIRECTION_BITS
00002906  B43C 0000               2004      CMP.B   #0, D2
0000290A  6700 000C               2005      BEQ     PRINT_SHIFT_RIGHT_BYTE
0000290E  43F9 00003FA8           2006      LEA     DISPLAY_L, A1
00002914  6000 0008               2007      BRA     CHECK_SHIFT_SIZE_RS
00002918                          2008      
00002918                          2009  PRINT_SHIFT_RIGHT_BYTE
00002918  43F9 00003FA2           2010      LEA     DISPLAY_R, A1
0000291E                          2011  
0000291E                          2012  CHECK_SHIFT_SIZE_RS
0000291E  103C 000E               2013      MOVE.B  #14, D0
00002922  4E4F                    2014      TRAP    #15 
00002924                          2015      
00002924  0C39 0001 00006032      2016      CMP.B   #1, IS_BYTE
0000292C  6700 001E               2017      BEQ     SHIFT_PRINT_DOT_B
00002930  0C39 0001 00006034      2018      CMP.B   #1, IS_WORD
00002938  6700 001A               2019      BEQ     SHIFT_PRINT_DOT_W
0000293C  43F9 00003FB2           2020      LEA     DISPLAY_DOT_L, A1
00002942                          2021      
00002942                          2022  DECODE_IR
00002942  103C 000E               2023      MOVE.B  #14, D0
00002946  4E4F                    2024      TRAP    #15 
00002948  6000 F966               2025      BRA     GET_IR_BITS 
0000294C                          2026      
0000294C                          2027  SHIFT_PRINT_DOT_B
0000294C  43F9 00003FAA           2028      LEA     DISPLAY_DOT_B, A1
00002952  60EE                    2029      BRA     DECODE_IR
00002954                          2030      
00002954                          2031  SHIFT_PRINT_DOT_W
00002954  43F9 00003FAE           2032      LEA     DISPLAY_DOT_W, A1
0000295A  60E6                    2033      BRA     DECODE_IR
0000295C                          2034  DECODE_IMMEDIATE_NUM
0000295C  4EB8 15DA               2035      JSR     PRINT_IMDATA
00002960  13FC 0001 00006082      2036      MOVE.B  #1, IS_IMMEDIATE_DATA
00002968  4EF9 00002980           2037      JMP     PRINT_CR_NUM
0000296E                          2038      
0000296E                          2039  DECODE_REGISTER_NUM
0000296E  43F9 00003FA0           2040      LEA     DISPLAY_D, A1
00002974  103C 000E               2041      MOVE.B  #14, D0
00002978  4E4F                    2042      TRAP    #15
0000297A  4EF9 00002980           2043      JMP     PRINT_CR_NUM    
00002980                          2044      
00002980                          2045  PRINT_CR_NUM
00002980  4EB8 22A0               2046      JSR     GET_SHIFT_CR_NUM_BITS
00002984  0C39 0001 00006082      2047      CMP.B   #1, IS_IMMEDIATE_DATA
0000298C  6700 000A               2048      BEQ     REPRESENT_1_TO_8
00002990  B43C 0000               2049      CMP.B   #0, D2                      Case for Dn, An related
00002994  6700 F4E8               2050      BEQ     PRINT_0_LHS
00002998                          2051      
00002998                          2052  REPRESENT_1_TO_8                        *In Immedate data, 0 represent 8. 
00002998  B43C 0001               2053      CMP.B   #1, D2
0000299C  6700 F4FA               2054      BEQ     PRINT_1_LHS
000029A0  B43C 0002               2055      CMP.B   #2, D2
000029A4  6700 F50C               2056      BEQ     PRINT_2_LHS
000029A8  B43C 0003               2057      CMP.B   #3, D2
000029AC  6700 F51E               2058      BEQ     PRINT_3_LHS
000029B0  B43C 0004               2059      CMP.B   #4, D2
000029B4  6700 F530               2060      BEQ     PRINT_4_LHS
000029B8  B43C 0005               2061      CMP.B   #5, D2
000029BC  6700 F542               2062      BEQ     PRINT_5_LHS
000029C0  B43C 0006               2063      CMP.B   #6, D2
000029C4  6700 F554               2064      BEQ     PRINT_6_LHS
000029C8  B43C 0007               2065      CMP.B   #7, D2
000029CC  6700 F566               2066      BEQ     PRINT_7_LHS
000029D0  B43C 0000               2067      CMP.B   #0, D2
000029D4  6700 F578               2068      BEQ     PRINT_8_LHS
000029D8  4EF8 1222               2069      JMP     PRINT_LOGIC
000029DC                          2070  DECODE_MULS 
000029DC  43F9 000041C0           2071      LEA     DISPLAY_MULS, A1
000029E2  13FC 0001 00006042      2072      MOVE.B  #1, IS_MULS
000029EA  6000 0010               2073      BRA     DECODE_MULS_DIVU_DISPLAY
000029EE                          2074      
000029EE                          2075  DECODE_DIVU 
000029EE  43F9 000041CE           2076      LEA     DISPLAY_DIVU, A1
000029F4  13FC 0001 00006044      2077      MOVE.B  #1, IS_DIVU
000029FC                          2078  
000029FC                          2079  DECODE_MULS_DIVU_DISPLAY
000029FC  103C 000E               2080      MOVE.B  #14, D0
00002A00  4E4F                    2081      TRAP    #15
00002A02  4EB8 21B8               2082      JSR     GET_EAMODE_BITS
00002A06  B43C 0000               2083      CMP.B   #0, D2
00002A0A  6700 0934               2084      BEQ     DECODE_DATA_REG_LHS
00002A0E  B43C 0002               2085      CMP.B   #2, D2
00002A12  6700 09BC               2086      BEQ     DECODE_ADDRP_REG_LHS
00002A16  B43C 0003               2087      CMP.B   #3, D2
00002A1A  6700 09FC               2088      BEQ     DECODE_ADDRPLUS_REG_LHS
00002A1E  B43C 0004               2089      CMP.B   #4, D2
00002A22  6700 0A3C               2090      BEQ     DECODE_MINUSADDR_REG_LHS
00002A26  B43C 0007               2091      CMP.B   #7, D2
00002A2A  6700 0A7C               2092      BEQ     DECODE_EA_REG_LHS
00002A2E  4EF8 1222               2093      JMP     PRINT_LOGIC
00002A32                          2094  DECODE_BCC
00002A32  43F9 000041DC           2095      LEA     DISPLAY_BCC, A1
00002A38  103C 000E               2096      MOVE.B  #14, D0
00002A3C  4E4F                    2097      TRAP    #15
00002A3E  6000 001E               2098      BRA     DECODE_Bcc_DISPLAY
00002A42                          2099      
00002A42                          2100  DECODE_BGT
00002A42  43F9 000041E7           2101      LEA     DISPLAY_BGT, A1
00002A48  103C 000E               2102      MOVE.B  #14, D0
00002A4C  4E4F                    2103      TRAP    #15
00002A4E  6000 000E               2104      BRA     DECODE_Bcc_DISPLAY
00002A52                          2105      
00002A52                          2106  DECODE_BLE
00002A52  43F9 000041F2           2107      LEA     DISPLAY_BLE, A1
00002A58  103C 000E               2108      MOVE.B  #14, D0
00002A5C  4E4F                    2109      TRAP    #15
00002A5E                          2110  
00002A5E                          2111  DECODE_Bcc_DISPLAY
00002A5E  4EF9 00002A68           2112      JMP     DECODE_DISPLACEMENT
00002A64  4EF8 1222               2113      JMP     PRINT_LOGIC
00002A68                          2114  DECODE_DISPLACEMENT
00002A68  4286                    2115      CLR.L   D6                          Clear D6
00002A6A  1C07                    2116      MOVE.B  D7, D6                      Move opword BYTE value into D6 for calculation
00002A6C  BC3C 0000               2117      CMP.B   #0, D6                      Compare if it is word displacement as in '00'
00002A70  6700 0014               2118      BEQ     WORD_DISPLACEMENT           IF not word, fall through to '01' to 'FE' logic
00002A74                          2119      
00002A74  3A0D                    2120      MOVE.W  A5, D5                      Move addr value into D5 for calculation
00002A76  DA06                    2121      ADD.B   D6, D5                      Add the BYTE displacement value. 
00002A78                          2122                                          *NOTE: JMP TBL already auto increments add by 2
00002A78  3E05                    2123      MOVE.W  D5, D7                      Store displacement address in D7
00002A7A  4EB8 166E               2124      JSR     PRINT_DISP_ADDR             JSR to print displacement address logic
00002A7E  4EB8 15F4               2125      JSR     CLEAR_NEXT_LINE
00002A82  4EF8 1222               2126      JMP     PRINT_LOGIC
00002A86                          2127      
00002A86                          2128  WORD_DISPLACEMENT    
00002A86  3A15                    2129      MOVE.W  (A5),D5                     Move DISPLACEMENT value into D5 for calculation  
00002A88  380D                    2130      MOVE.W  A5, D4                      Move the current addr into D4 for calculation
00002A8A  DA44                    2131      ADD.W   D4, D5                      Add the current Addr with DISPLACEMENT value
00002A8C  3E05                    2132      MOVE.W  D5, D7                      Store displacement address in D7
00002A8E  544D                    2133      ADDA.W  #2, A5                      Increment the current addr reg by 2(word value)
00002A90  4EB8 166E               2134      JSR     PRINT_DISP_ADDR             JSR to print displacement address logic
00002A94  4EB8 15F4               2135      JSR     CLEAR_NEXT_LINE
00002A98  4EF8 1222               2136      JMP     PRINT_LOGIC
00002A9C                          2137  DECODE_ADDB_EATODN
00002A9C  43F9 00004078           2138      LEA     DISPLAY_ADDB, A1
00002AA2  103C 000E               2139      MOVE.B  #14, D0
00002AA6  4E4F                    2140      TRAP    #15
00002AA8  13FC 0001 00006052      2141      MOVE.B  #1, IS_ADDB                 Flag set to true for when decoding RHS
00002AB0  13FC 0001 00006102      2142      MOVE.B  #1, IS_EATODN
00002AB8                          2143      
00002AB8  4EB8 21B8               2144      JSR     GET_EAMODE_BITS     
00002ABC  B43C 0000               2145      CMP.B   #0, D2
00002AC0  6700 087E               2146      BEQ     DECODE_DATA_REG_LHS
00002AC4  B43C 0002               2147      CMP.B   #2, D2
00002AC8  6700 0906               2148      BEQ     DECODE_ADDRP_REG_LHS
00002ACC  B43C 0003               2149      CMP.B   #3, D2
00002AD0  6700 0946               2150      BEQ     DECODE_ADDRPLUS_REG_LHS
00002AD4  B43C 0004               2151      CMP.B   #4, D2
00002AD8  6700 0986               2152      BEQ     DECODE_MINUSADDR_REG_LHS
00002ADC  B43C 0007               2153      CMP.B   #7, D2
00002AE0  6700 09C6               2154      BEQ     DECODE_EA_REG_LHS
00002AE4  4EF8 1222               2155      JMP     PRINT_LOGIC
00002AE8                          2156  DECODE_ADDW_EATODN
00002AE8  43F9 00004085           2157      LEA     DISPLAY_ADDW, A1
00002AEE  103C 000E               2158      MOVE.B  #14, D0
00002AF2  4E4F                    2159      TRAP    #15
00002AF4  13FC 0001 00006058      2160      MOVE.B  #1, IS_ADDW                 ADD.W flag set to true for when decoding RHS
00002AFC  13FC 0001 00006102      2161      MOVE.B  #1, IS_EATODN               EA->DN flag set to true for when decoding RHS
00002B04  6000 0026               2162      BRA     DECODE_ADDWL_DISP
00002B08                          2163      
00002B08                          2164  DECODE_ADDL_EATODN
00002B08  43F9 00004092           2165      LEA     DISPLAY_ADDL, A1
00002B0E  103C 000E               2166      MOVE.B  #14, D0
00002B12  4E4F                    2167      TRAP    #15
00002B14  13FC 0001 00006060      2168      MOVE.B  #1, IS_ADDL                 ADD.L flag set to true for when decoding RHS
00002B1C  13FC 0001 00006036      2169      MOVE.B  #1, IS_LONG                 Flag set to true for when decoding IMDATA_L
00002B24  13FC 0001 00006102      2170      MOVE.B  #1, IS_EATODN               EA->DN flag set to true for when decoding RHS
00002B2C                          2171      
00002B2C                          2172  DECODE_ADDWL_DISP
00002B2C  4EB8 21B8               2173      JSR     GET_EAMODE_BITS     
00002B30  B43C 0000               2174      CMP.B   #0, D2
00002B34  6700 080A               2175      BEQ     DECODE_DATA_REG_LHS
00002B38  B43C 0001               2176      CMP.B   #1, D2
00002B3C  6700 084A               2177      BEQ     DECODE_ADDR_REG_LHS
00002B40  B43C 0002               2178      CMP.B   #2, D2
00002B44  6700 088A               2179      BEQ     DECODE_ADDRP_REG_LHS
00002B48  B43C 0003               2180      CMP.B   #3, D2
00002B4C  6700 08CA               2181      BEQ     DECODE_ADDRPLUS_REG_LHS
00002B50  B43C 0004               2182      CMP.B   #4, D2
00002B54  6700 090A               2183      BEQ     DECODE_MINUSADDR_REG_LHS
00002B58  B43C 0007               2184      CMP.B   #7, D2
00002B5C  6700 094A               2185      BEQ     DECODE_EA_REG_LHS
00002B60  4EF8 1222               2186      JMP     PRINT_LOGIC
00002B64                          2187  DECODE_ADDB_DNTOEA
00002B64  43F9 00004078           2188      LEA     DISPLAY_ADDB, A1
00002B6A  103C 000E               2189      MOVE.B  #14, D0
00002B6E  4E4F                    2190      TRAP    #15
00002B70  13FC 0001 00006052      2191      MOVE.B  #1, IS_ADDB                 Flag set to true for when decoding RHS
00002B78  6000 0036               2192      BRA     ADD_DNTOEA_DISP
00002B7C                          2193      
00002B7C                          2194  DECODE_ADDW_DNTOEA
00002B7C  43F9 00004085           2195      LEA     DISPLAY_ADDW, A1
00002B82  103C 000E               2196      MOVE.B  #14, D0
00002B86  4E4F                    2197      TRAP    #15
00002B88  13FC 0001 00006058      2198      MOVE.B  #1, IS_ADDW                 Flag set to true for when decoding RHS
00002B90  6000 001E               2199      BRA     ADD_DNTOEA_DISP 
00002B94                          2200      
00002B94                          2201  DECODE_ADDL_DNTOEA
00002B94  43F9 00004092           2202      LEA     DISPLAY_ADDL, A1
00002B9A  103C 000E               2203      MOVE.B  #14, D0
00002B9E  4E4F                    2204      TRAP    #15
00002BA0  13FC 0001 00006060      2205      MOVE.B  #1, IS_ADDL                 Flag set to true for when decoding RHS
00002BA8  13FC 0001 00006036      2206      MOVE.B  #1, IS_LONG                 Flag set to true for when decoding IMDATA_L 
00002BB0                          2207  
00002BB0                          2208  ADD_DNTOEA_DISP     
00002BB0  13FC 0001 00006100      2209      MOVE.B  #1, IS_DNTOEA
00002BB8  4EF9 000032F8           2210      JMP     DECODE_ADD_DATA_REG_LHS
00002BBE  4EF8 1222               2211      JMP     PRINT_LOGIC
00002BC2                          2212  DECODE_ADDIB
00002BC2  43F9 000040BB           2213      LEA     DISPLAY_ADDIB, A1
00002BC8  103C 000E               2214      MOVE.B  #14, D0
00002BCC  4E4F                    2215      TRAP    #15
00002BCE  13FC 0001 00006034      2216      MOVE.B  #1, IS_WORD
00002BD6  6000 002E               2217      BRA     ADDI_DISP   
00002BDA                          2218      
00002BDA                          2219  DECODE_ADDIW
00002BDA  43F9 000040C9           2220      LEA     DISPLAY_ADDIW, A1
00002BE0  103C 000E               2221      MOVE.B  #14, D0
00002BE4  4E4F                    2222      TRAP    #15
00002BE6  13FC 0001 00006034      2223      MOVE.B  #1, IS_WORD                 Flag set to true for when decoding IMDATA_W
00002BEE  6000 0016               2224      BRA     ADDI_DISP   
00002BF2                          2225      
00002BF2                          2226  DECODE_ADDIL
00002BF2  43F9 000040D7           2227      LEA     DISPLAY_ADDIL, A1
00002BF8  103C 000E               2228      MOVE.B  #14, D0
00002BFC  4E4F                    2229      TRAP    #15
00002BFE  13FC 0001 00006036      2230      MOVE.B  #1, IS_LONG                 Flag set to true for when decoding IMDATA_L
00002C06                          2231      
00002C06                          2232  ADDI_DISP   
00002C06  13FC 0001 00006056      2233      MOVE.B  #1, IS_ADDI                 Flag set to true for when decoding RHS
00002C0E  4EF9 00003228           2234      JMP     DECODE_IMDATA_LHS
00002C14  4EF8 1222               2235      JMP     PRINT_LOGIC
00002C18                          2236  DECODE_ADDAW
00002C18  43F9 0000409F           2237      LEA     DISPLAY_ADDAW, A1
00002C1E  103C 000E               2238      MOVE.B  #14, D0
00002C22  4E4F                    2239      TRAP    #15
00002C24  6000 0016               2240      BRA     DECODE_ADDA
00002C28                          2241      
00002C28                          2242  DECODE_ADDAL
00002C28  43F9 000040AD           2243      LEA     DISPLAY_ADDAL, A1
00002C2E  103C 000E               2244      MOVE.B  #14, D0
00002C32  4E4F                    2245      TRAP    #15
00002C34  13FC 0001 00006036      2246      MOVE.B  #1, IS_LONG
00002C3C                          2247  
00002C3C                          2248  DECODE_ADDA 
00002C3C  13FC 0001 00006054      2249      MOVE.B  #1, IS_ADDA
00002C44  4EB8 21B8               2250      JSR     GET_EAMODE_BITS
00002C48  B43C 0000               2251      CMP.B   #0, D2
00002C4C  6700 06F2               2252      BEQ     DECODE_DATA_REG_LHS
00002C50  B43C 0001               2253      CMP.B   #1, D2
00002C54  6700 0732               2254      BEQ     DECODE_ADDR_REG_LHS
00002C58  B43C 0002               2255      CMP.B   #2, D2
00002C5C  6700 0772               2256      BEQ     DECODE_ADDRP_REG_LHS
00002C60  B43C 0003               2257      CMP.B   #3, D2
00002C64  6700 07B2               2258      BEQ     DECODE_ADDRPLUS_REG_LHS
00002C68  B43C 0004               2259      CMP.B   #4, D2
00002C6C  6700 07F2               2260      BEQ     DECODE_MINUSADDR_REG_LHS
00002C70  B43C 0007               2261      CMP.B   #7, D2
00002C74  6700 0832               2262      BEQ     DECODE_EA_REG_LHS   
00002C78  4EF8 1222               2263      JMP     PRINT_LOGIC
00002C7C                          2264  DECODE_ANDB_EATODN
00002C7C  43F9 0000410F           2265      LEA     DISPLAY_ANDB, A1
00002C82  103C 000E               2266      MOVE.B  #14, D0
00002C86  4E4F                    2267      TRAP    #15
00002C88  13FC 0001 00006062      2268      MOVE.B  #1, IS_ANDB
00002C90  13FC 0001 00006034      2269      MOVE.B  #1, IS_WORD
00002C98  6000 003E               2270      BRA     DECODE_AND_EATODN
00002C9C                          2271  
00002C9C                          2272  DECODE_ANDW_EATODN
00002C9C  43F9 0000411C           2273      LEA     DISPLAY_ANDW, A1
00002CA2  103C 000E               2274      MOVE.B  #14, D0
00002CA6  4E4F                    2275      TRAP    #15
00002CA8  13FC 0001 00006064      2276      MOVE.B  #1, IS_ANDW
00002CB0  13FC 0001 00006034      2277      MOVE.B  #1, IS_WORD
00002CB8  6000 001E               2278      BRA     DECODE_AND_EATODN
00002CBC                          2279  
00002CBC                          2280  DECODE_ANDL_EATODN
00002CBC  43F9 00004129           2281      LEA     DISPLAY_ANDL, A1
00002CC2  103C 000E               2282      MOVE.B  #14, D0
00002CC6  4E4F                    2283      TRAP    #15
00002CC8  13FC 0001 00006066      2284      MOVE.B  #1, IS_ANDL
00002CD0  13FC 0001 00006036      2285      MOVE.B  #1, IS_LONG
00002CD8                          2286      
00002CD8                          2287  DECODE_AND_EATODN   
00002CD8  13FC 0001 00006102      2288      MOVE.B  #1, IS_EATODN
00002CE0  4EB8 21B8               2289      JSR     GET_EAMODE_BITS
00002CE4  B43C 0000               2290      CMP.B   #0, D2
00002CE8  6700 0656               2291      BEQ     DECODE_DATA_REG_LHS
00002CEC  B43C 0002               2292      CMP.B   #2, D2
00002CF0  6700 06DE               2293      BEQ     DECODE_ADDRP_REG_LHS
00002CF4  B43C 0003               2294      CMP.B   #3, D2
00002CF8  6700 071E               2295      BEQ     DECODE_ADDRPLUS_REG_LHS
00002CFC  B43C 0004               2296      CMP.B   #4, D2
00002D00  6700 075E               2297      BEQ     DECODE_MINUSADDR_REG_LHS
00002D04  B43C 0007               2298      CMP.B   #7, D2
00002D08  6700 079E               2299      BEQ     DECODE_EA_REG_LHS 
00002D0C  4EF8 1222               2300      JMP     PRINT_LOGIC
00002D10                          2301  DECODE_ANDB_DNTOEA
00002D10  43F9 0000410F           2302      LEA     DISPLAY_ANDB, A1
00002D16  103C 000E               2303      MOVE.B  #14, D0
00002D1A  4E4F                    2304      TRAP    #15
00002D1C  13FC 0001 00006062      2305      MOVE.B  #1, IS_ANDB                 Flag set to true for when decoding RHS
00002D24  13FC 0001 00006034      2306      MOVE.B  #1, IS_WORD
00002D2C  6000 003E               2307      BRA     DECODE_AND_DNTOEA
00002D30                          2308  
00002D30                          2309  DECODE_ANDW_DNTOEA
00002D30  43F9 0000411C           2310      LEA     DISPLAY_ANDW, A1
00002D36  103C 000E               2311      MOVE.B  #14, D0
00002D3A  4E4F                    2312      TRAP    #15
00002D3C  13FC 0001 00006064      2313      MOVE.B  #1, IS_ANDW                 Flag set to true for when decoding RHS
00002D44  13FC 0001 00006034      2314      MOVE.B  #1, IS_WORD
00002D4C  6000 001E               2315      BRA     DECODE_AND_DNTOEA
00002D50                          2316      
00002D50                          2317  DECODE_ANDL_DNTOEA
00002D50  43F9 00004129           2318      LEA     DISPLAY_ANDL, A1
00002D56  103C 000E               2319      MOVE.B  #14, D0
00002D5A  4E4F                    2320      TRAP    #15
00002D5C  13FC 0001 00006066      2321      MOVE.B  #1, IS_ANDL                 Flag set to true for when decoding RHS
00002D64  13FC 0001 00006036      2322      MOVE.B  #1, IS_LONG
00002D6C                          2323      
00002D6C                          2324  DECODE_AND_DNTOEA   
00002D6C  13FC 0001 00006100      2325      MOVE.B  #1, IS_DNTOEA
00002D74  4EF9 000032F8           2326      JMP     DECODE_ADD_DATA_REG_LHS
00002D7A  4EF8 1222               2327      JMP     PRINT_LOGIC
00002D7E                          2328  DECODE_SUBIB
00002D7E  43F9 000040E5           2329      LEA     DISPLAY_SUBIB, A1
00002D84  103C 000E               2330      MOVE.B  #14, D0
00002D88  4E4F                    2331      TRAP    #15
00002D8A  13FC 0001 00006034      2332      MOVE.B  #1, IS_WORD
00002D92  6000 002E               2333      BRA     DECODE_SUBI
00002D96                          2334  
00002D96                          2335  DECODE_SUBIW
00002D96  43F9 000040F3           2336      LEA     DISPLAY_SUBIW, A1
00002D9C  103C 000E               2337      MOVE.B  #14, D0
00002DA0  4E4F                    2338      TRAP    #15
00002DA2  13FC 0001 00006034      2339      MOVE.B  #1, IS_WORD                 Flag set to true for when decoding IMDATA_W
00002DAA  6000 0016               2340      BRA     DECODE_SUBI
00002DAE                          2341      
00002DAE                          2342  DECODE_SUBIL
00002DAE  43F9 00004101           2343      LEA     DISPLAY_SUBIL, A1
00002DB4  103C 000E               2344      MOVE.B  #14, D0
00002DB8  4E4F                    2345      TRAP    #15
00002DBA  13FC 0001 00006036      2346      MOVE.B  #1, IS_LONG                 Flag set to true for when decoding IMDATA_L
00002DC2                          2347  
00002DC2                          2348  DECODE_SUBI 
00002DC2  13FC 0001 00006068      2349      MOVE.B  #1, IS_SUBI                 Flag set to true for when decoding RHS
00002DCA  4EF9 00003228           2350      JMP     DECODE_IMDATA_LHS
00002DD0  4EF8 1222               2351      JMP     PRINT_LOGIC
00002DD4                          2352  DECODE_SUBB_DNTOEA 
00002DD4  43F9 00004199           2353      LEA     DISPLAY_SUBB, A1
00002DDA  103C 000E               2354      MOVE.B  #14, D0
00002DDE  4E4F                    2355      TRAP    #15
00002DE0  13FC 0001 00006070      2356      MOVE.B  #1, IS_SUBB
00002DE8  13FC 0001 00006032      2357      MOVE.B  #1, IS_BYTE
00002DF0  13FC 0001 00006034      2358      MOVE.B  #1, IS_WORD
00002DF8  6000 003E               2359      BRA     DECODE_SUB_DNTOEA 
00002DFC                          2360      
00002DFC                          2361  DECODE_SUBW_DNTOEA 
00002DFC  43F9 000041A6           2362      LEA     DISPLAY_SUBW, A1
00002E02  103C 000E               2363      MOVE.B  #14, D0
00002E06  4E4F                    2364      TRAP    #15
00002E08  13FC 0001 00006072      2365      MOVE.B  #1, IS_SUBW
00002E10  13FC 0001 00006034      2366      MOVE.B  #1, IS_WORD
00002E18  6000 001E               2367      BRA     DECODE_SUB_DNTOEA 
00002E1C                          2368      
00002E1C                          2369  DECODE_SUBL_DNTOEA 
00002E1C  43F9 000041B3           2370      LEA     DISPLAY_SUBL, A1
00002E22  103C 000E               2371      MOVE.B  #14, D0
00002E26  4E4F                    2372      TRAP    #15
00002E28  13FC 0001 00006074      2373      MOVE.B  #1, IS_SUBL
00002E30  13FC 0001 00006036      2374      MOVE.B  #1, IS_LONG 
00002E38                          2375      
00002E38                          2376  DECODE_SUB_DNTOEA
00002E38  13FC 0001 00006100      2377      MOVE.B  #1, IS_DNTOEA
00002E40  4EF9 000032F8           2378      JMP     DECODE_ADD_DATA_REG_LHS
00002E46  4EF8 1222               2379      JMP     PRINT_LOGIC
00002E4A                          2380  DECODE_SUBB_EATODN
00002E4A  43F9 00004199           2381      LEA     DISPLAY_SUBB, A1
00002E50  103C 000E               2382      MOVE.B  #14, D0
00002E54  4E4F                    2383      TRAP    #15
00002E56  13FC 0001 00006070      2384      MOVE.B  #1, IS_SUBB                 Flag set to true for when decoding RHS
00002E5E  13FC 0001 00006032      2385      MOVE.B  #1, IS_BYTE
00002E66  13FC 0001 00006034      2386      MOVE.B  #1, IS_WORD
00002E6E  6000 003E               2387      BRA     DECODE_SUB_EATODN
00002E72                          2388      
00002E72                          2389  DECODE_SUBW_EATODN
00002E72  43F9 000041A6           2390      LEA     DISPLAY_SUBW, A1
00002E78  103C 000E               2391      MOVE.B  #14, D0
00002E7C  4E4F                    2392      TRAP    #15
00002E7E  13FC 0001 00006072      2393      MOVE.B  #1, IS_SUBW                 Flag set to true for when decoding RHS
00002E86  13FC 0001 00006034      2394      MOVE.B  #1, IS_WORD
00002E8E  6000 001E               2395      BRA     DECODE_SUB_EATODN
00002E92                          2396      
00002E92                          2397  DECODE_SUBL_EATODN
00002E92  43F9 000041B3           2398      LEA     DISPLAY_SUBL, A1
00002E98  103C 000E               2399      MOVE.B  #14, D0
00002E9C  4E4F                    2400      TRAP    #15
00002E9E  13FC 0001 00006074      2401      MOVE.B  #1, IS_SUBL                 Flag set to true for when decoding RHS
00002EA6  13FC 0001 00006036      2402      MOVE.B  #1, IS_LONG
00002EAE                          2403      
00002EAE                          2404  DECODE_SUB_EATODN   
00002EAE  13FC 0001 00006102      2405      MOVE.B  #1, IS_EATODN
00002EB6  4EB8 21B8               2406      JSR     GET_EAMODE_BITS
00002EBA  B43C 0000               2407      CMP.B   #0, D2
00002EBE  6700 0480               2408      BEQ     DECODE_DATA_REG_LHS
00002EC2  0C39 0001 00006032      2409      CMP.B   #1, IS_BYTE
00002ECA  6700 000A               2410      BEQ     SKIP_AN_SUB                 Addr register not allowed for byte-ops
00002ECE  B43C 0001               2411      CMP.B   #1, D2
00002ED2  6700 04B4               2412      BEQ     DECODE_ADDR_REG_LHS
00002ED6                          2413      
00002ED6                          2414  SKIP_AN_SUB
00002ED6  B43C 0002               2415      CMP.B   #2, D2
00002EDA  6700 04F4               2416      BEQ     DECODE_ADDRP_REG_LHS
00002EDE  B43C 0003               2417      CMP.B   #3, D2
00002EE2  6700 0534               2418      BEQ     DECODE_ADDRPLUS_REG_LHS
00002EE6  B43C 0004               2419      CMP.B   #4, D2
00002EEA  6700 0574               2420      BEQ     DECODE_MINUSADDR_REG_LHS
00002EEE  B43C 0007               2421      CMP.B   #7, D2
00002EF2  6700 05B4               2422      BEQ     DECODE_EA_REG_LHS
00002EF6  4EF8 1222               2423      JMP     PRINT_LOGIC
00002EFA                          2424  DECODE_DATA_REG_RHS
00002EFA  4EB8 2188               2425      JSR     GET_REGISTER_BITS
00002EFE  B43C 0000               2426      CMP.B   #0, D2
00002F02  6700 E84A               2427      BEQ     PRINT_D0_RHS
00002F06  B43C 0001               2428      CMP.B   #1, D2
00002F0A  6700 E856               2429      BEQ     PRINT_D1_RHS
00002F0E  B43C 0002               2430      CMP.B   #2, D2
00002F12  6700 E862               2431      BEQ     PRINT_D2_RHS
00002F16  B43C 0003               2432      CMP.B   #3, D2
00002F1A  6700 E86E               2433      BEQ     PRINT_D3_RHS
00002F1E  B43C 0004               2434      CMP.B   #4, D2
00002F22  6700 E87A               2435      BEQ     PRINT_D4_RHS
00002F26  B43C 0005               2436      CMP.B   #5, D2
00002F2A  6700 E886               2437      BEQ     PRINT_D5_RHS
00002F2E  B43C 0006               2438      CMP.B   #6, D2
00002F32  6700 E892               2439      BEQ     PRINT_D6_RHS
00002F36  B43C 0007               2440      CMP.B   #7, D2
00002F3A  6700 E89E               2441      BEQ     PRINT_D7_RHS
00002F3E  4EF8 1222               2442      JMP     PRINT_LOGIC 
00002F42                          2443  DECODE_DATA_REG_RHS_BITS_0TO2
00002F42  4EB8 2198               2444      JSR     GET_REGISTER_BITS_0TO2
00002F46  B43C 0000               2445      CMP.B   #0, D2
00002F4A  6700 E802               2446      BEQ     PRINT_D0_RHS
00002F4E  B43C 0001               2447      CMP.B   #1, D2
00002F52  6700 E80E               2448      BEQ     PRINT_D1_RHS
00002F56  B43C 0002               2449      CMP.B   #2, D2
00002F5A  6700 E81A               2450      BEQ     PRINT_D2_RHS
00002F5E  B43C 0003               2451      CMP.B   #3, D2
00002F62  6700 E826               2452      BEQ     PRINT_D3_RHS
00002F66  B43C 0004               2453      CMP.B   #4, D2
00002F6A  6700 E832               2454      BEQ     PRINT_D4_RHS
00002F6E  B43C 0005               2455      CMP.B   #5, D2
00002F72  6700 E83E               2456      BEQ     PRINT_D5_RHS
00002F76  B43C 0006               2457      CMP.B   #6, D2
00002F7A  6700 E84A               2458      BEQ     PRINT_D6_RHS
00002F7E  B43C 0007               2459      CMP.B   #7, D2
00002F82  6700 E856               2460      BEQ     PRINT_D7_RHS
00002F86  4EF8 1222               2461      JMP     PRINT_LOGIC 
00002F8A                          2462  DECODE_ADDR_REG_RHS
00002F8A  4EB8 2188               2463      JSR     GET_REGISTER_BITS
00002F8E  B43C 0000               2464      CMP.B   #0, D2
00002F92  6700 E85A               2465      BEQ     PRINT_A0_RHS
00002F96  B43C 0001               2466      CMP.B   #1, D2
00002F9A  6700 E866               2467      BEQ     PRINT_A1_RHS
00002F9E  B43C 0002               2468      CMP.B   #2, D2
00002FA2  6700 E872               2469      BEQ     PRINT_A2_RHS
00002FA6  B43C 0003               2470      CMP.B   #3, D2
00002FAA  6700 E87E               2471      BEQ     PRINT_A3_RHS
00002FAE  B43C 0004               2472      CMP.B   #4, D2
00002FB2  6700 E88A               2473      BEQ     PRINT_A4_RHS
00002FB6  B43C 0005               2474      CMP.B   #5, D2
00002FBA  6700 E896               2475      BEQ     PRINT_A5_RHS
00002FBE  B43C 0006               2476      CMP.B   #6, D2
00002FC2  6700 E8A2               2477      BEQ     PRINT_A6_RHS
00002FC6  B43C 0007               2478      CMP.B   #7, D2
00002FCA  6700 E8AE               2479      BEQ     PRINT_A7_RHS
00002FCE  4EF8 1222               2480      JMP     PRINT_LOGIC
00002FD2                          2481  DECODE_ADDRP_REG_RHS
00002FD2  4EB8 2188               2482      JSR     GET_REGISTER_BITS
00002FD6  B43C 0000               2483      CMP.B   #0, D2
00002FDA  6700 E8B2               2484      BEQ     PRINT_A0_P_RHS
00002FDE  B43C 0001               2485      CMP.B   #1, D2
00002FE2  6700 E8BE               2486      BEQ     PRINT_A1_P_RHS
00002FE6  B43C 0002               2487      CMP.B   #2, D2
00002FEA  6700 E8CA               2488      BEQ     PRINT_A2_P_RHS
00002FEE  B43C 0003               2489      CMP.B   #3, D2
00002FF2  6700 E8D6               2490      BEQ     PRINT_A3_P_RHS
00002FF6  B43C 0004               2491      CMP.B   #4, D2
00002FFA  6700 E8E2               2492      BEQ     PRINT_A4_P_RHS
00002FFE  B43C 0005               2493      CMP.B   #5, D2
00003002  6700 E8EE               2494      BEQ     PRINT_A5_P_RHS
00003006  B43C 0006               2495      CMP.B   #6, D2
0000300A  6700 E8FA               2496      BEQ     PRINT_A6_P_RHS
0000300E  B43C 0007               2497      CMP.B   #7, D2
00003012  6700 E906               2498      BEQ     PRINT_A7_P_RHS
00003016  4EF8 1222               2499      JMP     PRINT_LOGIC
0000301A                          2500  ADDRP_REG_END
0000301A  4EF8 1222               2501      JMP     PRINT_LOGIC 
0000301E                          2502  DECODE_ADDRPLUS_REG_RHS
0000301E  4EB8 2188               2503      JSR     GET_REGISTER_BITS
00003022  B43C 0000               2504      CMP.B   #0, D2
00003026  6700 E906               2505      BEQ     PRINT_A0_PP_RHS
0000302A  B43C 0001               2506      CMP.B   #1, D2
0000302E  6700 E912               2507      BEQ     PRINT_A1_PP_RHS
00003032  B43C 0002               2508      CMP.B   #2, D2
00003036  6700 E91E               2509      BEQ     PRINT_A2_PP_RHS
0000303A  B43C 0003               2510      CMP.B   #3, D2
0000303E  6700 E92A               2511      BEQ     PRINT_A3_PP_RHS
00003042  B43C 0004               2512      CMP.B   #4, D2
00003046  6700 E936               2513      BEQ     PRINT_A4_PP_RHS
0000304A  B43C 0005               2514      CMP.B   #5, D2
0000304E  6700 E942               2515      BEQ     PRINT_A5_PP_RHS
00003052  B43C 0006               2516      CMP.B   #6, D2
00003056  6700 E94E               2517      BEQ     PRINT_A6_PP_RHS
0000305A  B43C 0007               2518      CMP.B   #7, D2
0000305E  6700 E95A               2519      BEQ     PRINT_A7_PP_RHS
00003062  4EF8 1222               2520      JMP     PRINT_LOGIC
00003066                          2521  DECODE_ADDRPLUS_END
00003066  4EF8 1222               2522      JMP     PRINT_LOGIC 
0000306A                          2523  DECODE_MINUSADDR_REG_RHS
0000306A  4EB8 2188               2524      JSR     GET_REGISTER_BITS
0000306E  B43C 0000               2525      CMP.B   #0, D2
00003072  6700 E95A               2526      BEQ     PRINT_A0_PM_RHS
00003076  B43C 0001               2527      CMP.B   #1, D2
0000307A  6700 E966               2528      BEQ     PRINT_A1_PM_RHS
0000307E  B43C 0002               2529      CMP.B   #2, D2
00003082  6700 E972               2530      BEQ     PRINT_A2_PM_RHS
00003086  B43C 0003               2531      CMP.B   #3, D2
0000308A  6700 E97E               2532      BEQ     PRINT_A3_PM_RHS
0000308E  B43C 0004               2533      CMP.B   #4, D2
00003092  6700 E98A               2534      BEQ     PRINT_A4_PM_RHS
00003096  B43C 0005               2535      CMP.B   #5, D2
0000309A  6700 E996               2536      BEQ     PRINT_A5_PM_RHS
0000309E  B43C 0006               2537      CMP.B   #6, D2
000030A2  6700 E9A2               2538      BEQ     PRINT_A6_PM_RHS
000030A6  B43C 0007               2539      CMP.B   #7, D2
000030AA  6700 E9AE               2540      BEQ     PRINT_A7_PM_RHS
000030AE  4EF8 1222               2541      JMP     PRINT_LOGIC
000030B2                          2542  MINUSADDR_REG_END
000030B2  4EF8 1222               2543      JMP     PRINT_LOGIC 
000030B6                          2544  DECODE_EA_REG_RHS
000030B6  4EB8 2188               2545      JSR     GET_REGISTER_BITS
000030BA  B43C 0000               2546      CMP.B   #0, D2                      (xxxx).W
000030BE  6700 000E               2547      BEQ     DECODE_EA_WORD_RHS
000030C2  B43C 0001               2548      CMP.B   #1, D2                      (xxxx).L
000030C6  6700 005C               2549      BEQ     DECODE_EA_LONG_RHS
000030CA                          2550  DECODE_EA_REG_END
000030CA  4EF8 1222               2551      JMP     PRINT_LOGIC
000030CE                          2552  DECODE_EA_WORD_RHS
000030CE  4EB8 15CC               2553      JSR     PRINT_DOLLAR
000030D2  4EB9 00003C14           2554      JSR     CLR_DATAREG_D6              Clear all registers before calculation
000030D8  3C1D                    2555      MOVE.W  (A5)+, D6                   Put addr1's addr into D6, to hold addr value
000030DA  143C 0001               2556      MOVE.B  #1, D2                      Counter Variable
000030DE  163C 0004               2557      MOVE.B  #4, D3                      D3 will hold starting shift value, as 4
000030E2  323C F000               2558      MOVE.W  #$F000, D1                  Move the masking value to D1
000030E6                          2559      
000030E6                          2560  EA_WORD_LOOP_RHS
000030E6  3A06                    2561      MOVE.W  D6, D5                      D5 will hold addr for manipulation
000030E8  CA41                    2562      AND.W   D1, D5                      Mask D5 with mask value
000030EA  E849                    2563      LSR.W   #4, D1                      Update the mask to next digit, by shifting 4
000030EC  E77D                    2564      ROL.W   D3, D5                      ROL once to bring MSB to LSB
000030EE  1805                    2565      MOVE.B  D5, D4                      Extract the digit
000030F0  4EB8 16D8               2566      JSR     CHECK_CONVERSION            Send the extracted digit for conversion
000030F4  33FC 0000 00006022      2567      MOVE.W  #0,(PRINT_ADDR_CHAR)        Initialize addr with a 0 for null termination
000030FC  13C4 00006022           2568      MOVE.B  D4,(PRINT_ADDR_CHAR)        Print the converted digit
00003102  43F9 00006022           2569      LEA     PRINT_ADDR_CHAR,A1          |
00003108  103C 000E               2570      MOVE.B  #14, D0                     |
0000310C  4E4F                    2571      TRAP    #15                         V
0000310E  0C02 0004               2572      CMPI.B  #4, D2                      IF counter equals terminal value
00003112  6700 0008               2573      BEQ     EXIT_EA_WORD_LOOP_RHS       Exit the loop
00003116  5803                    2574      ADDQ.B  #4, D3                      Else update shift value to next digit
00003118  5202                    2575      ADDQ.B  #1, D2                      Counter++
0000311A  60CA                    2576      BRA     EA_WORD_LOOP_RHS            Loop to start of loop
0000311C                          2577  EXIT_EA_WORD_LOOP_RHS
0000311C  4EB8 15F4               2578      JSR     CLEAR_NEXT_LINE
00003120  4EF8 1222               2579      JMP     PRINT_LOGIC
00003124                          2580  DECODE_EA_LONG_RHS
00003124  4EB8 15CC               2581      JSR     PRINT_DOLLAR
00003128  4EB9 00003C14           2582      JSR     CLR_DATAREG_D6              Clear all registers before calculation
0000312E  2C1D                    2583      MOVE.L  (A5)+, D6                   Put addr1's addr into D6, to hold addr value
00003130  143C 0001               2584      MOVE.B  #1, D2                      Counter Variable
00003134  163C 0004               2585      MOVE.B  #4, D3                      D3 will hold starting shift value, as 4
00003138  223C F0000000           2586      MOVE.L  #$F0000000, D1              Move the masking value to D1
0000313E                          2587      
0000313E                          2588  EA_LONG_LOOP_RHS
0000313E  2A06                    2589      MOVE.L  D6, D5                      D5 will hold addr for manipulation
00003140  CA81                    2590      AND.L   D1, D5                      Mask D5 with mask value
00003142  E889                    2591      LSR.L   #4, D1                      Update the mask to next digit, by shifting 4
00003144  E7BD                    2592      ROL.L   D3, D5                      ROL once to bring MSB to LSB
00003146  1805                    2593      MOVE.B  D5, D4                      Extract the digit
00003148  4EB8 16D8               2594      JSR     CHECK_CONVERSION            Send the extracted digit for conversion
0000314C  23FC 00000000 00006022  2595      MOVE.L  #0,(PRINT_ADDR_CHAR)        Initialize addr with a 0 for null termination
00003156  13C4 00006022           2596      MOVE.B  D4,(PRINT_ADDR_CHAR)        Print the converted digit
0000315C  43F9 00006022           2597      LEA     PRINT_ADDR_CHAR,A1          |
00003162  103C 000E               2598      MOVE.B  #14, D0                     |
00003166  4E4F                    2599      TRAP    #15                         V
00003168  0C02 0008               2600      CMPI.B  #8, D2                      IF counter equals terminal value
0000316C  6700 0008               2601      BEQ     EXIT_EA_LONG_LOOP_RHS       Exit the loop
00003170  5803                    2602      ADDQ.B  #4, D3                      Else update shift value to next digit
00003172  5202                    2603      ADDQ.B  #1, D2                      Counter++
00003174  60C8                    2604      BRA     EA_LONG_LOOP_RHS            Loop to start of loop
00003176                          2605  EXIT_EA_LONG_LOOP_RHS
00003176  4EB8 15F4               2606      JSR     CLEAR_NEXT_LINE
0000317A  4EF8 1222               2607      JMP     PRINT_LOGIC
0000317E                          2608  DECODE_IMDATA_RHS
0000317E  4EB8 15DA               2609      JSR     PRINT_IMDATA
00003182  4EB9 00003C14           2610      JSR     CLR_DATAREG_D6              Clear all registers before calculation
00003188  143C 0001               2611      MOVE.B  #1, D2                      Counter Variable
0000318C  163C 0004               2612      MOVE.B  #4, D3                      D3 will hold starting shift value, as 4
00003190  0C39 0001 00006036      2613      CMP.B   #1, IS_LONG                 Check to see if it is LONG IM_DATA
00003198  6700 0110               2614      BEQ     IS_LONG_IMDATA  
0000319C                          2615      
0000319C                          2616      *For when word
0000319C  323C F000               2617      MOVE.W  #$F000, D1                  Move the masking value to D1
000031A0  3C1D                    2618      MOVE.W  (A5)+, D6                   Put current addr into D6, to hold addr value
000031A2                          2619      
000031A2                          2620  IMDATA_LOOP_W_RHS
000031A2  3A06                    2621      MOVE.W  D6, D5                      D5 will hold addr for manipulation
000031A4  CA41                    2622      AND.W   D1, D5                      Mask D5 with mask value
000031A6  E849                    2623      LSR.W   #4, D1                      Update the mask to next digit, by shifting 4
000031A8  E77D                    2624      ROL.W   D3, D5                      ROL once to bring MSB to LSB
000031AA  1805                    2625      MOVE.B  D5, D4                      Extract the digit
000031AC  4EB8 16D8               2626      JSR     CHECK_CONVERSION            Send the extracted digit for conversion
000031B0  33FC 0000 00006022      2627      MOVE.W  #0,(PRINT_ADDR_CHAR)        Initialize addr with a 0 for null termination
000031B8  13C4 00006022           2628      MOVE.B  D4,(PRINT_ADDR_CHAR)        Print the converted digit
000031BE  43F9 00006022           2629      LEA     PRINT_ADDR_CHAR,A1          |
000031C4  103C 000E               2630      MOVE.B  #14, D0                     |
000031C8  4E4F                    2631      TRAP    #15                         V
000031CA  0C02 0004               2632      CMPI.B  #4, D2                      IF counter equals terminal value
000031CE  6700 0008               2633      BEQ     EXIT_IMDATA_LOOP_W_RHS      Exit the loop
000031D2  5803                    2634      ADDQ.B  #4, D3                      Else update shift value to next digit
000031D4  5202                    2635      ADDQ.B  #1, D2                      Counter++
000031D6  60CA                    2636      BRA     IMDATA_LOOP_W_RHS           Loop to start of loop
000031D8                          2637  EXIT_IMDATA_LOOP_W_RHS
000031D8  4EB8 15F4               2638      JSR     CLEAR_NEXT_LINE
000031DC  4EF8 1222               2639      JMP     PRINT_LOGIC
000031E0                          2640      
000031E0                          2641  IS_LONG_IMDATA_R
000031E0  223C F0000000           2642      MOVE.L  #$F0000000, D1              Move the masking value to D1
000031E6  2C1D                    2643      MOVE.L  (A5)+, D6                   Put current addr into D6, to hold addr value
000031E8                          2644      
000031E8                          2645  IMDATA_LOOP_L_RHS
000031E8  2A06                    2646      MOVE.L  D6, D5                      D5 will hold addr for manipulation
000031EA  CA81                    2647      AND.L   D1, D5                      Mask D5 with mask value
000031EC  E889                    2648      LSR.L   #4, D1                      Update the mask to next digit, by shifting 4
000031EE  E7BD                    2649      ROL.L   D3, D5                      ROL once to bring MSB to LSB
000031F0  1805                    2650      MOVE.B  D5, D4                      Extract the digit
000031F2  4EB8 16D8               2651      JSR     CHECK_CONVERSION            Send the extracted digit for conversion
000031F6  23FC 00000000 00006022  2652      MOVE.L  #0,(PRINT_ADDR_CHAR)        Initialize addr with a 0 for null termination
00003200  13C4 00006022           2653      MOVE.B  D4,(PRINT_ADDR_CHAR)        Print the converted digit
00003206  43F9 00006022           2654      LEA     PRINT_ADDR_CHAR,A1          |
0000320C  103C 000E               2655      MOVE.B  #14,D0                      |
00003210  4E4F                    2656      TRAP    #15                         V
00003212  0C02 0008               2657      CMPI.B  #8, D2                      IF counter equals terminal value
00003216  6700 0008               2658      BEQ     EXIT_IMDATA_LOOP_L_RHS      Exit the loop
0000321A  5803                    2659      ADDQ.B  #4, D3                      Else update shift value to next digit
0000321C  5202                    2660      ADDQ.B  #1, D2                      Counter++
0000321E  60C8                    2661      BRA     IMDATA_LOOP_L_RHS           Loop to start of loop
00003220                          2662  EXIT_IMDATA_LOOP_L_RHS
00003220  4EB8 15F4               2663      JSR     CLEAR_NEXT_LINE
00003224  4EF8 1222               2664      JMP     PRINT_LOGIC
00003228                          2665  DECODE_IMDATA_LHS
00003228  4EB8 15DA               2666      JSR     PRINT_IMDATA
0000322C  4EB9 00003C14           2667      JSR     CLR_DATAREG_D6              Clear all registers before calculation
00003232  143C 0001               2668      MOVE.B  #1, D2                      Counter Variable
00003236  163C 0004               2669      MOVE.B  #4, D3                      D3 will hold starting shift value, as 4
0000323A  0C39 0001 00006036      2670      CMP.B   #1, IS_LONG                 Check to see if it is LONG IM_DATA
00003242  6700 0066               2671      BEQ     IS_LONG_IMDATA  
00003246                          2672      
00003246                          2673      *For when word
00003246  323C F000               2674      MOVE.W  #$F000, D1                  Move the masking value to D1
0000324A  3C1D                    2675      MOVE.W  (A5)+, D6                   Put current addr into D6, to hold addr value
0000324C  6000 0018               2676      BRA     IMDATA_LOOP_W_LHS
00003250                          2677  
00003250                          2678  SET_MOVEQ_IMDATA        
00003250  0C39 0001 00006046      2679      CMP.B   #1, IS_MOVEQ                IF we get here, we are trying to print
00003258  3C02                    2680      MOVE.W  D2, D6                      8BIT DATA for MOVEQ, so we reinitialize
0000325A  143C 0001               2681      MOVE.B  #1, D2                      Counter Variable
0000325E  163C 0004               2682      MOVE.B  #4, D3                      D3 will hold starting shift value, as 4
00003262  323C F000               2683      MOVE.W  #$F000, D1                  Move the masking value to D1
00003266                          2684      
00003266                          2685  IMDATA_LOOP_W_LHS
00003266  3A06                    2686      MOVE.W  D6, D5                      D5 will hold addr for manipulation
00003268  CA41                    2687      AND.W   D1, D5                      Mask D5 with mask value
0000326A  E849                    2688      LSR.W   #4, D1                      Update the mask to next digit, by shifting 4
0000326C  E77D                    2689      ROL.W   D3, D5                      ROL once to bring MSB to LSB
0000326E  1805                    2690      MOVE.B  D5, D4                      Extract the digit
00003270  4EB8 16D8               2691      JSR     CHECK_CONVERSION            Send the extracted digit for conversion
00003274  33FC 0000 00006022      2692      MOVE.W  #0,(PRINT_ADDR_CHAR)        Initialize addr with a 0 for null termination
0000327C  13C4 00006022           2693      MOVE.B  D4,(PRINT_ADDR_CHAR)        Print the converted digit
00003282  43F9 00006022           2694      LEA     PRINT_ADDR_CHAR,A1          |
00003288  103C 000E               2695      MOVE.B  #14, D0                     |
0000328C  4E4F                    2696      TRAP    #15                         V
0000328E  0C02 0004               2697      CMPI.B  #4, D2                      IF counter equals terminal value
00003292  6700 0008               2698      BEQ     EXIT_IMDATA_LOOP_W_LHS      Exit the loop
00003296  5803                    2699      ADDQ.B  #4, D3                      Else update shift value to next digit
00003298  5202                    2700      ADDQ.B  #1, D2                      Counter++
0000329A  60CA                    2701      BRA     IMDATA_LOOP_W_LHS           Loop to start of loop
0000329C                          2702  EXIT_IMDATA_LOOP_W_LHS
0000329C  4EB8 15BE               2703      JSR     PRINT_COMMA
000032A0  4EF9 000037B6           2704      JMP     CHECK_DECODE_RHS
000032A6  4EF8 1222               2705      JMP     PRINT_LOGIC 
000032AA                          2706      
000032AA                          2707  IS_LONG_IMDATA
000032AA  223C F0000000           2708      MOVE.L  #$F0000000, D1              Move the masking value to D1
000032B0  2C1D                    2709      MOVE.L  (A5)+, D6                   Put current addr into D6, to hold addr value
000032B2                          2710      
000032B2                          2711  IMDATA_LOOP_L_LHS
000032B2  2A06                    2712      MOVE.L  D6, D5                      D5 will hold addr for manipulation
000032B4  CA81                    2713      AND.L   D1, D5                      Mask D5 with mask value
000032B6  E889                    2714      LSR.L   #4, D1                      Update the mask to next digit, by shifting 4
000032B8  E7BD                    2715      ROL.L   D3, D5                      ROL once to bring MSB to LSB
000032BA  1805                    2716      MOVE.B  D5, D4                      Extract the digit
000032BC  4EB8 16D8               2717      JSR     CHECK_CONVERSION            Send the extracted digit for conversion
000032C0  23FC 00000000 00006022  2718      MOVE.L  #0,(PRINT_ADDR_CHAR)        Initialize addr with a 0 for null termination
000032CA  13C4 00006022           2719      MOVE.B  D4,(PRINT_ADDR_CHAR)        Print the converted digit
000032D0  43F9 00006022           2720      LEA     PRINT_ADDR_CHAR,A1          |
000032D6  103C 000E               2721      MOVE.B  #14,D0                      |
000032DA  4E4F                    2722      TRAP    #15                         V
000032DC  0C02 0008               2723      CMPI.B  #8, D2                      IF counter equals terminal value
000032E0  6700 0008               2724      BEQ     EXIT_IMDATA_LOOP_L_LHS      Exit the loop
000032E4  5803                    2725      ADDQ.B  #4, D3                      Else update shift value to next digit
000032E6  5202                    2726      ADDQ.B  #1, D2                      Counter++
000032E8  60C8                    2727      BRA     IMDATA_LOOP_L_LHS           Loop to start of loop
000032EA                          2728  
000032EA                          2729  EXIT_IMDATA_LOOP_L_LHS
000032EA  4EB8 15BE               2730      JSR     PRINT_COMMA
000032EE  4EF9 000037B6           2731      JMP     CHECK_DECODE_RHS
000032F4  4EF8 1222               2732      JMP     PRINT_LOGIC
000032F8                          2733  DECODE_ADD_DATA_REG_LHS
000032F8  4EB8 2188               2734      JSR     GET_REGISTER_BITS
000032FC  B43C 0000               2735      CMP.B   #0, D2
00003300  6700 E76C               2736      BEQ     PRINT_D0_LHS
00003304  B43C 0001               2737      CMP.B   #1, D2
00003308  6700 E77E               2738      BEQ     PRINT_D1_LHS
0000330C  B43C 0002               2739      CMP.B   #2, D2
00003310  6700 E790               2740      BEQ     PRINT_D2_LHS
00003314  B43C 0003               2741      CMP.B   #3, D2
00003318  6700 E7A2               2742      BEQ     PRINT_D3_LHS
0000331C  B43C 0004               2743      CMP.B   #4, D2
00003320  6700 E7B4               2744      BEQ     PRINT_D4_LHS
00003324  B43C 0005               2745      CMP.B   #5, D2
00003328  6700 E7C6               2746      BEQ     PRINT_D5_LHS
0000332C  B43C 0006               2747      CMP.B   #6, D2
00003330  6700 E7D8               2748      BEQ     PRINT_D6_LHS
00003334  B43C 0007               2749      CMP.B   #7, D2
00003338  6700 E7EA               2750      BEQ     PRINT_D7_LHS
0000333C  4EF8 1222               2751      JMP     PRINT_LOGIC
00003340                          2752  DECODE_DATA_REG_LHS
00003340  4EB8 21C8               2753      JSR     GET_EAREG_BITS
00003344  B43C 0000               2754      CMP.B   #0, D2
00003348  6700 E724               2755      BEQ     PRINT_D0_LHS
0000334C  B43C 0001               2756      CMP.B   #1, D2
00003350  6700 E736               2757      BEQ     PRINT_D1_LHS
00003354  B43C 0002               2758      CMP.B   #2, D2
00003358  6700 E748               2759      BEQ     PRINT_D2_LHS
0000335C  B43C 0003               2760      CMP.B   #3, D2
00003360  6700 E75A               2761      BEQ     PRINT_D3_LHS
00003364  B43C 0004               2762      CMP.B   #4, D2
00003368  6700 E76C               2763      BEQ     PRINT_D4_LHS
0000336C  B43C 0005               2764      CMP.B   #5, D2
00003370  6700 E77E               2765      BEQ     PRINT_D5_LHS
00003374  B43C 0006               2766      CMP.B   #6, D2
00003378  6700 E790               2767      BEQ     PRINT_D6_LHS
0000337C  B43C 0007               2768      CMP.B   #7, D2
00003380  6700 E7A2               2769      BEQ     PRINT_D7_LHS
00003384  4EF8 1222               2770      JMP     PRINT_LOGIC
00003388                          2771  DECODE_ADDR_REG_LHS
00003388  4EB8 21C8               2772      JSR     GET_EAREG_BITS
0000338C  B43C 0000               2773      CMP.B   #0, D2
00003390  6700 E7AC               2774      BEQ     PRINT_A0_LHS
00003394  B43C 0001               2775      CMP.B   #1, D2
00003398  6700 E7BE               2776      BEQ     PRINT_A1_LHS
0000339C  B43C 0002               2777      CMP.B   #2, D2
000033A0  6700 E7D0               2778      BEQ     PRINT_A2_LHS
000033A4  B43C 0003               2779      CMP.B   #3, D2
000033A8  6700 E7E2               2780      BEQ     PRINT_A3_LHS
000033AC  B43C 0004               2781      CMP.B   #4, D2
000033B0  6700 E7F4               2782      BEQ     PRINT_A4_LHS
000033B4  B43C 0005               2783      CMP.B   #5, D2
000033B8  6700 E806               2784      BEQ     PRINT_A5_LHS
000033BC  B43C 0006               2785      CMP.B   #6, D2
000033C0  6700 E818               2786      BEQ     PRINT_A6_LHS
000033C4  B43C 0007               2787      CMP.B   #7, D2
000033C8  6700 E82A               2788      BEQ     PRINT_A7_LHS
000033CC  4EF8 1222               2789      JMP     PRINT_LOGIC 
000033D0                          2790  DECODE_ADDRP_REG_LHS
000033D0  4EB8 21C8               2791      JSR     GET_EAREG_BITS
000033D4  B43C 0000               2792      CMP.B   #0, D2
000033D8  6700 E834               2793      BEQ     PRINT_A0_P_LHS
000033DC  B43C 0001               2794      CMP.B   #1, D2
000033E0  6700 E846               2795      BEQ     PRINT_A1_P_LHS
000033E4  B43C 0002               2796      CMP.B   #2, D2
000033E8  6700 E858               2797      BEQ     PRINT_A2_P_LHS
000033EC  B43C 0003               2798      CMP.B   #3, D2
000033F0  6700 E86A               2799      BEQ     PRINT_A3_P_LHS
000033F4  B43C 0004               2800      CMP.B   #4, D2
000033F8  6700 E87C               2801      BEQ     PRINT_A4_P_LHS
000033FC  B43C 0005               2802      CMP.B   #5, D2
00003400  6700 E88E               2803      BEQ     PRINT_A5_P_LHS
00003404  B43C 0006               2804      CMP.B   #6, D2
00003408  6700 E8A0               2805      BEQ     PRINT_A6_P_LHS
0000340C  B43C 0007               2806      CMP.B   #7, D2
00003410  6700 E8B2               2807      BEQ     PRINT_A7_P_LHS
00003414  4EF8 1222               2808      JMP     PRINT_LOGIC
00003418                          2809  DECODE_ADDRPLUS_REG_LHS
00003418  4EB8 21C8               2810      JSR     GET_EAREG_BITS
0000341C  B43C 0000               2811      CMP.B   #0, D2
00003420  6700 E8BC               2812      BEQ     PRINT_A0_PP_LHS
00003424  B43C 0001               2813      CMP.B   #1, D2
00003428  6700 E8CE               2814      BEQ     PRINT_A1_PP_LHS
0000342C  B43C 0002               2815      CMP.B   #2, D2
00003430  6700 E8E0               2816      BEQ     PRINT_A2_PP_LHS
00003434  B43C 0003               2817      CMP.B   #3, D2
00003438  6700 E8F2               2818      BEQ     PRINT_A3_PP_LHS
0000343C  B43C 0004               2819      CMP.B   #4, D2
00003440  6700 E904               2820      BEQ     PRINT_A4_PP_LHS
00003444  B43C 0005               2821      CMP.B   #5, D2
00003448  6700 E916               2822      BEQ     PRINT_A5_PP_LHS
0000344C  B43C 0006               2823      CMP.B   #6, D2
00003450  6700 E928               2824      BEQ     PRINT_A6_PP_LHS
00003454  B43C 0007               2825      CMP.B   #7, D2
00003458  6700 E93A               2826      BEQ     PRINT_A7_PP_LHS
0000345C  4EF8 1222               2827      JMP     PRINT_LOGIC 
00003460                          2828  DECODE_MINUSADDR_REG_LHS
00003460  4EB8 21C8               2829      JSR     GET_EAREG_BITS
00003464  B43C 0000               2830      CMP.B   #0, D2
00003468  6700 E944               2831      BEQ     PRINT_A0_PM_LHS
0000346C  B43C 0001               2832      CMP.B   #1, D2
00003470  6700 E956               2833      BEQ     PRINT_A1_PM_LHS
00003474  B43C 0002               2834      CMP.B   #2, D2
00003478  6700 E968               2835      BEQ     PRINT_A2_PM_LHS
0000347C  B43C 0003               2836      CMP.B   #3, D2
00003480  6700 E97A               2837      BEQ     PRINT_A3_PM_LHS
00003484  B43C 0004               2838      CMP.B   #4, D2
00003488  6700 E98C               2839      BEQ     PRINT_A4_PM_LHS
0000348C  B43C 0005               2840      CMP.B   #5, D2
00003490  6700 E99E               2841      BEQ     PRINT_A5_PM_LHS
00003494  B43C 0006               2842      CMP.B   #6, D2
00003498  6700 E9B0               2843      BEQ     PRINT_A6_PM_LHS
0000349C  B43C 0007               2844      CMP.B   #7, D2
000034A0  6700 E9C2               2845      BEQ     PRINT_A7_PM_LHS
000034A4  4EF8 1222               2846      JMP     PRINT_LOGIC
000034A8                          2847  DECODE_EA_REG_LHS
000034A8  4EB8 21C8               2848      JSR     GET_EAREG_BITS
000034AC  B43C 0000               2849      CMP.B   #0, D2                      (xxxx).W
000034B0  6700 0016               2850      BEQ     DECODE_EA_WORD_LHS
000034B4  B43C 0001               2851      CMP.B   #1, D2                      (xxxx).L
000034B8  6700 006A               2852      BEQ     DECODE_EA_LONG_LHS
000034BC  B43C 0004               2853      CMP.B   #4, D2                      #DATA
000034C0  6700 FD66               2854      BEQ     DECODE_IMDATA_LHS
000034C4  4EF8 1222               2855      JMP     PRINT_LOGIC
000034C8                          2856  DECODE_EA_WORD_LHS
000034C8  4EB8 15CC               2857      JSR     PRINT_DOLLAR
000034CC  4EB9 00003C14           2858      JSR     CLR_DATAREG_D6              Clear all registers before calculation
000034D2  3C1D                    2859      MOVE.W  (A5)+,D6                    Put addr1's addr into D6, to hold addr value
000034D4  143C 0001               2860      MOVE.B  #1, D2                      Counter Variable
000034D8  163C 0004               2861      MOVE.B  #4, D3                      D3 will hold starting shift value, as 4
000034DC  323C F000               2862      MOVE.W  #$F000, D1                  Move the masking value to D1
000034E0                          2863      
000034E0                          2864  EA_WORD_LOOP_LHS
000034E0  3A06                    2865      MOVE.W  D6, D5                      D5 will hold addr for manipulation
000034E2  CA41                    2866      AND.W   D1, D5                      Mask D5 with mask value
000034E4  E849                    2867      LSR.W   #4, D1                      Update the mask to next digit, by shifting 4
000034E6  E77D                    2868      ROL.W   D3, D5                      ROL once to bring MSB to LSB
000034E8  1805                    2869      MOVE.B  D5, D4                      Extract the digit
000034EA  4EB8 16D8               2870      JSR     CHECK_CONVERSION            Send the extracted digit for conversion
000034EE  33FC 0000 00006022      2871      MOVE.W  #0,(PRINT_ADDR_CHAR)        Initialize addr with a 0 for null termination
000034F6  13C4 00006022           2872      MOVE.B  D4,(PRINT_ADDR_CHAR)        Print the converted digit
000034FC  43F9 00006022           2873      LEA     PRINT_ADDR_CHAR, A1         |
00003502  103C 000E               2874      MOVE.B  #14, D0                     |
00003506  4E4F                    2875      TRAP    #15                         V
00003508  0C02 0004               2876      CMPI.B  #4, D2                      IF counter equals terminal value
0000350C  6700 0008               2877      BEQ     EXIT_EA_WORD_LOOP_LHS       Exit the loop
00003510  5803                    2878      ADDQ.B  #4, D3                      Else update shift value to next digit
00003512  5202                    2879      ADDQ.B  #1, D2                      Counter++
00003514  60CA                    2880      BRA     EA_WORD_LOOP_LHS            Loop to start of loop
00003516                          2881  EXIT_EA_WORD_LOOP_LHS
00003516  4EB8 15BE               2882      JSR     PRINT_COMMA
0000351A  4EF9 000037B6           2883      JMP     CHECK_DECODE_RHS
00003520  4EF8 1222               2884      JMP     PRINT_LOGIC
00003524                          2885  DECODE_EA_LONG_LHS
00003524  4EB8 15CC               2886      JSR     PRINT_DOLLAR
00003528  4EB9 00003C14           2887      JSR     CLR_DATAREG_D6              Clear all registers before calculation
0000352E  2C1D                    2888      MOVE.L  (A5)+, D6                   Put addr1's addr into D6, to hold addr value
00003530  143C 0001               2889      MOVE.B  #1, D2                      Counter Variable
00003534  163C 0004               2890      MOVE.B  #4, D3                      D3 will hold starting shift value, as 4
00003538  223C F0000000           2891      MOVE.L  #$F0000000, D1              Move the masking value to D1
0000353E                          2892      
0000353E                          2893  EA_LONG_LOOP_LHS
0000353E  2A06                    2894      MOVE.L  D6, D5                      D5 will hold addr for manipulation
00003540  CA81                    2895      AND.L   D1, D5                      Mask D5 with mask value
00003542  E889                    2896      LSR.L   #4, D1                      Update the mask to next digit, by shifting 4
00003544  E7BD                    2897      ROL.L   D3, D5                      ROL once to bring MSB to LSB
00003546  1805                    2898      MOVE.B  D5, D4                      Extract the digit
00003548  4EB8 16D8               2899      JSR     CHECK_CONVERSION            Send the extracted digit for conversion
0000354C  23FC 00000000 00006022  2900      MOVE.L  #0,(PRINT_ADDR_CHAR)        Initialize addr with a 0 for null termination
00003556  13C4 00006022           2901      MOVE.B  D4,(PRINT_ADDR_CHAR)        Print the converted digit
0000355C  43F9 00006022           2902      LEA     PRINT_ADDR_CHAR,A1          |
00003562  103C 000E               2903      MOVE.B  #14, D0                     |
00003566  4E4F                    2904      TRAP    #15                         V
00003568  0C02 0008               2905      CMPI.B  #8, D2                      IF counter equals terminal value
0000356C  6700 0008               2906      BEQ     EXIT_EA_LONG_LOOP_LHS       Exit the loop
00003570  5803                    2907      ADDQ.B  #4, D3                      Else update shift value to next digit
00003572  5202                    2908      ADDQ.B  #1, D2                      Counter++
00003574  60C8                    2909      BRA     EA_LONG_LOOP_LHS            Loop to start of loop
00003576                          2910  EXIT_EA_LONG_LOOP_LHS
00003576  4EB8 15BE               2911      JSR     PRINT_COMMA
0000357A  4EF9 000037B6           2912      JMP     CHECK_DECODE_RHS
00003580  4EF8 1222               2913      JMP     PRINT_LOGIC
00003584                          2914  DECODE_DATA_REG_ONE_OPERAND
00003584  4EB8 21C8               2915      JSR     GET_EAREG_BITS
00003588  B43C 0000               2916      CMP.B   #0, D2
0000358C  6700 E1C0               2917      BEQ     PRINT_D0_RHS
00003590  B43C 0001               2918      CMP.B   #1, D2
00003594  6700 E1CC               2919      BEQ     PRINT_D1_RHS
00003598  B43C 0002               2920      CMP.B   #2, D2
0000359C  6700 E1D8               2921      BEQ     PRINT_D2_RHS
000035A0  B43C 0003               2922      CMP.B   #3, D2
000035A4  6700 E1E4               2923      BEQ     PRINT_D3_RHS
000035A8  B43C 0004               2924      CMP.B   #4, D2
000035AC  6700 E1F0               2925      BEQ     PRINT_D4_RHS
000035B0  B43C 0005               2926      CMP.B   #5, D2
000035B4  6700 E1FC               2927      BEQ     PRINT_D5_RHS
000035B8  B43C 0006               2928      CMP.B   #6, D2
000035BC  6700 E208               2929      BEQ     PRINT_D6_RHS
000035C0  B43C 0007               2930      CMP.B   #7, D2
000035C4  6700 E214               2931      BEQ     PRINT_D7_RHS
000035C8  4EF8 1222               2932      JMP     PRINT_LOGIC
000035CC                          2933  DECODE_ADDR_REG_ONE_OPERAND
000035CC  4EB8 21C8               2934      JSR     GET_EAREG_BITS
000035D0  B43C 0000               2935      CMP.B   #0, D2
000035D4  6700 E218               2936      BEQ     PRINT_A0_RHS
000035D8  B43C 0001               2937      CMP.B   #1, D2
000035DC  6700 E224               2938      BEQ     PRINT_A1_RHS
000035E0  B43C 0002               2939      CMP.B   #2, D2
000035E4  6700 E230               2940      BEQ     PRINT_A2_RHS
000035E8  B43C 0003               2941      CMP.B   #3, D2
000035EC  6700 E23C               2942      BEQ     PRINT_A3_RHS
000035F0  B43C 0004               2943      CMP.B   #4, D2
000035F4  6700 E248               2944      BEQ     PRINT_A4_RHS
000035F8  B43C 0005               2945      CMP.B   #5, D2
000035FC  6700 E254               2946      BEQ     PRINT_A5_RHS
00003600  B43C 0006               2947      CMP.B   #6, D2
00003604  6700 E260               2948      BEQ     PRINT_A6_RHS
00003608  B43C 0007               2949      CMP.B   #7, D2
0000360C  6700 E26C               2950      BEQ     PRINT_A7_RHS
00003610  4EF8 1222               2951      JMP     PRINT_LOGIC 
00003614                          2952  DECODE_ADDRP_REG_ONE_OPERAND
00003614  4EB8 21C8               2953      JSR     GET_EAREG_BITS
00003618  B43C 0000               2954      CMP.B   #0, D2
0000361C  6700 E270               2955      BEQ     PRINT_A0_P_RHS
00003620  B43C 0001               2956      CMP.B   #1, D2
00003624  6700 E27C               2957      BEQ     PRINT_A1_P_RHS
00003628  B43C 0002               2958      CMP.B   #2, D2
0000362C  6700 E288               2959      BEQ     PRINT_A2_P_RHS
00003630  B43C 0003               2960      CMP.B   #3, D2
00003634  6700 E294               2961      BEQ     PRINT_A3_P_RHS
00003638  B43C 0004               2962      CMP.B   #4, D2
0000363C  6700 E2A0               2963      BEQ     PRINT_A4_P_RHS
00003640  B43C 0005               2964      CMP.B   #5, D2
00003644  6700 E2AC               2965      BEQ     PRINT_A5_P_RHS
00003648  B43C 0006               2966      CMP.B   #6, D2
0000364C  6700 E2B8               2967      BEQ     PRINT_A6_P_RHS
00003650  B43C 0007               2968      CMP.B   #7, D2
00003654  6700 E2C4               2969      BEQ     PRINT_A7_P_RHS
00003658  4EF8 1222               2970      JMP     PRINT_LOGIC 
0000365C                          2971  DECODE_ADDRPLUS_REG_ONE_OPERAND
0000365C  4EB8 21C8               2972      JSR     GET_EAREG_BITS
00003660  B43C 0000               2973      CMP.B   #0, D2
00003664  6700 E2C8               2974      BEQ     PRINT_A0_PP_RHS
00003668  B43C 0001               2975      CMP.B   #1, D2
0000366C  6700 E2D4               2976      BEQ     PRINT_A1_PP_RHS
00003670  B43C 0002               2977      CMP.B   #2, D2
00003674  6700 E2E0               2978      BEQ     PRINT_A2_PP_RHS
00003678  B43C 0003               2979      CMP.B   #3, D2
0000367C  6700 E2EC               2980      BEQ     PRINT_A3_PP_RHS
00003680  B43C 0004               2981      CMP.B   #4, D2
00003684  6700 E2F8               2982      BEQ     PRINT_A4_PP_RHS
00003688  B43C 0005               2983      CMP.B   #5, D2
0000368C  6700 E304               2984      BEQ     PRINT_A5_PP_RHS
00003690  B43C 0006               2985      CMP.B   #6, D2
00003694  6700 E310               2986      BEQ     PRINT_A6_PP_RHS
00003698  B43C 0007               2987      CMP.B   #7, D2
0000369C  6700 E31C               2988      BEQ     PRINT_A7_PP_RHS
000036A0  4EF8 1222               2989      JMP     PRINT_LOGIC 
000036A4                          2990  DECODE_MINUSADDR_REG_ONE_OPERAND
000036A4  4EB8 21C8               2991      JSR     GET_EAREG_BITS
000036A8  B43C 0000               2992      CMP.B   #0, D2
000036AC  6700 E320               2993      BEQ     PRINT_A0_PM_RHS
000036B0  B43C 0001               2994      CMP.B   #1, D2
000036B4  6700 E32C               2995      BEQ     PRINT_A1_PM_RHS
000036B8  B43C 0002               2996      CMP.B   #2, D2
000036BC  6700 E338               2997      BEQ     PRINT_A2_PM_RHS
000036C0  B43C 0003               2998      CMP.B   #3, D2
000036C4  6700 E344               2999      BEQ     PRINT_A3_PM_RHS
000036C8  B43C 0004               3000      CMP.B   #4, D2
000036CC  6700 E350               3001      BEQ     PRINT_A4_PM_RHS
000036D0  B43C 0005               3002      CMP.B   #5, D2
000036D4  6700 E35C               3003      BEQ     PRINT_A5_PM_RHS
000036D8  B43C 0006               3004      CMP.B   #6, D2
000036DC  6700 E368               3005      BEQ     PRINT_A6_PM_RHS
000036E0  B43C 0007               3006      CMP.B   #7, D2
000036E4  6700 E374               3007      BEQ     PRINT_A7_PM_RHS
000036E8  4EF8 1222               3008      JMP     PRINT_LOGIC 
000036EC                          3009  DECODE_EA_REG_ONE_OPERAND
000036EC  4EB8 21C8               3010      JSR     GET_EAREG_BITS
000036F0  B43C 0000               3011      CMP.B   #0, D2                      (xxxx).W
000036F4  6700 F9D8               3012      BEQ     DECODE_EA_WORD_RHS
000036F8  B43C 0001               3013      CMP.B   #1, D2                      (xxxx).L
000036FC  6700 FA26               3014      BEQ     DECODE_EA_LONG_RHS
00003700  4EF8 1222               3015      JMP     PRINT_LOGIC
00003704                          3016  DECODE_EA_WORD_ONE_OPERAND
00003704  4EB8 15CC               3017      JSR     PRINT_DOLLAR
00003708  4EB9 00003C14           3018      JSR     CLR_DATAREG_D6              Clear all registers before calculation
0000370E  3C1D                    3019      MOVE.W  (A5)+,D6                    Put addr1's addr into D6, to hold addr value
00003710  143C 0001               3020      MOVE.B  #1, D2                      Counter Variable
00003714  163C 0004               3021      MOVE.B  #4, D3                      D3 will hold starting shift value, as 4
00003718  323C F000               3022      MOVE.W  #$F000, D1                  Move the masking value to D1
0000371C                          3023      
0000371C                          3024  EA_WORD_LOOP_ONE_OPERAND
0000371C  3A06                    3025      MOVE.W  D6, D5                      D5 will hold addr for manipulation
0000371E  CA41                    3026      AND.W   D1, D5                      Mask D5 with mask value
00003720  E849                    3027      LSR.W   #4, D1                      Update the mask to next digit, by shifting 4
00003722  E77D                    3028      ROL.W   D3, D5                      ROL once to bring MSB to LSB
00003724  1805                    3029      MOVE.B  D5, D4                      Extract the digit
00003726  4EB8 16D8               3030      JSR     CHECK_CONVERSION            Send the extracted digit for conversion
0000372A  33FC 0000 00006022      3031      MOVE.W  #0,(PRINT_ADDR_CHAR)        Initialize addr with a 0 for null termination
00003732  13C4 00006022           3032      MOVE.B  D4,(PRINT_ADDR_CHAR)        Print the converted digit
00003738  43F9 00006022           3033      LEA     PRINT_ADDR_CHAR,A1          |
0000373E  103C 000E               3034      MOVE.B  #14, D0                     |
00003742  4E4F                    3035      TRAP    #15                         V
00003744  0C02 0004               3036      CMPI.B  #4, D2                      IF counter equals terminal value, exit the loop
00003748  6700 000A               3037      BEQ     EXIT_EA_WORD_LOOP_ONE_OPERAND   
0000374C  5803                    3038      ADDQ.B  #4, D3                      Else update shift value to next digit
0000374E  5202                    3039      ADDQ.B  #1, D2                      Counter++
00003750  6000 F994               3040      BRA     EA_WORD_LOOP_RHS            Loop to start of loop
00003754                          3041  EXIT_EA_WORD_LOOP_ONE_OPERAND
00003754  4EB8 15F4               3042      JSR     CLEAR_NEXT_LINE
00003758  4EF8 1222               3043      JMP     PRINT_LOGIC
0000375C                          3044  DECODE_EA_LONG_ONE_OPERAND
0000375C  4EB8 15CC               3045      JSR     PRINT_DOLLAR
00003760  4EB9 00003C14           3046      JSR     CLR_DATAREG_D6              Clear all registers before calculation
00003766  2C1D                    3047      MOVE.L  (A5)+, D6                   Put addr1's addr into D6, to hold addr value
00003768  143C 0001               3048      MOVE.B  #1, D2                      Counter Variable
0000376C  163C 0004               3049      MOVE.B  #4, D3                      D3 will hold starting shift value, as 4
00003770  223C F0000000           3050      MOVE.L  #$F0000000, D1              Move the masking value to D1
00003776                          3051      
00003776                          3052  EA_LONG_LOOP_ONE_OPERAND
00003776  2A06                    3053      MOVE.L  D6, D5                      D5 will hold addr for manipulation
00003778  CA81                    3054      AND.L   D1, D5                      Mask D5 with mask value
0000377A  E889                    3055      LSR.L   #4, D1                      Update the mask to next digit, by shifting 4
0000377C  E7BD                    3056      ROL.L   D3, D5                      ROL once to bring MSB to LSB
0000377E  1805                    3057      MOVE.B  D5, D4                      Extract the digit
00003780  4EB8 16D8               3058      JSR     CHECK_CONVERSION            Send the extracted digit for conversion
00003784  23FC 00000000 00006022  3059      MOVE.L  #0,(PRINT_ADDR_CHAR)        Initialize addr with a 0 for null termination
0000378E  13C4 00006022           3060      MOVE.B  D4,(PRINT_ADDR_CHAR)        Print the converted digit
00003794  43F9 00006022           3061      LEA     PRINT_ADDR_CHAR,A1          |
0000379A  103C 000E               3062      MOVE.B  #14, D0                     |
0000379E  4E4F                    3063      TRAP    #15                         V
000037A0  0C02 0008               3064      CMPI.B  #8, D2                      IF counter equals terminal value, exit the loop
000037A4  6700 0008               3065      BEQ     EXIT_EA_LONG_LOOP_ONE_OPERAND
000037A8  5803                    3066      ADDQ.B  #4, D3                      Else update shift value to next digit
000037AA  5202                    3067      ADDQ.B  #1, D2                      Counter++
000037AC  60C8                    3068      BRA     EA_LONG_LOOP_ONE_OPERAND    Loop to start of loop
000037AE                          3069  EXIT_EA_LONG_LOOP_ONE_OPERAND
000037AE  4EB8 15F4               3070      JSR     CLEAR_NEXT_LINE
000037B2  4EF8 1222               3071      JMP     PRINT_LOGIC
000037B6                          3072  CHECK_DECODE_RHS
000037B6  0C39 0001 00006030      3073      CMP.B   #1, IS_CMP                  Decode RHS for CMP
000037BE  6700 00EA               3074      BEQ     CMP_RHS
000037C2  0C39 0001 00006038      3075      CMP.B   #1, IS_LEA                  Decode RHS for LEA
000037CA  6700 00E2               3076      BEQ     LEA_RHS
000037CE  0C39 0001 00006040      3077      CMP.B   #1, IS_MOVE                 Decode RHS for MOVE
000037D6  6700 00EE               3078      BEQ     MOVE_RHS        
000037DA  0C39 0001 00006046      3079      CMP.B   #1, IS_MOVEQ                Decode RHS for MOVEQ
000037E2  6700 00D6               3080      BEQ     MOVEQ_RHS
000037E6  0C39 0001 00006048      3081      CMP.B   #1, IS_MOVEM                Decode RHS for MOVEM ONLY for Mem to Reg 
000037EE  6700 00CE               3082      BEQ     MOVEM_RHS
000037F2  0C39 0001 00006042      3083      CMP.B   #1, IS_MULS                 Decode RHS for MULS
000037FA  6700 00B6               3084      BEQ     MULS_RHS
000037FE  0C39 0001 00006052      3085      CMP.B   #1, IS_ADDB                 DST for ADD excludes An, #<data>
00003806  6700 00EA               3086      BEQ     ADDB_RHS
0000380A  0C39 0001 00006058      3087      CMP.B   #1, IS_ADDW                 DST for ADD excludes #<data>
00003812  6700 0126               3088      BEQ     ADD_W_L_RHS 
00003816  0C39 0001 00006060      3089      CMP.B   #1, IS_ADDL
0000381E  6700 011A               3090      BEQ     ADD_W_L_RHS
00003822  0C39 0001 00006044      3091      CMP.B   #1, IS_DIVU                 Decode RHS for DIVS
0000382A  6700 008A               3092      BEQ     DIVU_RHS
0000382E  0C39 0001 00006056      3093      CMP.B   #1, IS_ADDI                 DST for ADD excludes An, #<data>
00003836  6700 0152               3094      BEQ     ADDI_RHS
0000383A  0C39 0001 00006054      3095      CMP.B   #1, IS_ADDA                 DST for ADD excludes An, #<data>
00003842  6700 0176               3096      BEQ     ADDA_RHS
00003846  0C39 0001 00006062      3097      CMP.B   #1, IS_ANDB                 DST for ADD excludes An, #<data>
0000384E  6700 0172               3098      BEQ     ANDB_RHS
00003852  0C39 0001 00006064      3099      CMP.B   #1, IS_ANDW                 DST for ADD excludes #<data>
0000385A  6700 01AE               3100      BEQ     AND_W_L_RHS
0000385E  0C39 0001 00006066      3101      CMP.B   #1, IS_ANDL
00003866  6700 01A2               3102      BEQ     AND_W_L_RHS
0000386A  0C39 0001 00006068      3103      CMP.B   #1, IS_SUBI                 DST for ADD excludes An, #<data>
00003872  6700 01E6               3104      BEQ     SUBI_RHS
00003876  0C39 0001 00006070      3105      CMP.B   #1, IS_SUBB                 DST for ADD excludes An, #<data>
0000387E  6700 020A               3106      BEQ     SUBB_RHS
00003882  0C39 0001 00006072      3107      CMP.B   #1, IS_SUBW                 DST for ADD excludes #<data>
0000388A  6700 0246               3108      BEQ     SUB_W_L_RHS
0000388E  0C39 0001 00006074      3109      CMP.B   #1, IS_SUBL
00003896  6700 023A               3110      BEQ     SUB_W_L_RHS
0000389A  0C39 0001 00006050      3111      CMP.B   #1, IS_STOP                 Decode RHS for STOP    
000038A2  6700 001E               3112      BEQ     STOP_RHS
000038A6  4EF8 1222               3113      JMP     PRINT_LOGIC
000038AA                          3114  DECODE_RHS
000038AA                          3115      
000038AA                          3116  CMP_RHS
000038AA  4EF8 2EFA               3117      JMP     DECODE_DATA_REG_RHS         DST for CMP is only Dn
000038AE                          3118  LEA_RHS        
000038AE  4EF8 2F8A               3119      JMP     DECODE_ADDR_REG_RHS         DST for LEA is only An
000038B2                          3120  MULS_RHS
000038B2  4EF8 2EFA               3121      JMP     DECODE_DATA_REG_RHS         DST for MULS is only Dn
000038B6                          3122  DIVU_RHS
000038B6  4EF8 2EFA               3123      JMP     DECODE_DATA_REG_RHS         DST for DIVU is only Dn
000038BA                          3124  MOVEQ_RHS
000038BA  4EF8 2EFA               3125      JMP     DECODE_DATA_REG_RHS         DST for MOVEQ is only Dn
000038BE                          3126  MOVEM_RHS   
000038BE  4EF8 2506               3127      JMP     DECODE_MOVEM_REGISTERS_RHS  DST for MOVEM (Mem to Reg)
000038C2                          3128  STOP_RHS
000038C2  4EF8 317E               3129      JMP     DECODE_IMDATA_RHS           STOP has only IM_DATA.W
000038C6                          3130  MOVE_RHS    
000038C6  4EB8 21A8               3131      JSR     GET_OPMODE_BITS             DST for MOVE is Dn/(An)/(An)+/-(An)/EA_W/L/IM_DATA
000038CA  B43C 0000               3132      CMP.B   #0, D2
000038CE  6700 F62A               3133      BEQ     DECODE_DATA_REG_RHS
000038D2  B43C 0002               3134      CMP.B   #2, D2
000038D6  6700 F6FA               3135      BEQ     DECODE_ADDRP_REG_RHS
000038DA  B43C 0003               3136      CMP.B   #3, D2
000038DE  6700 F73E               3137      BEQ     DECODE_ADDRPLUS_REG_RHS
000038E2  B43C 0004               3138      CMP.B   #4, D2
000038E6  6700 F782               3139      BEQ     DECODE_MINUSADDR_REG_RHS
000038EA  B43C 0007               3140      CMP.B   #7, D2
000038EE  6700 F7C6               3141      BEQ     DECODE_EA_REG_RHS
000038F2                          3142  
000038F2                          3143  ADDB_RHS                         
000038F2  0C39 0001 00006102      3144      CMP.B   #1, IS_EATODN
000038FA  6700 F5FE               3145      BEQ     DECODE_DATA_REG_RHS
000038FE                          3146      
000038FE  4EB8 21B8               3147      JSR     GET_EAMODE_BITS             DST for ADDB is (An)/(An)+/-(An)/EA_W/EA_L
00003902  B43C 0000               3148      CMP.B   #0, D2
00003906  6700 F5F2               3149      BEQ     DECODE_DATA_REG_RHS
0000390A  B43C 0002               3150      CMP.B   #2, D2
0000390E  6700 F6C2               3151      BEQ     DECODE_ADDRP_REG_RHS
00003912  B43C 0003               3152      CMP.B   #3, D2
00003916  6700 F706               3153      BEQ     DECODE_ADDRPLUS_REG_RHS
0000391A  B43C 0004               3154      CMP.B   #4, D2
0000391E  6700 F74A               3155      BEQ     DECODE_MINUSADDR_REG_RHS
00003922  0C39 0001 00006100      3156      CMP.B   #1, IS_DNTOEA
0000392A  6700 FDC0               3157      BEQ     DECODE_EA_REG_ONE_OPERAND
0000392E  B43C 0007               3158      CMP.B   #7, D2
00003932  6700 F782               3159      BEQ     DECODE_EA_REG_RHS           
00003936  4EF8 1222               3160      JMP     PRINT_LOGIC 
0000393A                          3161  
0000393A                          3162  ADD_W_L_RHS 
0000393A  0C39 0001 00006102      3163      CMP.B   #1, IS_EATODN
00003942  6700 F5B6               3164      BEQ     DECODE_DATA_REG_RHS
00003946                          3165      
00003946  4EB8 21B8               3166      JSR     GET_EAMODE_BITS             DST for ADD.W/ADD.L is same 
0000394A  B43C 0000               3167      CMP.B   #0, D2
0000394E  6700 F5AA               3168      BEQ     DECODE_DATA_REG_RHS
00003952  B43C 0001               3169      CMP.B   #1, D2
00003956  6700 F632               3170      BEQ     DECODE_ADDR_REG_RHS
0000395A  B43C 0002               3171      CMP.B   #2, D2
0000395E  6700 F672               3172      BEQ     DECODE_ADDRP_REG_RHS
00003962  B43C 0003               3173      CMP.B   #3, D2
00003966  6700 F6B6               3174      BEQ     DECODE_ADDRPLUS_REG_RHS
0000396A  B43C 0004               3175      CMP.B   #4, D2
0000396E  6700 F6FA               3176      BEQ     DECODE_MINUSADDR_REG_RHS
00003972  0C39 0001 00006100      3177      CMP.B   #1, IS_DNTOEA
0000397A  6700 FD70               3178      BEQ     DECODE_EA_REG_ONE_OPERAND
0000397E  B43C 0007               3179      CMP.B   #7, D2
00003982  6700 F732               3180      BEQ     DECODE_EA_REG_RHS           
00003986  4EF8 1222               3181      JMP     PRINT_LOGIC
0000398A                          3182      
0000398A                          3183  ADDI_RHS
0000398A  4EB8 21B8               3184      JSR     GET_EAMODE_BITS             DST for ADDI is Dn/(An)/(An)+/-(An)/EA_W/EA_L
0000398E  B43C 0000               3185      CMP.B   #0, D2
00003992  6700 FBF0               3186      BEQ     DECODE_DATA_REG_ONE_OPERAND
00003996  B43C 0002               3187      CMP.B   #2, D2
0000399A  6700 FC78               3188      BEQ     DECODE_ADDRP_REG_ONE_OPERAND
0000399E  B43C 0003               3189      CMP.B   #3, D2
000039A2  6700 FCB8               3190      BEQ     DECODE_ADDRPLUS_REG_ONE_OPERAND
000039A6  B43C 0004               3191      CMP.B   #4, D2
000039AA  6700 FCF8               3192      BEQ     DECODE_MINUSADDR_REG_ONE_OPERAND
000039AE  B43C 0007               3193      CMP.B   #7, D2
000039B2  6700 FD38               3194      BEQ     DECODE_EA_REG_ONE_OPERAND
000039B6  4EF8 1222               3195      JMP     PRINT_LOGIC
000039BA                          3196  
000039BA                          3197  ADDA_RHS
000039BA  4EF8 2F8A               3198      JMP     DECODE_ADDR_REG_RHS
000039BE  4EF8 1222               3199      JMP     PRINT_LOGIC
000039C2                          3200      
000039C2                          3201  ANDB_RHS                         
000039C2  0C39 0001 00006102      3202      CMP.B   #1, IS_EATODN
000039CA  6700 F52E               3203      BEQ     DECODE_DATA_REG_RHS
000039CE                          3204      
000039CE  4EB8 21B8               3205      JSR     GET_EAMODE_BITS             DST for ANDB is (An)/(An)+/-(An)/EA_W/EA_L
000039D2  B43C 0000               3206      CMP.B   #0, D2
000039D6  6700 F522               3207      BEQ     DECODE_DATA_REG_RHS
000039DA  B43C 0002               3208      CMP.B   #2, D2
000039DE  6700 F5F2               3209      BEQ     DECODE_ADDRP_REG_RHS
000039E2  B43C 0003               3210      CMP.B   #3, D2
000039E6  6700 F636               3211      BEQ     DECODE_ADDRPLUS_REG_RHS
000039EA  B43C 0004               3212      CMP.B   #4, D2
000039EE  6700 F67A               3213      BEQ     DECODE_MINUSADDR_REG_RHS
000039F2  0C39 0001 00006100      3214      CMP.B   #1, IS_DNTOEA
000039FA  6700 FCF0               3215      BEQ     DECODE_EA_REG_ONE_OPERAND
000039FE  B43C 0007               3216      CMP.B   #7, D2
00003A02  6700 F6B2               3217      BEQ     DECODE_EA_REG_RHS           
00003A06  4EF8 1222               3218      JMP     PRINT_LOGIC
00003A0A                          3219  
00003A0A                          3220  AND_W_L_RHS
00003A0A  0C39 0001 00006102      3221      CMP.B   #1, IS_EATODN
00003A12  6700 F4E6               3222      BEQ     DECODE_DATA_REG_RHS
00003A16                          3223      
00003A16  4EB8 21B8               3224      JSR     GET_EAMODE_BITS             DST for AND.W/AND.L is the same
00003A1A  B43C 0000               3225      CMP.B   #0, D2
00003A1E  6700 F4DA               3226      BEQ     DECODE_DATA_REG_RHS
00003A22  B43C 0001               3227      CMP.B   #1, D2
00003A26  6700 F562               3228      BEQ     DECODE_ADDR_REG_RHS
00003A2A  B43C 0002               3229      CMP.B   #2, D2
00003A2E  6700 F5A2               3230      BEQ     DECODE_ADDRP_REG_RHS
00003A32  B43C 0003               3231      CMP.B   #3, D2
00003A36  6700 F5E6               3232      BEQ     DECODE_ADDRPLUS_REG_RHS
00003A3A  B43C 0004               3233      CMP.B   #4, D2
00003A3E  6700 F62A               3234      BEQ     DECODE_MINUSADDR_REG_RHS
00003A42  0C39 0001 00006100      3235      CMP.B   #1, IS_DNTOEA
00003A4A  6700 FCA0               3236      BEQ     DECODE_EA_REG_ONE_OPERAND
00003A4E  B43C 0007               3237      CMP.B   #7, D2
00003A52  6700 F662               3238      BEQ     DECODE_EA_REG_RHS           
00003A56  4EF8 1222               3239      JMP     PRINT_LOGIC
00003A5A                          3240  
00003A5A                          3241  SUBI_RHS
00003A5A  4EB8 21B8               3242      JSR     GET_EAMODE_BITS             DST for ADDI is Dn/(An)/(An)+/-(An)/EA_W/EA_L
00003A5E  B43C 0000               3243      CMP.B   #0, D2
00003A62  6700 FB20               3244      BEQ     DECODE_DATA_REG_ONE_OPERAND
00003A66  B43C 0002               3245      CMP.B   #2, D2
00003A6A  6700 FBA8               3246      BEQ     DECODE_ADDRP_REG_ONE_OPERAND
00003A6E  B43C 0003               3247      CMP.B   #3, D2
00003A72  6700 FBE8               3248      BEQ     DECODE_ADDRPLUS_REG_ONE_OPERAND
00003A76  B43C 0004               3249      CMP.B   #4, D2
00003A7A  6700 FC28               3250      BEQ     DECODE_MINUSADDR_REG_ONE_OPERAND
00003A7E  B43C 0007               3251      CMP.B   #7, D2
00003A82  6700 FC68               3252      BEQ     DECODE_EA_REG_ONE_OPERAND
00003A86  4EF8 1222               3253      JMP     PRINT_LOGIC
00003A8A                          3254  
00003A8A                          3255  SUBB_RHS                         
00003A8A  0C39 0001 00006102      3256      CMP.B   #1, IS_EATODN
00003A92  6700 F466               3257      BEQ     DECODE_DATA_REG_RHS
00003A96                          3258      
00003A96  4EB8 21B8               3259      JSR     GET_EAMODE_BITS             DST for ADDB is (An)/(An)+/-(An)/EA_W/EA_L
00003A9A  B43C 0000               3260      CMP.B   #0, D2
00003A9E  6700 F45A               3261      BEQ     DECODE_DATA_REG_RHS
00003AA2  B43C 0002               3262      CMP.B   #2, D2
00003AA6  6700 F52A               3263      BEQ     DECODE_ADDRP_REG_RHS
00003AAA  B43C 0003               3264      CMP.B   #3, D2
00003AAE  6700 F56E               3265      BEQ     DECODE_ADDRPLUS_REG_RHS
00003AB2  B43C 0004               3266      CMP.B   #4, D2
00003AB6  6700 F5B2               3267      BEQ     DECODE_MINUSADDR_REG_RHS
00003ABA  0C39 0001 00006100      3268      CMP.B   #1, IS_DNTOEA
00003AC2  6700 FC28               3269      BEQ     DECODE_EA_REG_ONE_OPERAND
00003AC6  B43C 0007               3270      CMP.B   #7, D2
00003ACA  6700 F5EA               3271      BEQ     DECODE_EA_REG_RHS           
00003ACE  4EF8 1222               3272      JMP     PRINT_LOGIC
00003AD2                          3273      
00003AD2                          3274  SUB_W_L_RHS
00003AD2  0C39 0001 00006102      3275      CMP.B   #1, IS_EATODN
00003ADA  6700 F41E               3276      BEQ     DECODE_DATA_REG_RHS
00003ADE                          3277      
00003ADE  4EB8 21B8               3278      JSR     GET_EAMODE_BITS             DST for SUB.W/SUB.L is the same
00003AE2  B43C 0000               3279      CMP.B   #0, D2
00003AE6  6700 F412               3280      BEQ     DECODE_DATA_REG_RHS
00003AEA  B43C 0001               3281      CMP.B   #1, D2
00003AEE  6700 F49A               3282      BEQ     DECODE_ADDR_REG_RHS
00003AF2  B43C 0002               3283      CMP.B   #2, D2
00003AF6  6700 F4DA               3284      BEQ     DECODE_ADDRP_REG_RHS
00003AFA  B43C 0003               3285      CMP.B   #3, D2
00003AFE  6700 F51E               3286      BEQ     DECODE_ADDRPLUS_REG_RHS
00003B02  B43C 0004               3287      CMP.B   #4, D2
00003B06  6700 F562               3288      BEQ     DECODE_MINUSADDR_REG_RHS
00003B0A  0C39 0001 00006100      3289      CMP.B   #1, IS_DNTOEA
00003B12  6700 FBD8               3290      BEQ     DECODE_EA_REG_ONE_OPERAND
00003B16  B43C 0007               3291      CMP.B   #7, D2
00003B1A  6700 F59A               3292      BEQ     DECODE_EA_REG_RHS           
00003B1E  4EF8 1222               3293      JMP     PRINT_LOGIC
00003B22                          3294  INITIALIZE_VARIABLES
00003B22  13FC 0000 00006030      3295      MOVE.B  #0, IS_CMP
00003B2A  13FC 0000 00006032      3296      MOVE.B  #0, IS_BYTE
00003B32  13FC 0000 00006034      3297      MOVE.B  #0, IS_WORD
00003B3A  13FC 0000 00006036      3298      MOVE.B  #0, IS_LONG
00003B42  13FC 0000 00006038      3299      MOVE.B  #0, IS_LEA
00003B4A  13FC 0000 00006040      3300      MOVE.B  #0, IS_MOVE
00003B52  13FC 0000 00006042      3301      MOVE.B  #0, IS_MULS 
00003B5A  13FC 0000 00006044      3302      MOVE.B  #0, IS_DIVU
00003B62  13FC 0000 00006046      3303      MOVE.B  #0, IS_MOVEQ
00003B6A  13FC 0000 00006048      3304      MOVE.B  #0, IS_MOVEM
00003B72  13FC 0000 00006050      3305      MOVE.B  #0, IS_STOP
00003B7A  13FC 0000 00006052      3306      MOVE.B  #0, IS_ADDB
00003B82  13FC 0000 00006058      3307      MOVE.B  #0, IS_ADDW
00003B8A  13FC 0000 00006060      3308      MOVE.B  #0, IS_ADDL
00003B92  13FC 0000 00006056      3309      MOVE.B  #0, IS_ADDI
00003B9A  13FC 0000 00006054      3310      MOVE.B  #0, IS_ADDA
00003BA2  13FC 0000 00006062      3311      MOVE.B  #0, IS_ANDB
00003BAA  13FC 0000 00006064      3312      MOVE.B  #0, IS_ANDW
00003BB2  13FC 0000 00006066      3313      MOVE.B  #0, IS_ANDL
00003BBA  13FC 0000 00006068      3314      MOVE.B  #0, IS_SUBI
00003BC2  13FC 0000 00006070      3315      MOVE.B  #0, IS_SUBB
00003BCA  13FC 0000 00006072      3316      MOVE.B  #0, IS_SUBW
00003BD2  13FC 0000 00006074      3317      MOVE.B  #0, IS_SUBL
00003BDA  13FC 0000 00006102      3318      MOVE.B  #0, IS_EATODN
00003BE2  13FC 0000 00006100      3319      MOVE.B  #0, IS_DNTOEA
00003BEA  13FC 0000 00006076      3320      MOVE.B  #0, IS_MEM_TO_REG
00003BF2  13FC 0000 00006078      3321      MOVE.B  #0, IS_MOVEM_EA_REG
00003BFA  13FC 0000 00006080      3322      MOVE.B  #0, IS_MINUSADDR
00003C02  13FC 0000 00006082      3323      MOVE.B  #0, IS_IMMEDIATE_DATA
00003C0A  13FC 0000 00006084      3324      MOVE.B  #0, IS_LEFT
00003C12  4E75                    3325      RTS
00003C14                          3326  CLR_DATAREG_D6                    
00003C14  4280                    3327      CLR.L   D0
00003C16  4281                    3328      CLR.L   D1
00003C18  4282                    3329      CLR.L   D2
00003C1A  4283                    3330      CLR.L   D3
00003C1C  4284                    3331      CLR.L   D4
00003C1E  4285                    3332      CLR.L   D5
00003C20  4286                    3333      CLR.L   D6
00003C22  4E75                    3334      RTS
00003C24                          3335  CLR_ALL
00003C24  4280                    3336      CLR.L   D0
00003C26  4281                    3337      CLR.L   D1
00003C28  4282                    3338      CLR.L   D2
00003C2A  4283                    3339      CLR.L   D3
00003C2C  4284                    3340      CLR.L   D4
00003C2E  4285                    3341      CLR.L   D5
00003C30  4286                    3342      CLR.L   D6
00003C32  4287                    3343      CLR.L   D7
00003C34  207C 00000000           3344      MOVEA.L #0, A0
00003C3A  227C 00000000           3345      MOVEA.L #0, A1
00003C40  247C 00000000           3346      MOVEA.L #0, A2
00003C46  267C 00000000           3347      MOVEA.L #0, A3
00003C4C  287C 00000000           3348      MOVEA.L #0, A4
00003C52  2A7C 00000000           3349      MOVEA.L #0, A5
00003C58  2C7C 00000000           3350      MOVEA.L #0, A6
00003C5E  4E75                    3351      RTS
00003C60                          3352  CHECK_MODE
00003C60  BE7C 4E71               3353      CMP.W   #$4E71, D7                  NOP pass by
00003C64  6700 00AA               3354      BEQ     END_OF_CHECK
00003C68  BE7C 4E72               3355      CMP.W   #$4E72, D7                  STOP pass by
00003C6C  6700 00A2               3356      BEQ     END_OF_CHECK
00003C70  BE7C 4E75               3357      CMP.W   #$4E75, D7                  RTS pass by
00003C74  6700 009A               3358      BEQ     END_OF_CHECK
00003C78  B03C 0006               3359      CMP.B   #6, D0                      BCC pass by
00003C7C  6700 0092               3360      BEQ     END_OF_CHECK
00003C80  B03C 0007               3361      CMP.B   #7, D0                      MOVEQ pass by
00003C84  6700 008A               3362      BEQ     END_OF_CHECK
00003C88  B03C 000E               3363      CMP.B   #14, D0                     ROL/LSL/ASR pass by for now check later because of RS mode
00003C8C  6700 0082               3364      BEQ     END_OF_CHECK
00003C90  B03C 0001               3365      CMP.B   #1, D0                      MOVE.B LHS check
00003C94  6700 0012               3366      BEQ     CHECK_EA_LHS
00003C98  B03C 0002               3367      CMP.B   #2, D0                      MOVE.W LHS check
00003C9C  6700 000A               3368      BEQ     CHECK_EA_LHS
00003CA0  B03C 0003               3369      CMP.B   #3, D0                      MOVE.L LHS check
00003CA4  6600 003A               3370      BNE     CHECK_EA_RHS
00003CA8                          3371  
00003CA8                          3372  CHECK_EA_LHS
00003CA8  4EB8 21A8               3373      JSR     GET_OPMODE_BITS             Check 6th - 8th bit additional check for MOVE
00003CAC  B43C 0001               3374      CMP.B   #1, D2
00003CB0  6700 D8F8               3375      BEQ     INVALID_OP
00003CB4  B43C 0005               3376      CMP.B   #5, D2
00003CB8  6700 D8F0               3377      BEQ     INVALID_OP
00003CBC  B43C 0006               3378      CMP.B   #6, D2
00003CC0  6700 D8E8               3379      BEQ     INVALID_OP
00003CC4  B43C 0007               3380      CMP.B   #7, D2
00003CC8  6600 0016               3381      BNE     CHECK_EA_RHS
00003CCC  4EB8 2188               3382      JSR     GET_REGISTER_BITS           Check Mode %111, Reg %010 and %011
00003CD0  B43C 0002               3383      CMP.B   #2, D2
00003CD4  6700 D8D4               3384      BEQ     INVALID_OP
00003CD8  B43C 0003               3385      CMP.B   #3, D2
00003CDC  6700 D8CC               3386      BEQ     INVALID_OP
00003CE0                          3387  
00003CE0                          3388  CHECK_EA_RHS
00003CE0  4EB8 21B8               3389      JSR     GET_EAMODE_BITS             Check 3rd - 5th bit EA MODE
00003CE4  B43C 0005               3390      CMP.B   #5, D2
00003CE8  6700 D8C0               3391      BEQ     INVALID_OP
00003CEC  B43C 0006               3392      CMP.B   #6, D2
00003CF0  6700 D8B8               3393      BEQ     INVALID_OP
00003CF4  B43C 0007               3394      CMP.B   #7, D2
00003CF8  6600 0016               3395      BNE     END_OF_CHECK
00003CFC  4EB8 21C8               3396      JSR     GET_EAREG_BITS              Check Mode %111, Reg %010 and %011
00003D00  B43C 0002               3397      CMP.B   #2, D2
00003D04  6700 D8A4               3398      BEQ     INVALID_OP
00003D08  B43C 0003               3399      CMP.B   #3, D2
00003D0C  6700 D89C               3400      BEQ     INVALID_OP
00003D10                          3401      
00003D10                          3402  END_OF_CHECK
00003D10  6000 D578               3403      BRA     SAFE    
00003D14                          3404  CHECK_ROTATIONS_OPMODE_LHS
00003D14  4EB8 21B8               3405      JSR     GET_EAMODE_BITS             Check 3rd - 5th bit EA MODE
00003D18  B43C 0005               3406      CMP.B   #5, D2
00003D1C  6700 D886               3407      BEQ     INVALID_ROTATIONS_MS
00003D20  B43C 0006               3408      CMP.B   #6, D2
00003D24  6700 D87E               3409      BEQ     INVALID_ROTATIONS_MS
00003D28  6000 D86C               3410      BRA     VALID_ROTATIONS_MS
00003D28  6000 D86C               3411  -------------------- end include --------------------
00003D2C                          3412      INCLUDE 'JKR_FINAL_LOGIC_W16.X68'
00003D2C                          3413  FINAL
00003D2C  4EB8 15F4               3414      JSR     CLEAR_NEXT_LINE
00003D30  43F9 00003F03           3415      LEA     MSG_FINAL_PROMPT, A1        Load "FINAL_PROMPT" message and display
00003D36  103C 000E               3416      MOVE.B  #14, D0                     |
00003D3A  4E4F                    3417      TRAP    #15                         |
00003D3C  103C 0005               3418      MOVE.B  #5, D0                      V
00003D40  4E4F                    3419      TRAP    #15                         Read a char from the keyboard into D1.B.
00003D42                          3420      
00003D42  B23C 000D               3421      CMP.B   #13, D1                     Checking for "ENTER" as an input,
00003D46  6700 0022               3422      BEQ     BAD_SELECTION               which is a bad selection
00003D4A                          3423      
00003D4A  B23C 0059               3424      CMP.B   #YES_U, D1                  IF equal to 'Y',
00003D4E  6700 D2B0               3425      BEQ     INTRO                       Start new session
00003D52  B23C 0079               3426      CMP.B   #YES_L, D1                  IF equal to 'y',
00003D56  6700 D2A8               3427      BEQ     INTRO                       Start new session
00003D5A                          3428      
00003D5A  B23C 004E               3429      CMP.B   #NO_U, D1                   IF equal to 'N',  
00003D5E  6700 001C               3430      BEQ     END_MSG                     Display End Message                             
00003D62  B23C 006E               3431      CMP.B   #NO_L, D1                   IF equal to 'n',
00003D66  6700 0014               3432      BEQ     END_MSG                     Display End Message  
00003D6A                          3433  
00003D6A                          3434  BAD_SELECTION
00003D6A  4EB8 15F4               3435      JSR     CLEAR_NEXT_LINE
00003D6E  43F9 00003F3E           3436      LEA     MSG_INVALID_PROMPT, A1      Load and display invalid prompt message
00003D74  103C 000E               3437      MOVE.B  #14, D0                     |
00003D78  4E4F                    3438      TRAP    #15                         V
00003D7A  60B0                    3439      BRA     FINAL                       Loop back to FINAL
00003D7C                          3440      
00003D7C                          3441  END_MSG
00003D7C  4EB8 15F4               3442      JSR     CLEAR_NEXT_LINE         
00003D80  43F9 00003F28           3443      LEA     MSG_ENDPROGRAM, A1          Display End program msg
00003D86  103C 000E               3444      MOVE.B  #14, D0                     |
00003D8A  4E4F                    3445      TRAP    #15                         V
00003D8C  4EF9 000042CA           3446      JMP     END_PROGRAM                 Terminate program                   
00003D8C  4EF9 000042CA           3447  -------------------- end include --------------------
00003D92                          3448      INCLUDE 'JKR_VARS_AND_CHARS_W16.X68'
00003D92  =0000000D               3449  CR                  EQU     $0D         ASCII code for Carriage Return
00003D92  =0000000A               3450  LF                  EQU     $0A         ASCII code for Line Feed   
00003D92  =00000059               3451  YES_U               EQU     $59         ASCII code for 'Y' 
00003D92  =00000079               3452  YES_L               EQU     $79         ASCII code for 'y'
00003D92  =0000004E               3453  NO_U                EQU     $4E         ASCII code for 'N'  
00003D92  =0000006E               3454  NO_L                EQU     $6E         ASCII code for 'n'
00003D92  =00006000               3455  START_ADDRESS       EQU     $6000       Store start addr at this memory addr
00003D92  =00006010               3456  END_ADDRESS         EQU     $6010       Store end addr at this memory addr
00003D92  =00006020               3457  PRINT_COUNTER       EQU     $6020       Stores the print count
00003D92  =00006022               3458  PRINT_ADDR_CHAR     EQU     $6022       Used for displaying address 1 char at a time
00003D92  =00000001               3459  SHIFT_1_BITS        EQU     1           # bits to shift
00003D92  =00000004               3460  SHIFT_4_BITS        EQU     4           # bits to shift
00003D92  =00000005               3461  SHIFT_5_BITS        EQU     5           # bits to shift
00003D92  =00000006               3462  SHIFT_6_BITS        EQU     6           # bits to shift
00003D92  =00000007               3463  SHIFT_7_BITS        EQU     7           # bits to shift
00003D92  =00000008               3464  SHIFT_8_BITS        EQU     8           # bits to shift
00003D92  =0000000A               3465  SHIFT_10_BITS       EQU     10          # bits to shift
00003D92  =0000000B               3466  SHIFT_11_BITS       EQU     11          # bits to shift
00003D92  =0000000C               3467  SHIFT_12_BITS       EQU     12          # bits to shift
00003D92  =0000000D               3468  SHIFT_13_BITS       EQU     13          # bits to shift
00003D92  =0000000E               3469  SHIFT_14_BITS       EQU     14          # bits to shift
00003D92  =0000000F               3470  SHIFT_15_BITS       EQU     15          # bits to shift
00003D92  =00000010               3471  SHIFT_16_BITS       EQU     16          # bits to shift
00003D92  =00000004               3472  VAR_BCC             EQU     %00000100
00003D92  =0000000E               3473  VAR_BGT             EQU     %00001110
00003D92  =0000000F               3474  VAR_BLE             EQU     %00001111
00003D92  =00000008               3475  VAR_CLRB            EQU     %00001000
00003D92  =00000009               3476  VAR_CLRW            EQU     %00001001
00003D92  =0000000A               3477  VAR_CLRL            EQU     %00001010
00003D92  =00000000               3478  VAR_CMPB            EQU     %00000000
00003D92  =00000001               3479  VAR_CMPW            EQU     %00000001
00003D92  =00000002               3480  VAR_CMPL            EQU     %00000010
00003D92  =0000003A               3481  VAR_JSR             EQU     %00111010
00003D92  =00000007               3482  VAR_LEA             EQU     %00000111
00003D92  =00000002               3483  VAR_MOVEMW          EQU     %0010
00003D92  =00000003               3484  VAR_MOVEML          EQU     %0011
00003D92  =00000000               3485  VAR_ASR_RS_BITS     EQU     %0000
00003D92  =00000001               3486  VAR_LSL_RS_BITS     EQU     %0001
00003D92  =00000003               3487  VAR_ROL_RS_BITS     EQU     %0011
00003D92  =00000007               3488  VAR_MULS            EQU     %0111
00003D92  =00000003               3489  VAR_DIVU            EQU     %0011
00003D92  =00000000               3490  VAR_MOVEQ           EQU     %0000
00003D92  =00006026               3491  LOOP_COUNTER        EQU     $6026
00003D92  =00006100               3492  IS_DNTOEA           EQU     $6100
00003D92  =00006102               3493  IS_EATODN           EQU     $6102
00003D92  =00006030               3494  IS_CMP              EQU     $6030
00003D92  =00006032               3495  IS_BYTE             EQU     $6032
00003D92  =00006034               3496  IS_WORD             EQU     $6034
00003D92  =00006036               3497  IS_LONG             EQU     $6036
00003D92  =00006038               3498  IS_LEA              EQU     $6038
00003D92  =00006040               3499  IS_MOVE             EQU     $6040
00003D92  =00006042               3500  IS_MULS             EQU     $6042
00003D92  =00006044               3501  IS_DIVU             EQU     $6044
00003D92  =00006046               3502  IS_MOVEQ            EQU     $6046
00003D92  =00006048               3503  IS_MOVEM            EQU     $6048
00003D92  =00006050               3504  IS_STOP             EQU     $6050
00003D92  =00006052               3505  IS_ADDB             EQU     $6052
00003D92  =00006054               3506  IS_ADDA             EQU     $6054
00003D92  =00006056               3507  IS_ADDI             EQU     $6056
00003D92  =00006058               3508  IS_ADDW             EQU     $6058
00003D92  =00006060               3509  IS_ADDL             EQU     $6060
00003D92  =00006062               3510  IS_ANDB             EQU     $6062
00003D92  =00006064               3511  IS_ANDW             EQU     $6064
00003D92  =00006066               3512  IS_ANDL             EQU     $6066
00003D92  =00006068               3513  IS_SUBI             EQU     $6068
00003D92  =00006070               3514  IS_SUBB             EQU     $6070
00003D92  =00006072               3515  IS_SUBW             EQU     $6072
00003D92  =00006074               3516  IS_SUBL             EQU     $6074
00003D92  =00006076               3517  IS_MEM_TO_REG       EQU     $6076
00003D92  =00006078               3518  IS_MOVEM_EA_REG     EQU     $6078
00003D92  =00006080               3519  IS_MINUSADDR        EQU     $6080
00003D92  =00006082               3520  IS_IMMEDIATE_DATA   EQU     $6082
00003D92  =00006084               3521  IS_LEFT             EQU     $6084
00003D92                          3522  
00003D92  =000060A0               3523  DATA_8BITS          EQU     $60A0
00003D92                          3524  
00003D92= 20 45 6E 74 65 72 ...   3525  STARTADDRESS_PROMPT DC.B ' Enter START Address in Hex: ',0
00003DB0= 20 45 6E 74 65 72 ...   3526  ENDADDRESS_PROMPT   DC.B ' Enter END Address in Hex: ',0
00003DCC= 20 57 45 4C 43 4F ...   3527  MSG_WELCOME         DC.B ' WELCOME TO TEAM JKR PROJECT ',CR,LF,0
00003DEC= 20 49 6E 76 61 6C ...   3528  MSG_INVALID_ENTRY   DC.B ' Invalid Entry: Inupt 0-9, A-F, a-f only.',CR,LF,0
00003E18= 20 49 6E 76 61 6C ...   3529  MSG_INVALID_LENGTH  DC.B ' Invalid Length: Address length must be between 1~8 chars long. ',CR,LF,0
00003E5B= 20 49 6E 76 61 6C ...   3530  MSG_INVALID_ADDRESS DC.B ' Invalid Address: END Address can not be <= to the START address! ',CR,LF,0
00003EA0= 20 49 6E 76 61 6C ...   3531  MSG_INVALID_ODDADDR DC.B ' Invalid Address: START Adress can not be ODD! ',CR,LF,0
00003ED2= 20 56 61 6C 69 64 ...   3532  MSG_DECODE          DC.B ' Valid Addresses received, begin decompiling! ',CR,LF,0   
00003F03= 20 57 6F 75 6C 64 ...   3533  MSG_FINAL_PROMPT    DC.B ' Would you like to continue? (Y/N): ',0
00003F28= 20 50 72 6F 67 72 ...   3534  MSG_ENDPROGRAM      DC.B ' Program Terminated! ',0
00003F3E= 20 49 6E 76 61 6C ...   3535  MSG_INVALID_PROMPT  DC.B ' Invalid Selection: Enter (Y,y || N,n) only. ',CR,LF,0
00003F6E= 20 50 72 65 73 73 ...   3536  PRESS_ENTER_PROMPT  DC.B ' Press Enter to continue printing: ',0
00003F92= 20 0D 0A 00             3537  CLEAR_LINE          DC.B ' ',CR,LF,0
00003F96= 20 00                   3538  DISPLAY_SPACE       DC.B ' ',0
00003F98                          3539  
00003F98= 24 00                   3540  DISPLAY_DOLLAR      DC.B '$',0
00003F9A= 23 00                   3541  DISPLAY_HASH        DC.B '#',0
00003F9C= 2C 00                   3542  DISPLAY_COMMA       DC.B ',',0
00003F9E= 2F 00                   3543  DISPLAY_SLASH       DC.B '/',0
00003FA0                          3544  
00003FA0= 44 00                   3545  DISPLAY_D           DC.B 'D',0
00003FA2= 52 00                   3546  DISPLAY_R           DC.B 'R',0
00003FA4= 42 00                   3547  DISPLAY_B           DC.B 'B',0
00003FA6= 57 00                   3548  DISPLAY_W           DC.B 'W',0
00003FA8= 4C 00                   3549  DISPLAY_L           DC.B 'L',0
00003FAA= 2E 42 20 00             3550  DISPLAY_DOT_B       DC.B '.B ',0
00003FAE= 2E 57 20 00             3551  DISPLAY_DOT_W       DC.B '.W ',0
00003FB2= 2E 4C 20 00             3552  DISPLAY_DOT_L       DC.B '.L ',0
00003FB6                          3553  
00003FB6= 20 20 20 20 20 20 ...   3554  DISPLAY_LEA         DC.B '      LEA ',0
00003FC1= 20 20 20 20 20 20 ...   3555  DISPLAY_RTS         DC.B '      RTS ',0
00003FCC= 20 20 20 20 20 20 ...   3556  DISPLAY_JSR         DC.B '      JSR ',0
00003FD7= 20 20 20 20 20 20 ...   3557  DISPLAY_NOP         DC.B '      NOP ',0
00003FE2= 20 20 20 20 20 20 ...   3558  DISPLAY_STOP        DC.B '      STOP ',0
00003FEE= 20 20 20 20 20 20 ...   3559  DISPLAY_DATA        DC.B '      DATA ',0
00003FFA= 20 20 20 20 20 20 ...   3560  DISPLAY_CLRB        DC.B '      CLR.B ',0
00004007= 20 20 20 20 20 20 ...   3561  DISPLAY_CLRW        DC.B '      CLR.W ',0
00004014= 20 20 20 20 20 20 ...   3562  DISPLAY_CLRL        DC.B '      CLR.L ',0
00004021= 20 20 20 20 20 20 ...   3563  DISPLAY_MOVEB       DC.B '      MOVE.B ',0
0000402F= 20 20 20 20 20 20 ...   3564  DISPLAY_MOVEW       DC.B '      MOVE.W ',0
0000403D= 20 20 20 20 20 20 ...   3565  DISPLAY_MOVEL       DC.B '      MOVE.L ',0
0000404B= 20 20 20 20 20 20 ...   3566  DISPLAY_MOVEQL      DC.B '      MOVEQ.L ',0
0000405A= 20 20 20 20 20 20 ...   3567  DISPLAY_MOVEMW      DC.B '      MOVEM.W ',0
00004069= 20 20 20 20 20 20 ...   3568  DISPLAY_MOVEML      DC.B '      MOVEM.L ',0
00004078= 20 20 20 20 20 20 ...   3569  DISPLAY_ADDB        DC.B '      ADD.B ',0
00004085= 20 20 20 20 20 20 ...   3570  DISPLAY_ADDW        DC.B '      ADD.W ',0
00004092= 20 20 20 20 20 20 ...   3571  DISPLAY_ADDL        DC.B '      ADD.L ',0
0000409F= 20 20 20 20 20 20 ...   3572  DISPLAY_ADDAW       DC.B '      ADDA.W ',0
000040AD= 20 20 20 20 20 20 ...   3573  DISPLAY_ADDAL       DC.B '      ADDA.L ',0
000040BB= 20 20 20 20 20 20 ...   3574  DISPLAY_ADDIB       DC.B '      ADDI.B ',0
000040C9= 20 20 20 20 20 20 ...   3575  DISPLAY_ADDIW       DC.B '      ADDI.W ',0
000040D7= 20 20 20 20 20 20 ...   3576  DISPLAY_ADDIL       DC.B '      ADDI.L ',0
000040E5= 20 20 20 20 20 20 ...   3577  DISPLAY_SUBIB       DC.B '      SUBI.B ',0
000040F3= 20 20 20 20 20 20 ...   3578  DISPLAY_SUBIW       DC.B '      SUBI.W ',0
00004101= 20 20 20 20 20 20 ...   3579  DISPLAY_SUBIL       DC.B '      SUBI.L ',0
0000410F= 20 20 20 20 20 20 ...   3580  DISPLAY_ANDB        DC.B '      AND.B ',0
0000411C= 20 20 20 20 20 20 ...   3581  DISPLAY_ANDW        DC.B '      AND.W ',0
00004129= 20 20 20 20 20 20 ...   3582  DISPLAY_ANDL        DC.B '      AND.L ',0
00004136= 20 20 20 20 20 20 ...   3583  DISPLAY_AS          DC.B '      AS',0
0000413F= 20 20 20 20 20 20 ...   3584  DISPLAY_ASR         DC.B '      ASR ',0
0000414A= 20 20 20 20 20 20 ...   3585  DISPLAY_LS          DC.B '      LS',0
00004153= 20 20 20 20 20 20 ...   3586  DISPLAY_LSL         DC.B '      LSL ',0
0000415E= 20 20 20 20 20 20 ...   3587  DISPLAY_RO          DC.B '      RO',0
00004167= 20 20 20 20 20 20 ...   3588  DISPLAY_ROL         DC.B '      ROL ',0
00004172= 20 20 20 20 20 20 ...   3589  DISPLAY_CMPB        DC.B '      CMP.B ',0
0000417F= 20 20 20 20 20 20 ...   3590  DISPLAY_CMPW        DC.B '      CMP.W ',0
0000418C= 20 20 20 20 20 20 ...   3591  DISPLAY_CMPL        DC.B '      CMP.L ',0
00004199= 20 20 20 20 20 20 ...   3592  DISPLAY_SUBB        DC.B '      SUB.B ',0
000041A6= 20 20 20 20 20 20 ...   3593  DISPLAY_SUBW        DC.B '      SUB.W ',0
000041B3= 20 20 20 20 20 20 ...   3594  DISPLAY_SUBL        DC.B '      SUB.L ',0
000041C0= 20 20 20 20 20 20 ...   3595  DISPLAY_MULS        DC.B '      MULS.W ',0
000041CE= 20 20 20 20 20 20 ...   3596  DISPLAY_DIVU        DC.B '      DIVU.W ',0
000041DC= 20 20 20 20 20 20 ...   3597  DISPLAY_BCC         DC.B '      BCC ',0
000041E7= 20 20 20 20 20 20 ...   3598  DISPLAY_BGT         DC.B '      BGT ',0
000041F2= 20 20 20 20 20 20 ...   3599  DISPLAY_BLE         DC.B '      BLE ',0
000041FD                          3600  
000041FD= 44 30 00                3601  DISPLAY_D0          DC.B 'D0',0
00004200= 44 31 00                3602  DISPLAY_D1          DC.B 'D1',0
00004203= 44 32 00                3603  DISPLAY_D2          DC.B 'D2',0
00004206= 44 33 00                3604  DISPLAY_D3          DC.B 'D3',0
00004209= 44 34 00                3605  DISPLAY_D4          DC.B 'D4',0
0000420C= 44 35 00                3606  DISPLAY_D5          DC.B 'D5',0
0000420F= 44 36 00                3607  DISPLAY_D6          DC.B 'D6',0
00004212= 44 37 00                3608  DISPLAY_D7          DC.B 'D7',0
00004215                          3609  
00004215= 41 30 00                3610  DISPLAY_A0          DC.B 'A0',0
00004218= 41 31 00                3611  DISPLAY_A1          DC.B 'A1',0
0000421B= 41 32 00                3612  DISPLAY_A2          DC.B 'A2',0
0000421E= 41 33 00                3613  DISPLAY_A3          DC.B 'A3',0
00004221= 41 34 00                3614  DISPLAY_A4          DC.B 'A4',0
00004224= 41 35 00                3615  DISPLAY_A5          DC.B 'A5',0
00004227= 41 36 00                3616  DISPLAY_A6          DC.B 'A6',0
0000422A= 41 37 00                3617  DISPLAY_A7          DC.B 'A7',0
0000422D                          3618  
0000422D= 28 41 30 29 00          3619  DISPLAY_A0_P        DC.B '(A0)',0
00004232= 28 41 31 29 00          3620  DISPLAY_A1_P        DC.B '(A1)',0
00004237= 28 41 32 29 00          3621  DISPLAY_A2_P        DC.B '(A2)',0
0000423C= 28 41 33 29 00          3622  DISPLAY_A3_P        DC.B '(A3)',0
00004241= 28 41 34 29 00          3623  DISPLAY_A4_P        DC.B '(A4)',0
00004246= 28 41 35 29 00          3624  DISPLAY_A5_P        DC.B '(A5)',0
0000424B= 28 41 36 29 00          3625  DISPLAY_A6_P        DC.B '(A6)',0
00004250= 28 41 37 29 00          3626  DISPLAY_A7_P        DC.B '(A7)',0
00004255                          3627  
00004255= 28 41 30 29 2B 00       3628  DISPLAY_A0_PP       DC.B '(A0)+',0
0000425B= 28 41 31 29 2B 00       3629  DISPLAY_A1_PP       DC.B '(A1)+',0
00004261= 28 41 32 29 2B 00       3630  DISPLAY_A2_PP       DC.B '(A2)+',0
00004267= 28 41 33 29 2B 00       3631  DISPLAY_A3_PP       DC.B '(A3)+',0
0000426D= 28 41 34 29 2B 00       3632  DISPLAY_A4_PP       DC.B '(A4)+',0
00004273= 28 41 35 29 2B 00       3633  DISPLAY_A5_PP       DC.B '(A5)+',0
00004279= 28 41 36 29 2B 00       3634  DISPLAY_A6_PP       DC.B '(A6)+',0
0000427F= 28 41 37 29 2B 00       3635  DISPLAY_A7_PP       DC.B '(A7)+',0
00004285                          3636  
00004285= 2D 28 41 30 29 00       3637  DISPLAY_A0_PM       DC.B '-(A0)',0
0000428B= 2D 28 41 31 29 00       3638  DISPLAY_A1_PM       DC.B '-(A1)',0
00004291= 2D 28 41 32 29 00       3639  DISPLAY_A2_PM       DC.B '-(A2)',0
00004297= 2D 28 41 33 29 00       3640  DISPLAY_A3_PM       DC.B '-(A3)',0
0000429D= 2D 28 41 34 29 00       3641  DISPLAY_A4_PM       DC.B '-(A4)',0
000042A3= 2D 28 41 35 29 00       3642  DISPLAY_A5_PM       DC.B '-(A5)',0
000042A9= 2D 28 41 36 29 00       3643  DISPLAY_A6_PM       DC.B '-(A6)',0
000042AF= 2D 28 41 37 29 00       3644  DISPLAY_A7_PM       DC.B '-(A7)',0
000042B5                          3645  
000042B5= 30 00                   3646  DISPLAY_0           DC.B '0',0
000042B7= 31 00                   3647  DISPLAY_1           DC.B '1',0
000042B9= 32 00                   3648  DISPLAY_2           DC.B '2',0
000042BB= 33 00                   3649  DISPLAY_3           DC.B '3',0
000042BD= 34 00                   3650  DISPLAY_4           DC.B '4',0
000042BF= 35 00                   3651  DISPLAY_5           DC.B '5',0
000042C1= 36 00                   3652  DISPLAY_6           DC.B '6',0
000042C3= 37 00                   3653  DISPLAY_7           DC.B '7',0
000042C5= 38 00                   3654  DISPLAY_8           DC.B '8',0
000042C8                          3655  BUFFER              DS.W  1   *Buffer to ensure last line of code is even
000042CA                          3656  
000042CA                          3657  
000042CA                          3658  -------------------- end include --------------------
000042CA                          3659  END_PROGRAM
000042CA  103C 0009               3660      MOVE.B  #9,D0
000042CE  4E4F                    3661      TRAP    #15
000042D0                          3662      END     START    Final line of source code

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_RHS            39BA
ADDB_RHS            38F2
ADDI_DISP           2C06
ADDI_RHS            398A
ADDRP_REG_END       301A
ADD_DNTOEA_DISP     2BB0
ADD_W_L_RHS         393A
AFTER_SLASH_SPECIAL_CASE  2572
ANDB_RHS            39C2
AND_W_L_RHS         3A0A
ASCII_TO_HEX_E      10DE
ASCII_TO_HEX_S      10D0
BAD_SELECTION       3D6A
BUFFER              42C8
CHECK_ADDRESS_VALUE  10A2
CHECK_CONVERSION    16D8
CHECK_DECODE_RHS    37B6
CHECK_EA_LHS        3CA8
CHECK_EA_RHS        3CE0
CHECK_LCHAR_E       115A
CHECK_LCHAR_S       1118
CHECK_LCHAR_START   1112
CHECK_LEN_E         11EC
CHECK_LEN_S         11DE
CHECK_LETTER        16E6
CHECK_MODE          3C60
CHECK_NUM_E         112E
CHECK_NUM_S         10EC
CHECK_ODD_ADDR      1206
CHECK_ROTATIONS_OPMODE_LHS  3D14
CHECK_SHIFT_SIZE_RS  291E
CHECK_SLASH_CONDITION  2592
CHECK_SLASH_CONDITION_REG_TO_MEM  2544
CHECK_UCHAR_E       1144
CHECK_UCHAR_S       1102
CLEAR_LINE          3F92
CLEAR_NEXT_LINE     15F4
CLR_ALL             3C24
CLR_DATAREG         11FA
CLR_DATAREG_D6      3C14
CMP_RHS             38AA
CONTINUE_DISPLAY    166C
CONVERSION_LOOP     1632
CR                  D
DATA_8BITS          60A0
DECIPHER            1210
DECODE_ADDA         2C3C
DECODE_ADDAL        2C28
DECODE_ADDAW        2C18
DECODE_ADDB_DNTOEA  2B64
DECODE_ADDB_EATODN  2A9C
DECODE_ADDIB        2BC2
DECODE_ADDIL        2BF2
DECODE_ADDIW        2BDA
DECODE_ADDL_DNTOEA  2B94
DECODE_ADDL_EATODN  2B08
DECODE_ADDRPLUS_END  3066
DECODE_ADDRPLUS_REG_LHS  3418
DECODE_ADDRPLUS_REG_ONE_OPERAND  365C
DECODE_ADDRPLUS_REG_RHS  301E
DECODE_ADDRP_REG_LHS  33D0
DECODE_ADDRP_REG_ONE_OPERAND  3614
DECODE_ADDRP_REG_RHS  2FD2
DECODE_ADDR_REG_LHS  3388
DECODE_ADDR_REG_ONE_OPERAND  35CC
DECODE_ADDR_REG_RHS  2F8A
DECODE_ADDWL_DISP   2B2C
DECODE_ADDW_DNTOEA  2B7C
DECODE_ADDW_EATODN  2AE8
DECODE_ADD_DATA_REG_LHS  32F8
DECODE_ANDB_DNTOEA  2D10
DECODE_ANDB_EATODN  2C7C
DECODE_ANDL_DNTOEA  2D50
DECODE_ANDL_EATODN  2CBC
DECODE_ANDW_DNTOEA  2D30
DECODE_ANDW_EATODN  2C9C
DECODE_AND_DNTOEA   2D6C
DECODE_AND_EATODN   2CD8
DECODE_AS           28E2
DECODE_AS_MS        282C
DECODE_BCC          2A32
DECODE_BCC_DISPLAY  2A5E
DECODE_BGT          2A42
DECODE_BLE          2A52
DECODE_CLRB         2356
DECODE_CLRL         236A
DECODE_CLRW         2360
DECODE_CLR_DISPLAY  2370
DECODE_CMPB         23A6
DECODE_CMPL         23F4
DECODE_CMPW         23EA
DECODE_CMP_W_L_DISPLAY  2402
DECODE_DATA_REG_LHS  3340
DECODE_DATA_REG_ONE_OPERAND  3584
DECODE_DATA_REG_RHS  2EFA
DECODE_DATA_REG_RHS_BITS_0TO2  2F42
DECODE_DISPLACEMENT  2A68
DECODE_DIVU         29EE
DECODE_EA_LONG_LHS  3524
DECODE_EA_LONG_ONE_OPERAND  375C
DECODE_EA_LONG_RHS  3124
DECODE_EA_REG_END   30CA
DECODE_EA_REG_LHS   34A8
DECODE_EA_REG_ONE_OPERAND  36EC
DECODE_EA_REG_RHS   30B6
DECODE_EA_WORD_LHS  34C8
DECODE_EA_WORD_ONE_OPERAND  3704
DECODE_EA_WORD_RHS  30CE
DECODE_IMDATA_LHS   3228
DECODE_IMDATA_RHS   317E
DECODE_IMMEDIATE_NUM  295C
DECODE_IR           2942
DECODE_JSR          22F6
DECODE_LEA          231A
DECODE_LS           28EC
DECODE_LS_MS        2836
DECODE_MINUSADDR_REG_LHS  3460
DECODE_MINUSADDR_REG_ONE_OPERAND  36A4
DECODE_MINUSADDR_REG_RHS  306A
DECODE_MOVEB        276E
DECODE_MOVEL        278E
DECODE_MOVEML       245A
DECODE_MOVEMW       2448
DECODE_MOVEM_EA_LONG_LHS  26D6
DECODE_MOVEM_EA_REG  24EA
DECODE_MOVEM_EA_REG_RHS  249E
DECODE_MOVEM_EA_WORD_LHS  2654
DECODE_MOVEM_MEM_TO_REG  24C2
DECODE_MOVEM_REGISTERS_LHS  2506
DECODE_MOVEM_REGISTERS_RHS  2506
DECODE_MOVEM_REG_TO_MEM  247A
DECODE_MOVEQ        27E2
DECODE_MOVEW        277E
DECODE_MOVE_DISPLAY  27A2
DECODE_MULS         29DC
DECODE_MULS_DIVU_DISPLAY  29FC
DECODE_NOP          22C8
DECODE_REGISTER_NUM  296E
DECODE_RHS          38AA
DECODE_RO           28F6
DECODE_ROTATIONS_BYTE_RS  28A2
DECODE_ROTATIONS_LONG_RS  28BA
DECODE_ROTATIONS_MS  2804
DECODE_ROTATIONS_WORD_RS  28AE
DECODE_RO_MS        2840
DECODE_RTS          2346
DECODE_SHIFT_RS_BITS  28C2
DECODE_STOP         22D8
DECODE_SUBB_DNTOEA  2DD4
DECODE_SUBB_EATODN  2E4A
DECODE_SUBI         2DC2
DECODE_SUBIB        2D7E
DECODE_SUBIL        2DAE
DECODE_SUBIW        2D96
DECODE_SUBL_DNTOEA  2E1C
DECODE_SUBL_EATODN  2E92
DECODE_SUBW_DNTOEA  2DFC
DECODE_SUBW_EATODN  2E72
DECODE_SUB_DNTOEA   2E38
DECODE_SUB_EATODN   2EAE
DISPLACEMENT_LOOP   169C
DISPLAY_0           42B5
DISPLAY_1           42B7
DISPLAY_2           42B9
DISPLAY_3           42BB
DISPLAY_4           42BD
DISPLAY_5           42BF
DISPLAY_6           42C1
DISPLAY_7           42C3
DISPLAY_8           42C5
DISPLAY_A0          4215
DISPLAY_A0_P        422D
DISPLAY_A0_PM       4285
DISPLAY_A0_PP       4255
DISPLAY_A1          4218
DISPLAY_A1_P        4232
DISPLAY_A1_PM       428B
DISPLAY_A1_PP       425B
DISPLAY_A2          421B
DISPLAY_A2_P        4237
DISPLAY_A2_PM       4291
DISPLAY_A2_PP       4261
DISPLAY_A3          421E
DISPLAY_A3_P        423C
DISPLAY_A3_PM       4297
DISPLAY_A3_PP       4267
DISPLAY_A4          4221
DISPLAY_A4_P        4241
DISPLAY_A4_PM       429D
DISPLAY_A4_PP       426D
DISPLAY_A5          4224
DISPLAY_A5_P        4246
DISPLAY_A5_PM       42A3
DISPLAY_A5_PP       4273
DISPLAY_A6          4227
DISPLAY_A6_P        424B
DISPLAY_A6_PM       42A9
DISPLAY_A6_PP       4279
DISPLAY_A7          422A
DISPLAY_A7_P        4250
DISPLAY_A7_PM       42AF
DISPLAY_A7_PP       427F
DISPLAY_ADDAL       40AD
DISPLAY_ADDAW       409F
DISPLAY_ADDB        4078
DISPLAY_ADDIB       40BB
DISPLAY_ADDIL       40D7
DISPLAY_ADDIW       40C9
DISPLAY_ADDL        4092
DISPLAY_ADDRESS     1602
DISPLAY_ADDW        4085
DISPLAY_ANDB        410F
DISPLAY_ANDL        4129
DISPLAY_ANDW        411C
DISPLAY_AS          4136
DISPLAY_ASR         413F
DISPLAY_B           3FA4
DISPLAY_BCC         41DC
DISPLAY_BGT         41E7
DISPLAY_BLE         41F2
DISPLAY_CLRB        3FFA
DISPLAY_CLRL        4014
DISPLAY_CLRW        4007
DISPLAY_CMPB        4172
DISPLAY_CMPL        418C
DISPLAY_CMPW        417F
DISPLAY_COMMA       3F9C
DISPLAY_D           3FA0
DISPLAY_D0          41FD
DISPLAY_D1          4200
DISPLAY_D2          4203
DISPLAY_D3          4206
DISPLAY_D4          4209
DISPLAY_D5          420C
DISPLAY_D6          420F
DISPLAY_D7          4212
DISPLAY_DATA        3FEE
DISPLAY_DIVU        41CE
DISPLAY_DOLLAR      3F98
DISPLAY_DOT_B       3FAA
DISPLAY_DOT_L       3FB2
DISPLAY_DOT_W       3FAE
DISPLAY_HASH        3F9A
DISPLAY_INVALID_ADDRESS  10AE
DISPLAY_JSR         3FCC
DISPLAY_L           3FA8
DISPLAY_LEA         3FB6
DISPLAY_LS          414A
DISPLAY_LSL         4153
DISPLAY_MOVEB       4021
DISPLAY_MOVEL       403D
DISPLAY_MOVEML      4069
DISPLAY_MOVEMW      405A
DISPLAY_MOVEM_REGISTER  25AC
DISPLAY_MOVEQL      404B
DISPLAY_MOVEW       402F
DISPLAY_MULS        41C0
DISPLAY_NOP         3FD7
DISPLAY_R           3FA2
DISPLAY_RO          415E
DISPLAY_ROL         4167
DISPLAY_RTS         3FC1
DISPLAY_SLASH       3F9E
DISPLAY_SPACE       3F96
DISPLAY_STOP        3FE2
DISPLAY_SUBB        4199
DISPLAY_SUBIB       40E5
DISPLAY_SUBIL       4101
DISPLAY_SUBIW       40F3
DISPLAY_SUBL        41B3
DISPLAY_SUBW        41A6
DISPLAY_W           3FA6
DIVU_RHS            38B6
DONT_ADD_ADDRESS_L  2700
DONT_ADD_ADDRESS_W  266E
DONT_MINUS_ADDRESS_L  2756
DONT_MINUS_ADDRESS_W  26C0
EA_LONG_LOOP_LHS    353E
EA_LONG_LOOP_ONE_OPERAND  3776
EA_LONG_LOOP_RHS    313E
EA_MOVEM_LONG_LOOP_LHS  270E
EA_MOVEM_WORD_LOOP_LHS  267A
EA_WORD_LOOP_LHS    34E0
EA_WORD_LOOP_ONE_OPERAND  371C
EA_WORD_LOOP_RHS    30E6
ENDADDRESS_PROMPT   3DB0
END_ADDRESS         6010
END_ADDR_PROMPT     1056
END_MSG             3D7C
END_OF_CHECK        3D10
END_PROGRAM         42CA
EXIT_DISP_LOOP      16D6
EXIT_EA_LONG_LOOP_LHS  3576
EXIT_EA_LONG_LOOP_ONE_OPERAND  37AE
EXIT_EA_LONG_LOOP_RHS  3176
EXIT_EA_MOVEM_LONG_LOOP_LHS  2746
EXIT_EA_MOVEM_WORD_LOOP_LHS  26B0
EXIT_EA_WORD_LOOP_LHS  3516
EXIT_EA_WORD_LOOP_ONE_OPERAND  3754
EXIT_EA_WORD_LOOP_RHS  311C
EXIT_IMDATA_LOOP_L_LHS  32EA
EXIT_IMDATA_LOOP_L_RHS  3220
EXIT_IMDATA_LOOP_W_LHS  329C
EXIT_IMDATA_LOOP_W_RHS  31D8
EXIT_LOOP           1746
FINAL               3D2C
FOR_LOOP_END        107E
FOR_LOOP_START      1046
GET_ADDI_BITS       2204
GET_BCC_BITS        21D4
GET_CLR_BITS        21E0
GET_DATA_8BITS      2240
GET_EAMODE_BITS     21B8
GET_EAREG_BITS      21C8
GET_IR_BITS         22B0
GET_JSR_BITS        21EC
GET_LEA_BITS        21F8
GET_MOVEM_BITS      2220
GET_MOVEM_DR_BITS   2230
GET_MOVEQ_BITS      2210
GET_MULS_DIVU_BITS  2250
GET_OPMODE_BITS     21A8
GET_REGISTER_BITS   2188
GET_REGISTER_BITS_0TO2  2198
GET_SHIFT_CR_NUM_BITS  22A0
GET_SHIFT_DIRECTION_BITS  2280
GET_SHIFT_IR_BITS   2290
GET_SHIFT_RS_BITS   2270
GET_SHIFT_SIZE_BITS  2260
GO_TO_EA            2868
HEX_TO_ACII_ADDR    161A
HEX_TO_ACII_DISPLACEMENT  1686
IMDATA_LOOP_L_LHS   32B2
IMDATA_LOOP_L_RHS   31E8
IMDATA_LOOP_W_LHS   3266
IMDATA_LOOP_W_RHS   31A2
INITIALIZE_VARIABLES  3B22
INTRO               1000
INVALID_E           11C8
INVALID_LEN_E       11B2
INVALID_LEN_S       1186
INVALID_LOOP        1710
INVALID_ODD_ADDR    1170
INVALID_OP          15AA
INVALID_OPWORD      16EC
INVALID_ROTATIONS_MS  15A4
INVALID_S           119C
IS_ADDA             6054
IS_ADDB             6052
IS_ADDI             6056
IS_ADDL             6060
IS_ADDW             6058
IS_ANDB             6062
IS_ANDL             6066
IS_ANDW             6064
IS_BYTE             6032
IS_CMP              6030
IS_DIVU             6044
IS_DNTOEA           6100
IS_EATODN           6102
IS_IMMEDIATE_DATA   6082
IS_LEA              6038
IS_LEFT             6084
IS_LONG             6036
IS_LONG_IMDATA      32AA
IS_LONG_IMDATA_R    31E0
IS_MEM_TO_REG       6076
IS_MINUSADDR        6080
IS_MOVE             6040
IS_MOVEM            6048
IS_MOVEM_EA_REG     6078
IS_MOVEQ            6046
IS_MULS             6042
IS_STOP             6050
IS_SUBB             6070
IS_SUBI             6068
IS_SUBL             6074
IS_SUBW             6072
IS_WORD             6034
JMP_LOOP            1268
JMP_TABLE           1296
JUMP_FLAG_MINUSADDR  2498
JUMP_SLASH          25A0
JUMP_SLASH_REG_TO_MEM  255E
JUMP_SLASH_SPECIAL_CASE  256A
LEA_RHS             38AE
LF                  A
LOOP_COUNTER        6026
MINUSADDR_REG_END   30B2
MOVEM_DIRECTION     2468
MOVEM_REGISTER_LHS_LOOP  2522
MOVEM_REGISTER_RHS_LOOP  257C
MOVEM_RHS           38BE
MOVEQ_RHS           38BA
MOVE_RHS            38C6
MSB_0000            12F6
MSB_0001            12FC
MSB_0010            1302
MSB_0011            1308
MSB_0100            130E
MSB_0101            1314
MSB_0110            1318
MSB_0111            131E
MSB_1000            1324
MSB_1001            132A
MSB_1010            1330
MSB_1011            1336
MSB_1100            133C
MSB_1101            1342
MSB_1110            1348
MSB_1111            134E
MSB_SUBR_0000       1352
MSB_SUBR_0001       138E
MSB_SUBR_0010       139A
MSB_SUBR_0011       13A6
MSB_SUBR_0100       13B2
MSB_SUBR_0101       1426
MSB_SUBR_0110       142C
MSB_SUBR_0111       1450
MSB_SUBR_1000       1464
MSB_SUBR_1001       1478
MSB_SUBR_1010       14D8
MSB_SUBR_1011       14B4
MSB_SUBR_1100       14DE
MSB_SUBR_1101       1528
MSB_SUBR_1110       1574
MSB_SUBR_1111       15AA
MSG_DECODE          3ED2
MSG_ENDPROGRAM      3F28
MSG_FINAL_PROMPT    3F03
MSG_INVALID_ADDRESS  3E5B
MSG_INVALID_ENTRY   3DEC
MSG_INVALID_LENGTH  3E18
MSG_INVALID_ODDADDR  3EA0
MSG_INVALID_PROMPT  3F3E
MSG_WELCOME         3DCC
MULS_RHS            38B2
NO_L                6E
NO_U                4E
ONE_STEP_BEFORE_PRINT_LOGIC  2630
PRESS_ENTER         124C
PRESS_ENTER_PROMPT  3F6E
PRINT_0_LHS         1E7E
PRINT_1_LHS         1E98
PRINT_2_LHS         1EB2
PRINT_3_LHS         1ECC
PRINT_4_LHS         1EE6
PRINT_5_LHS         1F00
PRINT_6_LHS         1F1A
PRINT_7_LHS         1F34
PRINT_8_LHS         1F4E
PRINT_A0_LHS        1B3E
PRINT_A0_PM_LHS     1DAE
PRINT_A0_PM_RHS     19CE
PRINT_A0_PP_LHS     1CDE
PRINT_A0_PP_RHS     192E
PRINT_A0_P_LHS      1C0E
PRINT_A0_P_RHS      188E
PRINT_A0_RHS        17EE
PRINT_A1_LHS        1B58
PRINT_A1_PM_LHS     1DC8
PRINT_A1_PM_RHS     19E2
PRINT_A1_PP_LHS     1CF8
PRINT_A1_PP_RHS     1942
PRINT_A1_P_LHS      1C28
PRINT_A1_P_RHS      18A2
PRINT_A1_RHS        1802
PRINT_A2_LHS        1B72
PRINT_A2_PM_LHS     1DE2
PRINT_A2_PM_RHS     19F6
PRINT_A2_PP_LHS     1D12
PRINT_A2_PP_RHS     1956
PRINT_A2_P_LHS      1C42
PRINT_A2_P_RHS      18B6
PRINT_A2_RHS        1816
PRINT_A3_LHS        1B8C
PRINT_A3_PM_LHS     1DFC
PRINT_A3_PM_RHS     1A0A
PRINT_A3_PP_LHS     1D2C
PRINT_A3_PP_RHS     196A
PRINT_A3_P_LHS      1C5C
PRINT_A3_P_RHS      18CA
PRINT_A3_RHS        182A
PRINT_A4_LHS        1BA6
PRINT_A4_PM_LHS     1E16
PRINT_A4_PM_RHS     1A1E
PRINT_A4_PP_LHS     1D46
PRINT_A4_PP_RHS     197E
PRINT_A4_P_LHS      1C76
PRINT_A4_P_RHS      18DE
PRINT_A4_RHS        183E
PRINT_A5_LHS        1BC0
PRINT_A5_PM_LHS     1E30
PRINT_A5_PM_RHS     1A32
PRINT_A5_PP_LHS     1D60
PRINT_A5_PP_RHS     1992
PRINT_A5_P_LHS      1C90
PRINT_A5_P_RHS      18F2
PRINT_A5_RHS        1852
PRINT_A6_LHS        1BDA
PRINT_A6_PM_LHS     1E4A
PRINT_A6_PM_RHS     1A46
PRINT_A6_PP_LHS     1D7A
PRINT_A6_PP_RHS     19A6
PRINT_A6_P_LHS      1CAA
PRINT_A6_P_RHS      1906
PRINT_A6_RHS        1866
PRINT_A7_LHS        1BF4
PRINT_A7_PM_LHS     1E64
PRINT_A7_PM_RHS     1A5A
PRINT_A7_PP_LHS     1D94
PRINT_A7_PP_RHS     19BA
PRINT_A7_P_LHS      1CC4
PRINT_A7_P_RHS      191A
PRINT_A7_RHS        187A
PRINT_ADDR_CHAR     6022
PRINT_COMMA         15BE
PRINT_COUNTER       6020
PRINT_CR_NUM        2980
PRINT_D0_LHS        1A6E
PRINT_D0_RHS        174E
PRINT_D1_LHS        1A88
PRINT_D1_RHS        1762
PRINT_D2_LHS        1AA2
PRINT_D2_RHS        1776
PRINT_D3_LHS        1ABC
PRINT_D3_RHS        178A
PRINT_D4_LHS        1AD6
PRINT_D4_RHS        179E
PRINT_D5_LHS        1AF0
PRINT_D5_RHS        17B2
PRINT_D6_LHS        1B0A
PRINT_D6_RHS        17C6
PRINT_D7_LHS        1B24
PRINT_D7_RHS        17DA
PRINT_DISP_ADDR     166E
PRINT_DOLLAR        15CC
PRINT_IMDATA        15DA
PRINT_LOGIC         1222
PRINT_MOVEM_RHS_A0  2078
PRINT_MOVEM_RHS_A1  209A
PRINT_MOVEM_RHS_A2  20BC
PRINT_MOVEM_RHS_A3  20DE
PRINT_MOVEM_RHS_A4  2100
PRINT_MOVEM_RHS_A5  2122
PRINT_MOVEM_RHS_A6  2144
PRINT_MOVEM_RHS_A7  2166
PRINT_MOVEM_RHS_D0  1F68
PRINT_MOVEM_RHS_D1  1F8A
PRINT_MOVEM_RHS_D2  1FAC
PRINT_MOVEM_RHS_D3  1FCE
PRINT_MOVEM_RHS_D4  1FF0
PRINT_MOVEM_RHS_D5  2012
PRINT_MOVEM_RHS_D6  2034
PRINT_MOVEM_RHS_D7  2056
PRINT_SHIFT_EA      2862
PRINT_SHIFT_RIGHT_BYTE  2918
PRINT_SLASH         15B0
REPRESENT_1_TO_8    2998
SAFE                128A
SET_MOVEQ_IMDATA    3250
SHIFT_10_BITS       A
SHIFT_11_BITS       B
SHIFT_12_BITS       C
SHIFT_13_BITS       D
SHIFT_14_BITS       E
SHIFT_15_BITS       F
SHIFT_16_BITS       10
SHIFT_1_BITS        1
SHIFT_4_BITS        4
SHIFT_5_BITS        5
SHIFT_6_BITS        6
SHIFT_7_BITS        7
SHIFT_8_BITS        8
SHIFT_DIRECTION_BYTE  28FC
SHIFT_DIRECTION_MS  2846
SHIFT_PRINT_DOT_B   294C
SHIFT_PRINT_DOT_W   2954
SKIP_AN_SUB         2ED6
SKIP_TO_PRINT_LOGIC  264C
START               1000
STARTADDRESS_PROMPT  3D92
START_ADDRESS       6000
START_ADDR_PROMPT   1026
STEP_FOR_MEM_TO_REG  26FC
STOP_RHS            38C2
STORE_END_ADDRESS   109A
STORE_STR_ADDRESS   108E
SUBB_RHS            3A8A
SUBI_RHS            3A5A
SUB_W_L_RHS         3AD2
VALID_ROTATIONS_MS  1596
VAR_ASR_RS_BITS     0
VAR_BCC             4
VAR_BGT             E
VAR_BLE             F
VAR_CLRB            8
VAR_CLRL            A
VAR_CLRW            9
VAR_CMPB            0
VAR_CMPL            2
VAR_CMPW            1
VAR_DIVU            3
VAR_JSR             3A
VAR_LEA             7
VAR_LSL_RS_BITS     1
VAR_MOVEML          3
VAR_MOVEMW          2
VAR_MOVEQ           0
VAR_MULS            7
VAR_ROL_RS_BITS     3
WORD_DISPLACEMENT   2A86
YES_L               79
YES_U               59
